
SampleWIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000445c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  080046d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e0c  20000074  08004748  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000e80  08004748  00020e80  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029486  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000443f  00000000  00000000  0004952a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00010267  00000000  00000000  0004d969  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001380  00000000  00000000  0005dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000017b0  00000000  00000000  0005ef50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a4c0  00000000  00000000  00060700  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000749a  00000000  00000000  0006abc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0007205a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ff8  00000000  00000000  000720d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045d4 	.word	0x080045d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080045d4 	.word	0x080045d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_InitTick+0x24>)
{
 8000594:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a0:	f000 f884 	bl	80006ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	4621      	mov	r1, r4
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f83e 	bl	800062c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005b0:	2000      	movs	r0, #0
 80005b2:	bd10      	pop	{r4, pc}
 80005b4:	2000000c 	.word	0x2000000c

080005b8 <HAL_Init>:
{
 80005b8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ba:	2003      	movs	r0, #3
 80005bc:	f000 f824 	bl	8000608 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff ffe5 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 80005c6:	f003 f8e5 	bl	8003794 <HAL_MspInit>
}
 80005ca:	2000      	movs	r0, #0
 80005cc:	bd08      	pop	{r3, pc}
	...

080005d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005d0:	4a02      	ldr	r2, [pc, #8]	; (80005dc <HAL_IncTick+0xc>)
 80005d2:	6813      	ldr	r3, [r2, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000c4 	.word	0x200000c4

080005e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <HAL_GetTick+0x8>)
 80005e2:	6818      	ldr	r0, [r3, #0]
}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000c4 	.word	0x200000c4

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
 80005ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff fff6 	bl	80005e0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80005f6:	4605      	mov	r5, r0
  {
    wait++;
 80005f8:	bf18      	it	ne
 80005fa:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 80005fc:	f7ff fff0 	bl	80005e0 <HAL_GetTick>
 8000600:	1b40      	subs	r0, r0, r5
 8000602:	4284      	cmp	r4, r0
 8000604:	d8fa      	bhi.n	80005fc <HAL_Delay+0x10>
  {
  }
}
 8000606:	bd38      	pop	{r3, r4, r5, pc}

08000608 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800060a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000610:	041b      	lsls	r3, r3, #16
 8000612:	0c1b      	lsrs	r3, r3, #16
 8000614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000618:	0200      	lsls	r0, r0, #8
 800061a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000622:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000624:	60d3      	str	r3, [r2, #12]
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	68dc      	ldr	r4, [r3, #12]
 8000632:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000636:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063c:	2b04      	cmp	r3, #4
 800063e:	bf28      	it	cs
 8000640:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000642:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	f04f 0501 	mov.w	r5, #1
 8000648:	fa05 f303 	lsl.w	r3, r5, r3
 800064c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000650:	bf8c      	ite	hi
 8000652:	3c03      	subhi	r4, #3
 8000654:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000656:	4019      	ands	r1, r3
 8000658:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800065a:	fa05 f404 	lsl.w	r4, r5, r4
 800065e:	3c01      	subs	r4, #1
 8000660:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000662:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	ea42 0201 	orr.w	r2, r2, r1
 8000668:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	bfaf      	iteee	ge
 800066e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	f000 000f 	andlt.w	r0, r0, #15
 8000676:	4b06      	ldrlt	r3, [pc, #24]	; (8000690 <HAL_NVIC_SetPriority+0x64>)
 8000678:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	bfa5      	ittet	ge
 800067c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000680:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	e000ed14 	.word	0xe000ed14

08000694 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000694:	0942      	lsrs	r2, r0, #5
 8000696:	2301      	movs	r3, #1
 8000698:	f000 001f 	and.w	r0, r0, #31
 800069c:	fa03 f000 	lsl.w	r0, r3, r0
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <HAL_NVIC_EnableIRQ+0x14>)
 80006a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006a6:	4770      	bx	lr
 80006a8:	e000e100 	.word	0xe000e100

080006ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ac:	3801      	subs	r0, #1
 80006ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b2:	d20a      	bcs.n	80006ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	21f0      	movs	r1, #240	; 0xf0
 80006bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000e010 	.word	0xe000e010
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006da:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006dc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006de:	bf0c      	ite	eq
 80006e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006e4:	f022 0204 	bicne.w	r2, r2, #4
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	4770      	bx	lr
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006f0:	4770      	bx	lr

080006f2 <HAL_SYSTICK_IRQHandler>:
{
 80006f2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006f4:	f7ff fffc 	bl	80006f0 <HAL_SYSTICK_Callback>
 80006f8:	bd08      	pop	{r3, pc}
	...

080006fc <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <DFSDM_GetChannelFromInstance+0x54>)
 80006fe:	4298      	cmp	r0, r3
 8000700:	d017      	beq.n	8000732 <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 8000702:	3320      	adds	r3, #32
 8000704:	4298      	cmp	r0, r3
 8000706:	d016      	beq.n	8000736 <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 8000708:	3320      	adds	r3, #32
 800070a:	4298      	cmp	r0, r3
 800070c:	d015      	beq.n	800073a <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 800070e:	3320      	adds	r3, #32
 8000710:	4298      	cmp	r0, r3
 8000712:	d014      	beq.n	800073e <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if(Instance == DFSDM1_Channel4)
 8000714:	3320      	adds	r3, #32
 8000716:	4298      	cmp	r0, r3
 8000718:	d013      	beq.n	8000742 <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 800071a:	3320      	adds	r3, #32
 800071c:	4298      	cmp	r0, r3
 800071e:	d012      	beq.n	8000746 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 8000720:	3320      	adds	r3, #32
 8000722:	4298      	cmp	r0, r3
 8000724:	d011      	beq.n	800074a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
  {
    channel = 7;
 8000726:	3320      	adds	r3, #32
 8000728:	4298      	cmp	r0, r3
 800072a:	bf14      	ite	ne
 800072c:	20ff      	movne	r0, #255	; 0xff
 800072e:	2007      	moveq	r0, #7
 8000730:	4770      	bx	lr
    channel = 0;
 8000732:	2000      	movs	r0, #0
 8000734:	4770      	bx	lr
    channel = 1;
 8000736:	2001      	movs	r0, #1
 8000738:	4770      	bx	lr
    channel = 2;
 800073a:	2002      	movs	r0, #2
 800073c:	4770      	bx	lr
    channel = 3;
 800073e:	2003      	movs	r0, #3
 8000740:	4770      	bx	lr
    channel = 4;
 8000742:	2004      	movs	r0, #4
 8000744:	4770      	bx	lr
    channel = 5;
 8000746:	2005      	movs	r0, #5
 8000748:	4770      	bx	lr
    channel = 6;
 800074a:	2006      	movs	r0, #6
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return channel;
}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40016000 	.word	0x40016000

08000754 <HAL_DFSDM_ChannelInit>:
{
 8000754:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_channel == NULL)
 8000756:	4604      	mov	r4, r0
 8000758:	2800      	cmp	r0, #0
 800075a:	d067      	beq.n	800082c <HAL_DFSDM_ChannelInit+0xd8>
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800075c:	6800      	ldr	r0, [r0, #0]
 800075e:	4d34      	ldr	r5, [pc, #208]	; (8000830 <HAL_DFSDM_ChannelInit+0xdc>)
 8000760:	f7ff ffcc 	bl	80006fc <DFSDM_GetChannelFromInstance>
 8000764:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d15f      	bne.n	800082c <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800076c:	4620      	mov	r0, r4
 800076e:	f003 f857 	bl	8003820 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8000772:	4b30      	ldr	r3, [pc, #192]	; (8000834 <HAL_DFSDM_ChannelInit+0xe0>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	3201      	adds	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d119      	bne.n	80007b4 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000780:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <HAL_DFSDM_ChannelInit+0xe4>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8000788:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	68a1      	ldr	r1, [r4, #8]
 800078e:	430a      	orrs	r2, r1
 8000790:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8000798:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800079a:	7922      	ldrb	r2, [r4, #4]
 800079c:	2a01      	cmp	r2, #1
 800079e:	d105      	bne.n	80007ac <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 80007a0:	68e1      	ldr	r1, [r4, #12]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	3901      	subs	r1, #1
 80007a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007aa:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80007b2:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80007b4:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80007b6:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80007b8:	6803      	ldr	r3, [r0, #0]
 80007ba:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 80007be:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80007c0:	6923      	ldr	r3, [r4, #16]
 80007c2:	6802      	ldr	r2, [r0, #0]
 80007c4:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80007c6:	69a1      	ldr	r1, [r4, #24]
 80007c8:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80007ca:	4313      	orrs	r3, r2
 80007cc:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80007ce:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80007d0:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80007d2:	f023 030f 	bic.w	r3, r3, #15
 80007d6:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80007d8:	69e3      	ldr	r3, [r4, #28]
 80007da:	6802      	ldr	r2, [r0, #0]
 80007dc:	430b      	orrs	r3, r1
 80007de:	4313      	orrs	r3, r2
 80007e0:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80007e2:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80007e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80007e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80007e8:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 80007ec:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80007ee:	6883      	ldr	r3, [r0, #8]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80007f0:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80007f2:	430b      	orrs	r3, r1
 80007f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007f8:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80007fa:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80007fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8000804:	6843      	ldr	r3, [r0, #4]
 8000806:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800080a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800080c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000810:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000812:	6803      	ldr	r3, [r0, #0]
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800081a:	2301      	movs	r3, #1
 800081c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000820:	f7ff ff6c 	bl	80006fc <DFSDM_GetChannelFromInstance>
 8000824:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8000828:	2000      	movs	r0, #0
 800082a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800082c:	2001      	movs	r0, #1
}
 800082e:	bd38      	pop	{r3, r4, r5, pc}
 8000830:	20000090 	.word	0x20000090
 8000834:	200000b0 	.word	0x200000b0
 8000838:	40016000 	.word	0x40016000

0800083c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000840:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000842:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000844:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80009f0 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000848:	4c67      	ldr	r4, [pc, #412]	; (80009e8 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800084a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 800084c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800084e:	9a01      	ldr	r2, [sp, #4]
 8000850:	40da      	lsrs	r2, r3
 8000852:	d102      	bne.n	800085a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8000854:	b005      	add	sp, #20
 8000856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800085a:	2601      	movs	r6, #1
    if(iocurrent)
 800085c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800085e:	409e      	lsls	r6, r3
    if(iocurrent)
 8000860:	ea12 0e06 	ands.w	lr, r2, r6
 8000864:	f000 80b1 	beq.w	80009ca <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000868:	684a      	ldr	r2, [r1, #4]
 800086a:	f022 0710 	bic.w	r7, r2, #16
 800086e:	2f02      	cmp	r7, #2
 8000870:	d116      	bne.n	80008a0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000872:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000876:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800087a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800087e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000882:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000886:	f04f 0c0f 	mov.w	ip, #15
 800088a:	fa0c fc0a 	lsl.w	ip, ip, sl
 800088e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000892:	690d      	ldr	r5, [r1, #16]
 8000894:	fa05 f50a 	lsl.w	r5, r5, sl
 8000898:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800089c:	f8c9 5020 	str.w	r5, [r9, #32]
 80008a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008a4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80008a6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008aa:	fa05 f50c 	lsl.w	r5, r5, ip
 80008ae:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008b0:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008b4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008b8:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008bc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008be:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80008c4:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c8:	d811      	bhi.n	80008ee <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80008ca:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80008cc:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80008d0:	68cf      	ldr	r7, [r1, #12]
 80008d2:	fa07 f70c 	lsl.w	r7, r7, ip
 80008d6:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80008da:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80008dc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008de:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008e2:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80008e6:	409f      	lsls	r7, r3
 80008e8:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80008ec:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008ee:	f1ba 0f03 	cmp.w	sl, #3
 80008f2:	d107      	bne.n	8000904 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80008f4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008f6:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008fa:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80008fe:	409f      	lsls	r7, r3
 8000900:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000902:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000904:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000906:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000908:	688e      	ldr	r6, [r1, #8]
 800090a:	fa06 f60c 	lsl.w	r6, r6, ip
 800090e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000910:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000912:	00d5      	lsls	r5, r2, #3
 8000914:	d559      	bpl.n	80009ca <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800091a:	f045 0501 	orr.w	r5, r5, #1
 800091e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000922:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000926:	f023 0603 	bic.w	r6, r3, #3
 800092a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800092e:	f005 0501 	and.w	r5, r5, #1
 8000932:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000936:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000938:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800093e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000940:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000944:	270f      	movs	r7, #15
 8000946:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800094a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800094e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000952:	d03c      	beq.n	80009ce <HAL_GPIO_Init+0x192>
 8000954:	4d25      	ldr	r5, [pc, #148]	; (80009ec <HAL_GPIO_Init+0x1b0>)
 8000956:	42a8      	cmp	r0, r5
 8000958:	d03b      	beq.n	80009d2 <HAL_GPIO_Init+0x196>
 800095a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800095e:	42a8      	cmp	r0, r5
 8000960:	d039      	beq.n	80009d6 <HAL_GPIO_Init+0x19a>
 8000962:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000966:	42a8      	cmp	r0, r5
 8000968:	d037      	beq.n	80009da <HAL_GPIO_Init+0x19e>
 800096a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800096e:	42a8      	cmp	r0, r5
 8000970:	d035      	beq.n	80009de <HAL_GPIO_Init+0x1a2>
 8000972:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000976:	42a8      	cmp	r0, r5
 8000978:	d033      	beq.n	80009e2 <HAL_GPIO_Init+0x1a6>
 800097a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800097e:	42a8      	cmp	r0, r5
 8000980:	bf14      	ite	ne
 8000982:	2507      	movne	r5, #7
 8000984:	2506      	moveq	r5, #6
 8000986:	fa05 f50c 	lsl.w	r5, r5, ip
 800098a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800098c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800098e:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000990:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000994:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8000996:	bf54      	ite	pl
 8000998:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800099a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800099e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80009a0:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009a2:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 80009a4:	bf54      	ite	pl
 80009a6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80009a8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80009ac:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80009ae:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009b0:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 80009b2:	bf54      	ite	pl
 80009b4:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80009b6:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80009ba:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80009bc:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009be:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 80009c0:	bf54      	ite	pl
 80009c2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80009c4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80009c8:	60e5      	str	r5, [r4, #12]
    position++;
 80009ca:	3301      	adds	r3, #1
 80009cc:	e73f      	b.n	800084e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80009ce:	2500      	movs	r5, #0
 80009d0:	e7d9      	b.n	8000986 <HAL_GPIO_Init+0x14a>
 80009d2:	2501      	movs	r5, #1
 80009d4:	e7d7      	b.n	8000986 <HAL_GPIO_Init+0x14a>
 80009d6:	2502      	movs	r5, #2
 80009d8:	e7d5      	b.n	8000986 <HAL_GPIO_Init+0x14a>
 80009da:	2503      	movs	r5, #3
 80009dc:	e7d3      	b.n	8000986 <HAL_GPIO_Init+0x14a>
 80009de:	2504      	movs	r5, #4
 80009e0:	e7d1      	b.n	8000986 <HAL_GPIO_Init+0x14a>
 80009e2:	2505      	movs	r5, #5
 80009e4:	e7cf      	b.n	8000986 <HAL_GPIO_Init+0x14a>
 80009e6:	bf00      	nop
 80009e8:	40010400 	.word	0x40010400
 80009ec:	48000400 	.word	0x48000400
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80009f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 80009f8:	4c47      	ldr	r4, [pc, #284]	; (8000b18 <HAL_GPIO_DeInit+0x124>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80009fa:	f8df a124 	ldr.w	sl, [pc, #292]	; 8000b20 <HAL_GPIO_DeInit+0x12c>
 80009fe:	f8df b124 	ldr.w	fp, [pc, #292]	; 8000b24 <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00;
 8000a02:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1U << position);
 8000a04:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8000a08:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != RESET)
 8000a0c:	fa31 f203 	lsrs.w	r2, r1, r3
 8000a10:	d102      	bne.n	8000a18 <HAL_GPIO_DeInit+0x24>
      }
    }
    
    position++;
  }
}
 8000a12:	b003      	add	sp, #12
 8000a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8000a18:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent)
 8000a1c:	ea11 0206 	ands.w	r2, r1, r6
 8000a20:	9201      	str	r2, [sp, #4]
 8000a22:	d06a      	beq.n	8000afa <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8000a24:	6807      	ldr	r7, [r0, #0]
 8000a26:	005a      	lsls	r2, r3, #1
 8000a28:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a2c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8000a30:	4317      	orrs	r7, r2
 8000a32:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000a36:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a38:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8000a3c:	f003 0e07 	and.w	lr, r3, #7
 8000a40:	463d      	mov	r5, r7
 8000a42:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a46:	270f      	movs	r7, #15
 8000a48:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000a4c:	ea25 0e0e 	bic.w	lr, r5, lr
 8000a50:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000a54:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	ea0e 0e02 	and.w	lr, lr, r2
 8000a5e:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a62:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000a66:	43f6      	mvns	r6, r6
 8000a68:	ea0e 0e06 	and.w	lr, lr, r6
 8000a6c:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000a70:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8000a74:	ea02 020e 	and.w	r2, r2, lr
 8000a78:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000a7a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a7c:	4016      	ands	r6, r2
 8000a7e:	62c6      	str	r6, [r0, #44]	; 0x2c
 8000a80:	f023 0603 	bic.w	r6, r3, #3
 8000a84:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000a88:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a8c:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8000a90:	68b2      	ldr	r2, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a92:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a96:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8000a9a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a9e:	ea02 0c07 	and.w	ip, r2, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8000aa2:	d02c      	beq.n	8000afe <HAL_GPIO_DeInit+0x10a>
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <HAL_GPIO_DeInit+0x128>)
 8000aa6:	4290      	cmp	r0, r2
 8000aa8:	d02b      	beq.n	8000b02 <HAL_GPIO_DeInit+0x10e>
 8000aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000aae:	4290      	cmp	r0, r2
 8000ab0:	d029      	beq.n	8000b06 <HAL_GPIO_DeInit+0x112>
 8000ab2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ab6:	4290      	cmp	r0, r2
 8000ab8:	d027      	beq.n	8000b0a <HAL_GPIO_DeInit+0x116>
 8000aba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000abe:	4290      	cmp	r0, r2
 8000ac0:	d025      	beq.n	8000b0e <HAL_GPIO_DeInit+0x11a>
 8000ac2:	4550      	cmp	r0, sl
 8000ac4:	d025      	beq.n	8000b12 <HAL_GPIO_DeInit+0x11e>
 8000ac6:	4558      	cmp	r0, fp
 8000ac8:	bf0c      	ite	eq
 8000aca:	2206      	moveq	r2, #6
 8000acc:	2207      	movne	r2, #7
 8000ace:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ad2:	4594      	cmp	ip, r2
 8000ad4:	d111      	bne.n	8000afa <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000ad6:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8000ad8:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000ada:	ea22 0707 	bic.w	r7, r2, r7
 8000ade:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8000ae0:	6822      	ldr	r2, [r4, #0]
 8000ae2:	43ed      	mvns	r5, r5
 8000ae4:	402a      	ands	r2, r5
 8000ae6:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 8000ae8:	6862      	ldr	r2, [r4, #4]
 8000aea:	402a      	ands	r2, r5
 8000aec:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 8000aee:	68a2      	ldr	r2, [r4, #8]
 8000af0:	402a      	ands	r2, r5
 8000af2:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 8000af4:	68e2      	ldr	r2, [r4, #12]
 8000af6:	4015      	ands	r5, r2
 8000af8:	60e5      	str	r5, [r4, #12]
    position++;
 8000afa:	3301      	adds	r3, #1
 8000afc:	e786      	b.n	8000a0c <HAL_GPIO_DeInit+0x18>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8000afe:	2200      	movs	r2, #0
 8000b00:	e7e5      	b.n	8000ace <HAL_GPIO_DeInit+0xda>
 8000b02:	2201      	movs	r2, #1
 8000b04:	e7e3      	b.n	8000ace <HAL_GPIO_DeInit+0xda>
 8000b06:	2202      	movs	r2, #2
 8000b08:	e7e1      	b.n	8000ace <HAL_GPIO_DeInit+0xda>
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	e7df      	b.n	8000ace <HAL_GPIO_DeInit+0xda>
 8000b0e:	2204      	movs	r2, #4
 8000b10:	e7dd      	b.n	8000ace <HAL_GPIO_DeInit+0xda>
 8000b12:	2205      	movs	r2, #5
 8000b14:	e7db      	b.n	8000ace <HAL_GPIO_DeInit+0xda>
 8000b16:	bf00      	nop
 8000b18:	40010400 	.word	0x40010400
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	48001400 	.word	0x48001400
 8000b24:	48001800 	.word	0x48001800

08000b28 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b28:	6903      	ldr	r3, [r0, #16]
 8000b2a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000b2c:	bf14      	ite	ne
 8000b2e:	2001      	movne	r0, #1
 8000b30:	2000      	moveq	r0, #0
 8000b32:	4770      	bx	lr

08000b34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b34:	b10a      	cbz	r2, 8000b3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b36:	6181      	str	r1, [r0, #24]
 8000b38:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b3a:	6281      	str	r1, [r0, #40]	; 0x28
 8000b3c:	4770      	bx	lr

08000b3e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b3e:	4770      	bx	lr

08000b40 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000b40:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000b44:	6959      	ldr	r1, [r3, #20]
 8000b46:	4201      	tst	r1, r0
 8000b48:	d002      	beq.n	8000b50 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b4a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b4c:	f7ff fff7 	bl	8000b3e <HAL_GPIO_EXTI_Callback>
 8000b50:	bd08      	pop	{r3, pc}
 8000b52:	bf00      	nop
 8000b54:	40010400 	.word	0x40010400

08000b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b58:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d04a      	beq.n	8000bf6 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000b64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b68:	b91b      	cbnz	r3, 8000b72 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b6a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b6e:	f002 fe7b 	bl	8003868 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b72:	2324      	movs	r3, #36	; 0x24
 8000b74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b78:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b7a:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	f022 0201 	bic.w	r2, r2, #1
 8000b82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b84:	6862      	ldr	r2, [r4, #4]
 8000b86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b8a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b8c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b8e:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b98:	d124      	bne.n	8000be4 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b9e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ba0:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000ba2:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ba4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000ba8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bac:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bb4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000bb6:	6922      	ldr	r2, [r4, #16]
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	69a1      	ldr	r1, [r4, #24]
 8000bbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000bc0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000bc2:	6a21      	ldr	r1, [r4, #32]
 8000bc4:	69e2      	ldr	r2, [r4, #28]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	f042 0201 	orr.w	r2, r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bd2:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000bd4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bd6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000bd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000bdc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bde:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000be2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000be4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000be8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bea:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000bec:	bf04      	itt	eq
 8000bee:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000bf2:	605a      	streq	r2, [r3, #4]
 8000bf4:	e7d4      	b.n	8000ba0 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000bf6:	2001      	movs	r0, #1
}
 8000bf8:	bd10      	pop	{r4, pc}

08000bfa <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bfa:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	2a20      	cmp	r2, #32
{
 8000c02:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c04:	d11d      	bne.n	8000c42 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c06:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d019      	beq.n	8000c42 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c0e:	2324      	movs	r3, #36	; 0x24
 8000c10:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c14:	6803      	ldr	r3, [r0, #0]
 8000c16:	681c      	ldr	r4, [r3, #0]
 8000c18:	f024 0401 	bic.w	r4, r4, #1
 8000c1c:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000c1e:	681c      	ldr	r4, [r3, #0]
 8000c20:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000c24:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000c26:	681c      	ldr	r4, [r3, #0]
 8000c28:	4321      	orrs	r1, r4
 8000c2a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000c2c:	6819      	ldr	r1, [r3, #0]
 8000c2e:	f041 0101 	orr.w	r1, r1, #1
 8000c32:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c34:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000c36:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c3a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000c42:	2002      	movs	r0, #2
  }
}
 8000c44:	bd10      	pop	{r4, pc}

08000c46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000c46:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c48:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000c4c:	b2e4      	uxtb	r4, r4
 8000c4e:	2c20      	cmp	r4, #32
 8000c50:	d11c      	bne.n	8000c8c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c52:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d018      	beq.n	8000c8c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c5a:	2324      	movs	r3, #36	; 0x24
 8000c5c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c60:	6803      	ldr	r3, [r0, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	f022 0201 	bic.w	r2, r2, #1
 8000c68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000c6a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000c6c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000c70:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000c74:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	f042 0201 	orr.w	r2, r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c7e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000c80:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c84:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000c88:	4618      	mov	r0, r3
 8000c8a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000c8c:	2002      	movs	r0, #2
  }
}
 8000c8e:	bd10      	pop	{r4, pc}

08000c90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000c94:	4604      	mov	r4, r0
{
 8000c96:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d07c      	beq.n	8000d96 <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000c9c:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 8000ca0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ca4:	b91b      	cbnz	r3, 8000cae <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ca6:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000caa:	f002 feaf 	bl	8003a0c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cae:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cb0:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8000cb2:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cb6:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 8000cba:	f001 fe52 	bl	8002962 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc0:	466e      	mov	r6, sp
 8000cc2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cc8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ccc:	e886 0003 	stmia.w	r6, {r0, r1}
 8000cd0:	f104 0804 	add.w	r8, r4, #4
 8000cd4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000cd8:	6820      	ldr	r0, [r4, #0]
 8000cda:	f001 fe2e 	bl	800293a <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	6820      	ldr	r0, [r4, #0]
 8000ce2:	f001 fe44 	bl	800296e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	6860      	ldr	r0, [r4, #4]
 8000cea:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8000cee:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8000cf2:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000cf4:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f103 031c 	add.w	r3, r3, #28
 8000cfc:	d13b      	bne.n	8000d76 <HAL_PCD_Init+0xe6>
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8000d02:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000d04:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000d08:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 8000d0c:	3201      	adds	r2, #1
 8000d0e:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 8000d10:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000d14:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 8000d18:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 8000d1c:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 8000d20:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 8000d24:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 8000d28:	d1ec      	bne.n	8000d04 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2c:	466e      	mov	r6, sp
 8000d2e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d38:	e886 0003 	stmia.w	r6, {r0, r1}
 8000d3c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000d40:	6820      	ldr	r0, [r4, #0]
 8000d42:	f001 fe2b 	bl	800299c <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 8000d46:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 8000d48:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 8000d4c:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8000d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d102      	bne.n	8000d5c <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8000d56:	4620      	mov	r0, r4
 8000d58:	f000 f81f 	bl	8000d9a <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 8000d5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d102      	bne.n	8000d68 <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8000d62:	4620      	mov	r0, r4
 8000d64:	f000 f82c 	bl	8000dc0 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8000d68:	6820      	ldr	r0, [r4, #0]
 8000d6a:	f001 fed8 	bl	8002b1e <USB_DevDisconnect>
  return HAL_OK;
 8000d6e:	2000      	movs	r0, #0
}
 8000d70:	b00a      	add	sp, #40	; 0x28
 8000d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 8000d76:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000d7a:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 8000d7e:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000d82:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 8000d86:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 8000d8a:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 8000d8e:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000d92:	3201      	adds	r2, #1
 8000d94:	e7af      	b.n	8000cf6 <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 8000d96:	2001      	movs	r0, #1
 8000d98:	e7ea      	b.n	8000d70 <HAL_PCD_Init+0xe0>

08000d9a <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000d9a:	6802      	ldr	r2, [r0, #0]
{
 8000d9c:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 8000d9e:	2101      	movs	r1, #1
 8000da0:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 8000da4:	2000      	movs	r0, #0
 8000da6:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000daa:	6993      	ldr	r3, [r2, #24]
 8000dac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000db0:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000db2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	f043 0303 	orr.w	r3, r3, #3
 8000dbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000dc0:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8000dc8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dce:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000dd4:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <HAL_PWREx_GetVoltageRange+0xc>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8000dd8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40007000 	.word	0x40007000

08000de4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000de6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000de8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dec:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000df0:	d11a      	bne.n	8000e28 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000df2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000df6:	d013      	beq.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df8:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000dfa:	4912      	ldr	r1, [pc, #72]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfc:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e04:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000e06:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	fbb2 f1f1 	udiv	r1, r2, r1
 8000e0e:	2232      	movs	r2, #50	; 0x32
 8000e10:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000e12:	b112      	cbz	r2, 8000e1a <HAL_PWREx_ControlVoltageScaling+0x36>
 8000e14:	6959      	ldr	r1, [r3, #20]
 8000e16:	0549      	lsls	r1, r1, #21
 8000e18:	d404      	bmi.n	8000e24 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	055b      	lsls	r3, r3, #21
 8000e1e:	d40d      	bmi.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8000e20:	2000      	movs	r0, #0
 8000e22:	4770      	bx	lr
        wait_loop_index--;
 8000e24:	3a01      	subs	r2, #1
 8000e26:	e7f4      	b.n	8000e12 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e28:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e2c:	bf1f      	itttt	ne
 8000e2e:	681a      	ldrne	r2, [r3, #0]
 8000e30:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000e34:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000e38:	601a      	strne	r2, [r3, #0]
 8000e3a:	e7f1      	b.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8000e3c:	2003      	movs	r0, #3
}  
 8000e3e:	4770      	bx	lr
 8000e40:	40007000 	.word	0x40007000
 8000e44:	000f4240 	.word	0x000f4240
 8000e48:	2000000c 	.word	0x2000000c

08000e4c <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.  
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8000e4c:	4a02      	ldr	r2, [pc, #8]	; (8000e58 <HAL_PWREx_EnableVddUSB+0xc>)
 8000e4e:	6853      	ldr	r3, [r2, #4]
 8000e50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e54:	6053      	str	r3, [r2, #4]
 8000e56:	4770      	bx	lr
 8000e58:	40007000 	.word	0x40007000

08000e5c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8000e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e60:	9d06      	ldr	r5, [sp, #24]
 8000e62:	4604      	mov	r4, r0
 8000e64:	460f      	mov	r7, r1
 8000e66:	4616      	mov	r6, r2
 8000e68:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8000e6a:	6821      	ldr	r1, [r4, #0]
 8000e6c:	688a      	ldr	r2, [r1, #8]
 8000e6e:	423a      	tst	r2, r7
 8000e70:	bf14      	ite	ne
 8000e72:	2201      	movne	r2, #1
 8000e74:	2200      	moveq	r2, #0
 8000e76:	42b2      	cmp	r2, r6
 8000e78:	d102      	bne.n	8000e80 <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000e7a:	2000      	movs	r0, #0
}
 8000e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e80:	1c6b      	adds	r3, r5, #1
 8000e82:	d0f3      	beq.n	8000e6c <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e84:	b94d      	cbnz	r5, 8000e9a <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8000e86:	2304      	movs	r3, #4
 8000e88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8000e8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000e94:	2001      	movs	r0, #1
 8000e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e9a:	f7ff fba1 	bl	80005e0 <HAL_GetTick>
 8000e9e:	eba0 0008 	sub.w	r0, r0, r8
 8000ea2:	4285      	cmp	r5, r0
 8000ea4:	d2e1      	bcs.n	8000e6a <QSPI_WaitFlagStateUntilTimeout+0xe>
 8000ea6:	e7ee      	b.n	8000e86 <QSPI_WaitFlagStateUntilTimeout+0x2a>

08000ea8 <HAL_QSPI_Init>:
{
 8000ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000eaa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff fb98 	bl	80005e0 <HAL_GetTick>
 8000eb0:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d049      	beq.n	8000f4a <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8000eb6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d047      	beq.n	8000f4e <HAL_QSPI_Init+0xa6>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8000ec4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000ec8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8000ecc:	b93a      	cbnz	r2, 8000ede <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8000ece:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f002 fcf0 	bl	80038b8 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8000ed8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000edc:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, 
 8000ede:	6820      	ldr	r0, [r4, #0]
 8000ee0:	68a1      	ldr	r1, [r4, #8]
 8000ee2:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000ee4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, 
 8000ee6:	3901      	subs	r1, #1
 8000ee8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000eec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ef0:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	462b      	mov	r3, r5
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff ffae 	bl	8000e5c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8000f00:	b9f0      	cbnz	r0, 8000f40 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT), 
 8000f02:	6822      	ldr	r2, [r4, #0]
 8000f04:	6865      	ldr	r5, [r4, #4]
 8000f06:	6811      	ldr	r1, [r2, #0]
 8000f08:	68e3      	ldr	r3, [r4, #12]
 8000f0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000f0e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8000f12:	f021 0110 	bic.w	r1, r1, #16
 8000f16:	430b      	orrs	r3, r1
 8000f18:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8000f1a:	69a1      	ldr	r1, [r4, #24]
 8000f1c:	6963      	ldr	r3, [r4, #20]
 8000f1e:	6855      	ldr	r5, [r2, #4]
 8000f20:	430b      	orrs	r3, r1
 8000f22:	6921      	ldr	r1, [r4, #16]
 8000f24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f28:	490a      	ldr	r1, [pc, #40]	; (8000f54 <HAL_QSPI_Init+0xac>)
 8000f2a:	4029      	ands	r1, r5
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8000f30:	6813      	ldr	r3, [r2, #0]
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8000f38:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8000f3a:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8000f3c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8000f40:	2300      	movs	r3, #0
 8000f42:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8000f46:	b003      	add	sp, #12
 8000f48:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	e7fb      	b.n	8000f46 <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	e7f9      	b.n	8000f46 <HAL_QSPI_Init+0x9e>
 8000f52:	bf00      	nop
 8000f54:	ffe0f8fe 	.word	0xffe0f8fe

08000f58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000f5a:	4d1e      	ldr	r5, [pc, #120]	; (8000fd4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000f5c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f5e:	00da      	lsls	r2, r3, #3
{
 8000f60:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000f62:	d518      	bpl.n	8000f96 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000f64:	f7ff ff36 	bl	8000dd4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f68:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000f6c:	d123      	bne.n	8000fb6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000f6e:	2c80      	cmp	r4, #128	; 0x80
 8000f70:	d929      	bls.n	8000fc6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000f72:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000f74:	bf8c      	ite	hi
 8000f76:	2002      	movhi	r0, #2
 8000f78:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000f7c:	6813      	ldr	r3, [r2, #0]
 8000f7e:	f023 0307 	bic.w	r3, r3, #7
 8000f82:	4303      	orrs	r3, r0
 8000f84:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8000f86:	6813      	ldr	r3, [r2, #0]
 8000f88:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000f8c:	1a18      	subs	r0, r3, r0
 8000f8e:	bf18      	it	ne
 8000f90:	2001      	movne	r0, #1
 8000f92:	b003      	add	sp, #12
 8000f94:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	65ab      	str	r3, [r5, #88]	; 0x58
 8000f9e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000fa8:	f7ff ff14 	bl	8000dd4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000fac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	65ab      	str	r3, [r5, #88]	; 0x58
 8000fb4:	e7d8      	b.n	8000f68 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000fb6:	2c80      	cmp	r4, #128	; 0x80
 8000fb8:	d807      	bhi.n	8000fca <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000fba:	d008      	beq.n	8000fce <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000fbc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000fc0:	4258      	negs	r0, r3
 8000fc2:	4158      	adcs	r0, r3
 8000fc4:	e7d9      	b.n	8000f7a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	e7d7      	b.n	8000f7a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000fca:	2003      	movs	r0, #3
 8000fcc:	e7d5      	b.n	8000f7a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000fce:	2002      	movs	r0, #2
 8000fd0:	e7d3      	b.n	8000f7a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	f012 0f0c 	tst.w	r2, #12
{
 8000fe4:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000fe6:	d009      	beq.n	8000ffc <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000fee:	2a0c      	cmp	r2, #12
 8000ff0:	d12d      	bne.n	800104e <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	f002 0203 	and.w	r2, r2, #3
 8000ff8:	2a01      	cmp	r2, #1
 8000ffa:	d128      	bne.n	800104e <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000ffc:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000ffe:	4928      	ldr	r1, [pc, #160]	; (80010a0 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001000:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001002:	bf55      	itete	pl
 8001004:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001008:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800100a:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800100e:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001012:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001016:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001018:	f011 0f0c 	tst.w	r1, #12
 800101c:	bf0c      	ite	eq
 800101e:	4610      	moveq	r0, r2
 8001020:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001022:	6899      	ldr	r1, [r3, #8]
 8001024:	f001 010c 	and.w	r1, r1, #12
 8001028:	290c      	cmp	r1, #12
 800102a:	d130      	bne.n	800108e <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800102c:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800102e:	68d8      	ldr	r0, [r3, #12]
 8001030:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001034:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001036:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 800103a:	2802      	cmp	r0, #2
 800103c:	d019      	beq.n	8001072 <HAL_RCC_GetSysClockFreq+0x96>
 800103e:	2803      	cmp	r0, #3
 8001040:	d026      	beq.n	8001090 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001042:	fbb2 f2f1 	udiv	r2, r2, r1
 8001046:	68d8      	ldr	r0, [r3, #12]
 8001048:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800104c:	e017      	b.n	800107e <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	f002 020c 	and.w	r2, r2, #12
 8001054:	2a04      	cmp	r2, #4
 8001056:	d007      	beq.n	8001068 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	f002 020c 	and.w	r2, r2, #12
 800105e:	2a08      	cmp	r2, #8
 8001060:	d104      	bne.n	800106c <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001062:	4810      	ldr	r0, [pc, #64]	; (80010a4 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001064:	2200      	movs	r2, #0
 8001066:	e7dc      	b.n	8001022 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001068:	480f      	ldr	r0, [pc, #60]	; (80010a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800106a:	e7fb      	b.n	8001064 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 800106c:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800106e:	4602      	mov	r2, r0
 8001070:	e7d7      	b.n	8001022 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001076:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800107a:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001084:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001086:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001088:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800108a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800108e:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001094:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001098:	e7ef      	b.n	800107a <HAL_RCC_GetSysClockFreq+0x9e>
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	08004660 	.word	0x08004660
 80010a4:	007a1200 	.word	0x007a1200
 80010a8:	00f42400 	.word	0x00f42400

080010ac <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ac:	6803      	ldr	r3, [r0, #0]
{
 80010ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80010b2:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010b4:	06d8      	lsls	r0, r3, #27
 80010b6:	d53b      	bpl.n	8001130 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80010b8:	4ca9      	ldr	r4, [pc, #676]	; (8001360 <HAL_RCC_OscConfig+0x2b4>)
 80010ba:	68a3      	ldr	r3, [r4, #8]
 80010bc:	f013 0f0c 	tst.w	r3, #12
 80010c0:	d160      	bne.n	8001184 <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	0799      	lsls	r1, r3, #30
 80010c6:	d505      	bpl.n	80010d4 <HAL_RCC_OscConfig+0x28>
 80010c8:	69ab      	ldr	r3, [r5, #24]
 80010ca:	b91b      	cbnz	r3, 80010d4 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 80010cc:	2001      	movs	r0, #1
}
 80010ce:	b002      	add	sp, #8
 80010d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	6a28      	ldr	r0, [r5, #32]
 80010d8:	071a      	lsls	r2, r3, #28
 80010da:	bf56      	itet	pl
 80010dc:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80010e0:	6823      	ldrmi	r3, [r4, #0]
 80010e2:	091b      	lsrpl	r3, r3, #4
 80010e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010e8:	4283      	cmp	r3, r0
 80010ea:	d236      	bcs.n	800115a <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ec:	f7ff ff34 	bl	8000f58 <RCC_SetFlashLatencyFromMSIRange>
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d1eb      	bne.n	80010cc <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	6023      	str	r3, [r4, #0]
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	6a2a      	ldr	r2, [r5, #32]
 8001100:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001104:	4313      	orrs	r3, r2
 8001106:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001108:	6863      	ldr	r3, [r4, #4]
 800110a:	69ea      	ldr	r2, [r5, #28]
 800110c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001110:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001114:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001116:	f7ff ff61 	bl	8000fdc <HAL_RCC_GetSysClockFreq>
 800111a:	68a3      	ldr	r3, [r4, #8]
 800111c:	4a91      	ldr	r2, [pc, #580]	; (8001364 <HAL_RCC_OscConfig+0x2b8>)
 800111e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	40d8      	lsrs	r0, r3
 8001126:	4b90      	ldr	r3, [pc, #576]	; (8001368 <HAL_RCC_OscConfig+0x2bc>)
 8001128:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fa30 	bl	8000590 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	07de      	lsls	r6, r3, #31
 8001134:	d45b      	bmi.n	80011ee <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001136:	682b      	ldr	r3, [r5, #0]
 8001138:	079c      	lsls	r4, r3, #30
 800113a:	f100 80a3 	bmi.w	8001284 <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113e:	682b      	ldr	r3, [r5, #0]
 8001140:	0719      	lsls	r1, r3, #28
 8001142:	f100 80e1 	bmi.w	8001308 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	075a      	lsls	r2, r3, #29
 800114a:	f100 810f 	bmi.w	800136c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800114e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001150:	2a00      	cmp	r2, #0
 8001152:	f040 8176 	bne.w	8001442 <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8001156:	2000      	movs	r0, #0
 8001158:	e7b9      	b.n	80010ce <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6023      	str	r3, [r4, #0]
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001168:	4303      	orrs	r3, r0
 800116a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800116c:	6863      	ldr	r3, [r4, #4]
 800116e:	69ea      	ldr	r2, [r5, #28]
 8001170:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001174:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001178:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800117a:	f7ff feed 	bl	8000f58 <RCC_SetFlashLatencyFromMSIRange>
 800117e:	2800      	cmp	r0, #0
 8001180:	d0c9      	beq.n	8001116 <HAL_RCC_OscConfig+0x6a>
 8001182:	e7a3      	b.n	80010cc <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001184:	69ab      	ldr	r3, [r5, #24]
 8001186:	b313      	cbz	r3, 80011ce <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001190:	f7ff fa26 	bl	80005e0 <HAL_GetTick>
 8001194:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	079b      	lsls	r3, r3, #30
 800119a:	d511      	bpl.n	80011c0 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	f043 0308 	orr.w	r3, r3, #8
 80011a2:	6023      	str	r3, [r4, #0]
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	6a2a      	ldr	r2, [r5, #32]
 80011a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011ac:	4313      	orrs	r3, r2
 80011ae:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b0:	6863      	ldr	r3, [r4, #4]
 80011b2:	69ea      	ldr	r2, [r5, #28]
 80011b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80011b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011bc:	6063      	str	r3, [r4, #4]
 80011be:	e7b7      	b.n	8001130 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011c0:	f7ff fa0e 	bl	80005e0 <HAL_GetTick>
 80011c4:	1b80      	subs	r0, r0, r6
 80011c6:	2802      	cmp	r0, #2
 80011c8:	d9e5      	bls.n	8001196 <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 80011ca:	2003      	movs	r0, #3
 80011cc:	e77f      	b.n	80010ce <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011d6:	f7ff fa03 	bl	80005e0 <HAL_GetTick>
 80011da:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	079f      	lsls	r7, r3, #30
 80011e0:	d5a6      	bpl.n	8001130 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011e2:	f7ff f9fd 	bl	80005e0 <HAL_GetTick>
 80011e6:	1b80      	subs	r0, r0, r6
 80011e8:	2802      	cmp	r0, #2
 80011ea:	d9f7      	bls.n	80011dc <HAL_RCC_OscConfig+0x130>
 80011ec:	e7ed      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80011ee:	4c5c      	ldr	r4, [pc, #368]	; (8001360 <HAL_RCC_OscConfig+0x2b4>)
 80011f0:	68a3      	ldr	r3, [r4, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d009      	beq.n	800120e <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011fa:	68a3      	ldr	r3, [r4, #8]
 80011fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001200:	2b0c      	cmp	r3, #12
 8001202:	d10b      	bne.n	800121c <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001204:	68e3      	ldr	r3, [r4, #12]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b03      	cmp	r3, #3
 800120c:	d106      	bne.n	800121c <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	0398      	lsls	r0, r3, #14
 8001212:	d590      	bpl.n	8001136 <HAL_RCC_OscConfig+0x8a>
 8001214:	686b      	ldr	r3, [r5, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d18d      	bne.n	8001136 <HAL_RCC_OscConfig+0x8a>
 800121a:	e757      	b.n	80010cc <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121c:	686b      	ldr	r3, [r5, #4]
 800121e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001222:	d110      	bne.n	8001246 <HAL_RCC_OscConfig+0x19a>
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800122c:	f7ff f9d8 	bl	80005e0 <HAL_GetTick>
 8001230:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	0399      	lsls	r1, r3, #14
 8001236:	f53f af7e 	bmi.w	8001136 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800123a:	f7ff f9d1 	bl	80005e0 <HAL_GetTick>
 800123e:	1b80      	subs	r0, r0, r6
 8001240:	2864      	cmp	r0, #100	; 0x64
 8001242:	d9f6      	bls.n	8001232 <HAL_RCC_OscConfig+0x186>
 8001244:	e7c1      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001246:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124a:	d104      	bne.n	8001256 <HAL_RCC_OscConfig+0x1aa>
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001252:	6023      	str	r3, [r4, #0]
 8001254:	e7e6      	b.n	8001224 <HAL_RCC_OscConfig+0x178>
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800125c:	6022      	str	r2, [r4, #0]
 800125e:	6822      	ldr	r2, [r4, #0]
 8001260:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001264:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1e0      	bne.n	800122c <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 800126a:	f7ff f9b9 	bl	80005e0 <HAL_GetTick>
 800126e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	039a      	lsls	r2, r3, #14
 8001274:	f57f af5f 	bpl.w	8001136 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff f9b2 	bl	80005e0 <HAL_GetTick>
 800127c:	1b80      	subs	r0, r0, r6
 800127e:	2864      	cmp	r0, #100	; 0x64
 8001280:	d9f6      	bls.n	8001270 <HAL_RCC_OscConfig+0x1c4>
 8001282:	e7a2      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001284:	4c36      	ldr	r4, [pc, #216]	; (8001360 <HAL_RCC_OscConfig+0x2b4>)
 8001286:	68a3      	ldr	r3, [r4, #8]
 8001288:	f003 030c 	and.w	r3, r3, #12
 800128c:	2b04      	cmp	r3, #4
 800128e:	d009      	beq.n	80012a4 <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001290:	68a3      	ldr	r3, [r4, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001296:	2b0c      	cmp	r3, #12
 8001298:	d113      	bne.n	80012c2 <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800129a:	68e3      	ldr	r3, [r4, #12]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d10e      	bne.n	80012c2 <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	055b      	lsls	r3, r3, #21
 80012a8:	d503      	bpl.n	80012b2 <HAL_RCC_OscConfig+0x206>
 80012aa:	68eb      	ldr	r3, [r5, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f43f af0d 	beq.w	80010cc <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	6863      	ldr	r3, [r4, #4]
 80012b4:	692a      	ldr	r2, [r5, #16]
 80012b6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80012ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012be:	6063      	str	r3, [r4, #4]
 80012c0:	e73d      	b.n	800113e <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c2:	68eb      	ldr	r3, [r5, #12]
 80012c4:	b17b      	cbz	r3, 80012e6 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012ce:	f7ff f987 	bl	80005e0 <HAL_GetTick>
 80012d2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	055f      	lsls	r7, r3, #21
 80012d8:	d4eb      	bmi.n	80012b2 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012da:	f7ff f981 	bl	80005e0 <HAL_GetTick>
 80012de:	1b80      	subs	r0, r0, r6
 80012e0:	2802      	cmp	r0, #2
 80012e2:	d9f7      	bls.n	80012d4 <HAL_RCC_OscConfig+0x228>
 80012e4:	e771      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012ee:	f7ff f977 	bl	80005e0 <HAL_GetTick>
 80012f2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	0558      	lsls	r0, r3, #21
 80012f8:	f57f af21 	bpl.w	800113e <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fc:	f7ff f970 	bl	80005e0 <HAL_GetTick>
 8001300:	1b80      	subs	r0, r0, r6
 8001302:	2802      	cmp	r0, #2
 8001304:	d9f6      	bls.n	80012f4 <HAL_RCC_OscConfig+0x248>
 8001306:	e760      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001308:	696b      	ldr	r3, [r5, #20]
 800130a:	4c15      	ldr	r4, [pc, #84]	; (8001360 <HAL_RCC_OscConfig+0x2b4>)
 800130c:	b19b      	cbz	r3, 8001336 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 800130e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800131a:	f7ff f961 	bl	80005e0 <HAL_GetTick>
 800131e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001320:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001324:	079b      	lsls	r3, r3, #30
 8001326:	f53f af0e 	bmi.w	8001146 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132a:	f7ff f959 	bl	80005e0 <HAL_GetTick>
 800132e:	1b80      	subs	r0, r0, r6
 8001330:	2802      	cmp	r0, #2
 8001332:	d9f5      	bls.n	8001320 <HAL_RCC_OscConfig+0x274>
 8001334:	e749      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 8001336:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001342:	f7ff f94d 	bl	80005e0 <HAL_GetTick>
 8001346:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001348:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800134c:	079f      	lsls	r7, r3, #30
 800134e:	f57f aefa 	bpl.w	8001146 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001352:	f7ff f945 	bl	80005e0 <HAL_GetTick>
 8001356:	1b80      	subs	r0, r0, r6
 8001358:	2802      	cmp	r0, #2
 800135a:	d9f5      	bls.n	8001348 <HAL_RCC_OscConfig+0x29c>
 800135c:	e735      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	08004647 	.word	0x08004647
 8001368:	2000000c 	.word	0x2000000c
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800136c:	4c66      	ldr	r4, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x45c>)
 800136e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001370:	00de      	lsls	r6, r3, #3
 8001372:	d427      	bmi.n	80013c4 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001374:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137a:	65a3      	str	r3, [r4, #88]	; 0x58
 800137c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001386:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001388:	4e60      	ldr	r6, [pc, #384]	; (800150c <HAL_RCC_OscConfig+0x460>)
 800138a:	6833      	ldr	r3, [r6, #0]
 800138c:	05d8      	lsls	r0, r3, #23
 800138e:	d51b      	bpl.n	80013c8 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001390:	68ab      	ldr	r3, [r5, #8]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d129      	bne.n	80013ea <HAL_RCC_OscConfig+0x33e>
 8001396:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80013a2:	f7ff f91d 	bl	80005e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013aa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80013ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80013b0:	079a      	lsls	r2, r3, #30
 80013b2:	d540      	bpl.n	8001436 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80013b4:	2f00      	cmp	r7, #0
 80013b6:	f43f aeca 	beq.w	800114e <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80013c2:	e6c4      	b.n	800114e <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 80013c4:	2700      	movs	r7, #0
 80013c6:	e7df      	b.n	8001388 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013c8:	6833      	ldr	r3, [r6, #0]
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013d0:	f7ff f906 	bl	80005e0 <HAL_GetTick>
 80013d4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d6:	6833      	ldr	r3, [r6, #0]
 80013d8:	05d9      	lsls	r1, r3, #23
 80013da:	d4d9      	bmi.n	8001390 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013dc:	f7ff f900 	bl	80005e0 <HAL_GetTick>
 80013e0:	eba0 0008 	sub.w	r0, r0, r8
 80013e4:	2802      	cmp	r0, #2
 80013e6:	d9f6      	bls.n	80013d6 <HAL_RCC_OscConfig+0x32a>
 80013e8:	e6ef      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d106      	bne.n	80013fc <HAL_RCC_OscConfig+0x350>
 80013ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80013fa:	e7cc      	b.n	8001396 <HAL_RCC_OscConfig+0x2ea>
 80013fc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001408:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800140c:	f022 0204 	bic.w	r2, r2, #4
 8001410:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1c4      	bne.n	80013a2 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001418:	f7ff f8e2 	bl	80005e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001420:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001422:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001426:	079b      	lsls	r3, r3, #30
 8001428:	d5c4      	bpl.n	80013b4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff f8d9 	bl	80005e0 <HAL_GetTick>
 800142e:	1b80      	subs	r0, r0, r6
 8001430:	4540      	cmp	r0, r8
 8001432:	d9f6      	bls.n	8001422 <HAL_RCC_OscConfig+0x376>
 8001434:	e6c9      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001436:	f7ff f8d3 	bl	80005e0 <HAL_GetTick>
 800143a:	1b80      	subs	r0, r0, r6
 800143c:	4540      	cmp	r0, r8
 800143e:	d9b5      	bls.n	80013ac <HAL_RCC_OscConfig+0x300>
 8001440:	e6c3      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001442:	4c31      	ldr	r4, [pc, #196]	; (8001508 <HAL_RCC_OscConfig+0x45c>)
 8001444:	68a3      	ldr	r3, [r4, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b0c      	cmp	r3, #12
 800144c:	f43f ae3e 	beq.w	80010cc <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8001450:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001452:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001458:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800145a:	d137      	bne.n	80014cc <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 800145c:	f7ff f8c0 	bl	80005e0 <HAL_GetTick>
 8001460:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	019f      	lsls	r7, r3, #6
 8001466:	d42b      	bmi.n	80014c0 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001468:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800146a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800146c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001470:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001472:	3a01      	subs	r2, #1
 8001474:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001478:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800147a:	0912      	lsrs	r2, r2, #4
 800147c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001480:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001482:	0852      	lsrs	r2, r2, #1
 8001484:	3a01      	subs	r2, #1
 8001486:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800148a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800148c:	0852      	lsrs	r2, r2, #1
 800148e:	3a01      	subs	r2, #1
 8001490:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001494:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800149e:	68e3      	ldr	r3, [r4, #12]
 80014a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80014a6:	f7ff f89b 	bl	80005e0 <HAL_GetTick>
 80014aa:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	0198      	lsls	r0, r3, #6
 80014b0:	f53f ae51 	bmi.w	8001156 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff f894 	bl	80005e0 <HAL_GetTick>
 80014b8:	1b40      	subs	r0, r0, r5
 80014ba:	2802      	cmp	r0, #2
 80014bc:	d9f6      	bls.n	80014ac <HAL_RCC_OscConfig+0x400>
 80014be:	e684      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff f88e 	bl	80005e0 <HAL_GetTick>
 80014c4:	1b80      	subs	r0, r0, r6
 80014c6:	2802      	cmp	r0, #2
 80014c8:	d9cb      	bls.n	8001462 <HAL_RCC_OscConfig+0x3b6>
 80014ca:	e67e      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	0119      	lsls	r1, r3, #4
 80014d0:	d406      	bmi.n	80014e0 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80014d2:	6823      	ldr	r3, [r4, #0]
           &&
 80014d4:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014d6:	bf5e      	ittt	pl
 80014d8:	68e3      	ldrpl	r3, [r4, #12]
 80014da:	f023 0303 	bicpl.w	r3, r3, #3
 80014de:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014e0:	68e3      	ldr	r3, [r4, #12]
 80014e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ea:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80014ec:	f7ff f878 	bl	80005e0 <HAL_GetTick>
 80014f0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	019b      	lsls	r3, r3, #6
 80014f6:	f57f ae2e 	bpl.w	8001156 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fa:	f7ff f871 	bl	80005e0 <HAL_GetTick>
 80014fe:	1b40      	subs	r0, r0, r5
 8001500:	2802      	cmp	r0, #2
 8001502:	d9f6      	bls.n	80014f2 <HAL_RCC_OscConfig+0x446>
 8001504:	e661      	b.n	80011ca <HAL_RCC_OscConfig+0x11e>
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001510:	4a56      	ldr	r2, [pc, #344]	; (800166c <HAL_RCC_ClockConfig+0x15c>)
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	428b      	cmp	r3, r1
{
 800151a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800151e:	4605      	mov	r5, r0
 8001520:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001522:	d32b      	bcc.n	800157c <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	07d9      	lsls	r1, r3, #31
 8001528:	d435      	bmi.n	8001596 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800152a:	6829      	ldr	r1, [r5, #0]
 800152c:	078a      	lsls	r2, r1, #30
 800152e:	f100 8083 	bmi.w	8001638 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001532:	4a4e      	ldr	r2, [pc, #312]	; (800166c <HAL_RCC_ClockConfig+0x15c>)
 8001534:	6813      	ldr	r3, [r2, #0]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	429e      	cmp	r6, r3
 800153c:	f0c0 8084 	bcc.w	8001648 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	f011 0f04 	tst.w	r1, #4
 8001544:	4c4a      	ldr	r4, [pc, #296]	; (8001670 <HAL_RCC_ClockConfig+0x160>)
 8001546:	f040 808a 	bne.w	800165e <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154a:	070b      	lsls	r3, r1, #28
 800154c:	d506      	bpl.n	800155c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800154e:	68a3      	ldr	r3, [r4, #8]
 8001550:	692a      	ldr	r2, [r5, #16]
 8001552:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001556:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800155a:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800155c:	f7ff fd3e 	bl	8000fdc <HAL_RCC_GetSysClockFreq>
 8001560:	68a3      	ldr	r3, [r4, #8]
 8001562:	4a44      	ldr	r2, [pc, #272]	; (8001674 <HAL_RCC_ClockConfig+0x164>)
 8001564:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	40d8      	lsrs	r0, r3
 800156c:	4b42      	ldr	r3, [pc, #264]	; (8001678 <HAL_RCC_ClockConfig+0x168>)
 800156e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff f80d 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8001576:	2000      	movs	r0, #0
}
 8001578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157c:	6813      	ldr	r3, [r2, #0]
 800157e:	f023 0307 	bic.w	r3, r3, #7
 8001582:	430b      	orrs	r3, r1
 8001584:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001586:	6813      	ldr	r3, [r2, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	4299      	cmp	r1, r3
 800158e:	d0c9      	beq.n	8001524 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001590:	2001      	movs	r0, #1
 8001592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001596:	686a      	ldr	r2, [r5, #4]
 8001598:	4c35      	ldr	r4, [pc, #212]	; (8001670 <HAL_RCC_ClockConfig+0x160>)
 800159a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800159c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159e:	d11c      	bne.n	80015da <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80015a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80015a4:	d0f4      	beq.n	8001590 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015a6:	68a3      	ldr	r3, [r4, #8]
 80015a8:	f023 0303 	bic.w	r3, r3, #3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80015b0:	f7ff f816 	bl	80005e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b4:	686b      	ldr	r3, [r5, #4]
 80015b6:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 80015b8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ba:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015be:	d118      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c0:	68a3      	ldr	r3, [r4, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d0af      	beq.n	800152a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ca:	f7ff f809 	bl	80005e0 <HAL_GetTick>
 80015ce:	1bc0      	subs	r0, r0, r7
 80015d0:	4540      	cmp	r0, r8
 80015d2:	d9f5      	bls.n	80015c0 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80015d4:	2003      	movs	r0, #3
 80015d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015da:	2a02      	cmp	r2, #2
 80015dc:	d102      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80015de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80015e2:	e7df      	b.n	80015a4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015e4:	b912      	cbnz	r2, 80015ec <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80015e6:	f013 0f02 	tst.w	r3, #2
 80015ea:	e7db      	b.n	80015a4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80015ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80015f0:	e7d8      	b.n	80015a4 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d10a      	bne.n	800160c <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80015f6:	68a3      	ldr	r3, [r4, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d094      	beq.n	800152a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7fe ffee 	bl	80005e0 <HAL_GetTick>
 8001604:	1bc0      	subs	r0, r0, r7
 8001606:	4540      	cmp	r0, r8
 8001608:	d9f5      	bls.n	80015f6 <HAL_RCC_ClockConfig+0xe6>
 800160a:	e7e3      	b.n	80015d4 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800160c:	b973      	cbnz	r3, 800162c <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800160e:	68a3      	ldr	r3, [r4, #8]
 8001610:	f013 0f0c 	tst.w	r3, #12
 8001614:	d089      	beq.n	800152a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001616:	f7fe ffe3 	bl	80005e0 <HAL_GetTick>
 800161a:	1bc0      	subs	r0, r0, r7
 800161c:	4540      	cmp	r0, r8
 800161e:	d9f6      	bls.n	800160e <HAL_RCC_ClockConfig+0xfe>
 8001620:	e7d8      	b.n	80015d4 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001622:	f7fe ffdd 	bl	80005e0 <HAL_GetTick>
 8001626:	1bc0      	subs	r0, r0, r7
 8001628:	4540      	cmp	r0, r8
 800162a:	d8d3      	bhi.n	80015d4 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800162c:	68a3      	ldr	r3, [r4, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b04      	cmp	r3, #4
 8001634:	d1f5      	bne.n	8001622 <HAL_RCC_ClockConfig+0x112>
 8001636:	e778      	b.n	800152a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <HAL_RCC_ClockConfig+0x160>)
 800163a:	68a8      	ldr	r0, [r5, #8]
 800163c:	6893      	ldr	r3, [r2, #8]
 800163e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001642:	4303      	orrs	r3, r0
 8001644:	6093      	str	r3, [r2, #8]
 8001646:	e774      	b.n	8001532 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001648:	6813      	ldr	r3, [r2, #0]
 800164a:	f023 0307 	bic.w	r3, r3, #7
 800164e:	4333      	orrs	r3, r6
 8001650:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001652:	6813      	ldr	r3, [r2, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	429e      	cmp	r6, r3
 800165a:	d199      	bne.n	8001590 <HAL_RCC_ClockConfig+0x80>
 800165c:	e770      	b.n	8001540 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800165e:	68a3      	ldr	r3, [r4, #8]
 8001660:	68ea      	ldr	r2, [r5, #12]
 8001662:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001666:	4313      	orrs	r3, r2
 8001668:	60a3      	str	r3, [r4, #8]
 800166a:	e76e      	b.n	800154a <HAL_RCC_ClockConfig+0x3a>
 800166c:	40022000 	.word	0x40022000
 8001670:	40021000 	.word	0x40021000
 8001674:	08004647 	.word	0x08004647
 8001678:	2000000c 	.word	0x2000000c

0800167c <HAL_RCC_GetHCLKFreq>:
}
 800167c:	4b01      	ldr	r3, [pc, #4]	; (8001684 <HAL_RCC_GetHCLKFreq+0x8>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	2000000c 	.word	0x2000000c

08001688 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <HAL_RCC_GetPCLK1Freq+0x14>)
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001696:	6810      	ldr	r0, [r2, #0]
}
 8001698:	40d8      	lsrs	r0, r3
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000
 80016a0:	08004657 	.word	0x08004657
 80016a4:	2000000c 	.word	0x2000000c

080016a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x14>)
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016b6:	6810      	ldr	r0, [r2, #0]
}
 80016b8:	40d8      	lsrs	r0, r3
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000
 80016c0:	08004657 	.word	0x08004657
 80016c4:	2000000c 	.word	0x2000000c

080016c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80016ca:	4b45      	ldr	r3, [pc, #276]	; (80017e0 <RCCEx_PLLSAI1_Config+0x118>)
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	f012 0f03 	tst.w	r2, #3
{
 80016d2:	4605      	mov	r5, r0
 80016d4:	460e      	mov	r6, r1
 80016d6:	461c      	mov	r4, r3
 80016d8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80016da:	d02a      	beq.n	8001732 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	4282      	cmp	r2, r0
 80016e4:	d13c      	bne.n	8001760 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d03a      	beq.n	8001760 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80016ea:	68db      	ldr	r3, [r3, #12]
       ||
 80016ec:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80016ee:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80016f2:	3301      	adds	r3, #1
       ||
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d133      	bne.n	8001760 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80016fe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001700:	f7fe ff6e 	bl	80005e0 <HAL_GetTick>
 8001704:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	011a      	lsls	r2, r3, #4
 800170a:	d432      	bmi.n	8001772 <RCCEx_PLLSAI1_Config+0xaa>
 800170c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800170e:	2e00      	cmp	r6, #0
 8001710:	d036      	beq.n	8001780 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001712:	2e01      	cmp	r6, #1
 8001714:	d150      	bne.n	80017b8 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001716:	6922      	ldr	r2, [r4, #16]
 8001718:	6928      	ldr	r0, [r5, #16]
 800171a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800171e:	0840      	lsrs	r0, r0, #1
 8001720:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001724:	3801      	subs	r0, #1
 8001726:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800172a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800172e:	6122      	str	r2, [r4, #16]
 8001730:	e032      	b.n	8001798 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001732:	2802      	cmp	r0, #2
 8001734:	d010      	beq.n	8001758 <RCCEx_PLLSAI1_Config+0x90>
 8001736:	2803      	cmp	r0, #3
 8001738:	d014      	beq.n	8001764 <RCCEx_PLLSAI1_Config+0x9c>
 800173a:	2801      	cmp	r0, #1
 800173c:	d110      	bne.n	8001760 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	079f      	lsls	r7, r3, #30
 8001742:	d538      	bpl.n	80017b6 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001744:	68e3      	ldr	r3, [r4, #12]
 8001746:	686a      	ldr	r2, [r5, #4]
 8001748:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800174c:	3a01      	subs	r2, #1
 800174e:	4318      	orrs	r0, r3
 8001750:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001754:	60e0      	str	r0, [r4, #12]
 8001756:	e7cf      	b.n	80016f8 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800175e:	d1f1      	bne.n	8001744 <RCCEx_PLLSAI1_Config+0x7c>
 8001760:	2001      	movs	r0, #1
 8001762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	0391      	lsls	r1, r2, #14
 8001768:	d4ec      	bmi.n	8001744 <RCCEx_PLLSAI1_Config+0x7c>
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001770:	e7f5      	b.n	800175e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001772:	f7fe ff35 	bl	80005e0 <HAL_GetTick>
 8001776:	1bc0      	subs	r0, r0, r7
 8001778:	2802      	cmp	r0, #2
 800177a:	d9c4      	bls.n	8001706 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800177c:	2003      	movs	r0, #3
 800177e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001780:	6921      	ldr	r1, [r4, #16]
 8001782:	68eb      	ldr	r3, [r5, #12]
 8001784:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001788:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800178c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001796:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800179e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7fe ff1e 	bl	80005e0 <HAL_GetTick>
 80017a4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	d513      	bpl.n	80017d4 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80017ac:	6923      	ldr	r3, [r4, #16]
 80017ae:	69aa      	ldr	r2, [r5, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	6123      	str	r3, [r4, #16]
 80017b4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80017b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80017b8:	6923      	ldr	r3, [r4, #16]
 80017ba:	6968      	ldr	r0, [r5, #20]
 80017bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80017c0:	0840      	lsrs	r0, r0, #1
 80017c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80017c6:	3801      	subs	r0, #1
 80017c8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80017cc:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80017d0:	6123      	str	r3, [r4, #16]
 80017d2:	e7e1      	b.n	8001798 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80017d4:	f7fe ff04 	bl	80005e0 <HAL_GetTick>
 80017d8:	1b80      	subs	r0, r0, r6
 80017da:	2802      	cmp	r0, #2
 80017dc:	d9e3      	bls.n	80017a6 <RCCEx_PLLSAI1_Config+0xde>
 80017de:	e7cd      	b.n	800177c <RCCEx_PLLSAI1_Config+0xb4>
 80017e0:	40021000 	.word	0x40021000

080017e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <RCCEx_PLLSAI2_Config+0xf8>)
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	f012 0f03 	tst.w	r2, #3
{
 80017ee:	4605      	mov	r5, r0
 80017f0:	460e      	mov	r6, r1
 80017f2:	461c      	mov	r4, r3
 80017f4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80017f6:	d028      	beq.n	800184a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	4282      	cmp	r2, r0
 8001800:	d13a      	bne.n	8001878 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001802:	2a00      	cmp	r2, #0
 8001804:	d038      	beq.n	8001878 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001806:	68db      	ldr	r3, [r3, #12]
       ||
 8001808:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800180a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800180e:	3301      	adds	r3, #1
       ||
 8001810:	4293      	cmp	r3, r2
 8001812:	d131      	bne.n	8001878 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800181c:	f7fe fee0 	bl	80005e0 <HAL_GetTick>
 8001820:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	009a      	lsls	r2, r3, #2
 8001826:	d430      	bmi.n	800188a <RCCEx_PLLSAI2_Config+0xa6>
 8001828:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800182a:	2e00      	cmp	r6, #0
 800182c:	d034      	beq.n	8001898 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800182e:	6963      	ldr	r3, [r4, #20]
 8001830:	6929      	ldr	r1, [r5, #16]
 8001832:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001836:	0849      	lsrs	r1, r1, #1
 8001838:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800183c:	3901      	subs	r1, #1
 800183e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001842:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001846:	6163      	str	r3, [r4, #20]
 8001848:	e032      	b.n	80018b0 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800184a:	2802      	cmp	r0, #2
 800184c:	d010      	beq.n	8001870 <RCCEx_PLLSAI2_Config+0x8c>
 800184e:	2803      	cmp	r0, #3
 8001850:	d014      	beq.n	800187c <RCCEx_PLLSAI2_Config+0x98>
 8001852:	2801      	cmp	r0, #1
 8001854:	d110      	bne.n	8001878 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	079f      	lsls	r7, r3, #30
 800185a:	d538      	bpl.n	80018ce <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800185c:	68e3      	ldr	r3, [r4, #12]
 800185e:	686a      	ldr	r2, [r5, #4]
 8001860:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001864:	3a01      	subs	r2, #1
 8001866:	4318      	orrs	r0, r3
 8001868:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800186c:	60e0      	str	r0, [r4, #12]
 800186e:	e7d1      	b.n	8001814 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001876:	d1f1      	bne.n	800185c <RCCEx_PLLSAI2_Config+0x78>
 8001878:	2001      	movs	r0, #1
 800187a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	0391      	lsls	r1, r2, #14
 8001880:	d4ec      	bmi.n	800185c <RCCEx_PLLSAI2_Config+0x78>
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001888:	e7f5      	b.n	8001876 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800188a:	f7fe fea9 	bl	80005e0 <HAL_GetTick>
 800188e:	1bc0      	subs	r0, r0, r7
 8001890:	2802      	cmp	r0, #2
 8001892:	d9c6      	bls.n	8001822 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001894:	2003      	movs	r0, #3
 8001896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001898:	6962      	ldr	r2, [r4, #20]
 800189a:	68eb      	ldr	r3, [r5, #12]
 800189c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80018a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80018a4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80018ae:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7fe fe92 	bl	80005e0 <HAL_GetTick>
 80018bc:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	d505      	bpl.n	80018d0 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80018c4:	6963      	ldr	r3, [r4, #20]
 80018c6:	696a      	ldr	r2, [r5, #20]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	6163      	str	r3, [r4, #20]
 80018cc:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80018ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80018d0:	f7fe fe86 	bl	80005e0 <HAL_GetTick>
 80018d4:	1b80      	subs	r0, r0, r6
 80018d6:	2802      	cmp	r0, #2
 80018d8:	d9f1      	bls.n	80018be <RCCEx_PLLSAI2_Config+0xda>
 80018da:	e7db      	b.n	8001894 <RCCEx_PLLSAI2_Config+0xb0>
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80018e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80018e4:	6806      	ldr	r6, [r0, #0]
 80018e6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80018ea:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80018ec:	d024      	beq.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80018ee:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80018f0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80018f4:	d02c      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80018f6:	d802      	bhi.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80018f8:	b1c1      	cbz	r1, 800192c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80018fa:	2601      	movs	r6, #1
 80018fc:	e01c      	b.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80018fe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001902:	d00d      	beq.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001904:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001908:	d1f7      	bne.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800190a:	4a53      	ldr	r2, [pc, #332]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800190c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800190e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001912:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001916:	430b      	orrs	r3, r1
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800191c:	2600      	movs	r6, #0
 800191e:	e00b      	b.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001920:	4a4d      	ldr	r2, [pc, #308]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001922:	68d3      	ldr	r3, [r2, #12]
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	60d3      	str	r3, [r2, #12]
      break;
 800192a:	e7ee      	b.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800192c:	3004      	adds	r0, #4
 800192e:	f7ff fecb 	bl	80016c8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001932:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001934:	2800      	cmp	r0, #0
 8001936:	d0e8      	beq.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	04d8      	lsls	r0, r3, #19
 800193c:	d506      	bpl.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800193e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001940:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001944:	d07c      	beq.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001946:	d808      	bhi.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001948:	b1a9      	cbz	r1, 8001976 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800194a:	2601      	movs	r6, #1
 800194c:	4635      	mov	r5, r6
 800194e:	e021      	b.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001950:	2100      	movs	r1, #0
 8001952:	3020      	adds	r0, #32
 8001954:	f7ff ff46 	bl	80017e4 <RCCEx_PLLSAI2_Config>
 8001958:	e7eb      	b.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800195a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800195e:	d004      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001960:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001964:	d1f1      	bne.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001966:	4635      	mov	r5, r6
 8001968:	e009      	b.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800196a:	4a3b      	ldr	r2, [pc, #236]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800196c:	68d3      	ldr	r3, [r2, #12]
 800196e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001972:	60d3      	str	r3, [r2, #12]
 8001974:	e7f7      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001976:	1d20      	adds	r0, r4, #4
 8001978:	f7ff fea6 	bl	80016c8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800197c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800197e:	2d00      	cmp	r5, #0
 8001980:	d164      	bne.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001982:	4a35      	ldr	r2, [pc, #212]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001984:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001986:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800198a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800198e:	430b      	orrs	r3, r1
 8001990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	0399      	lsls	r1, r3, #14
 8001998:	f140 815b 	bpl.w	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199c:	4f2e      	ldr	r7, [pc, #184]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800199e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019a0:	00da      	lsls	r2, r3, #3
 80019a2:	d455      	bmi.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80019ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019b6:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ba:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001a5c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80019be:	f8d9 3000 	ldr.w	r3, [r9]
 80019c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80019ca:	f7fe fe09 	bl	80005e0 <HAL_GetTick>
 80019ce:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80019d0:	f8d9 3000 	ldr.w	r3, [r9]
 80019d4:	05db      	lsls	r3, r3, #23
 80019d6:	d543      	bpl.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 80019d8:	2d00      	cmp	r5, #0
 80019da:	d148      	bne.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80019dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80019e0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80019e4:	d015      	beq.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80019e6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d011      	beq.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80019ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80019f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80019f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a12:	07d8      	lsls	r0, r3, #31
 8001a14:	d509      	bpl.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 8001a16:	f7fe fde3 	bl	80005e0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001a1e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a24:	0799      	lsls	r1, r3, #30
 8001a26:	f140 810d 	bpl.w	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a2e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a36:	4313      	orrs	r3, r2
 8001a38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a3c:	4635      	mov	r5, r6
 8001a3e:	e016      	b.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001a40:	2100      	movs	r1, #0
 8001a42:	f104 0020 	add.w	r0, r4, #32
 8001a46:	f7ff fecd 	bl	80017e4 <RCCEx_PLLSAI2_Config>
 8001a4a:	e797      	b.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001a4c:	462e      	mov	r6, r5
 8001a4e:	e7a1      	b.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8001a50:	f04f 0800 	mov.w	r8, #0
 8001a54:	e7b1      	b.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a60:	f7fe fdbe 	bl	80005e0 <HAL_GetTick>
 8001a64:	eba0 000a 	sub.w	r0, r0, sl
 8001a68:	2802      	cmp	r0, #2
 8001a6a:	d9b1      	bls.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8001a6c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001a6e:	f1b8 0f00 	cmp.w	r8, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	07da      	lsls	r2, r3, #31
 8001a80:	d508      	bpl.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a82:	498a      	ldr	r1, [pc, #552]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001a84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001a86:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a8a:	f022 0203 	bic.w	r2, r2, #3
 8001a8e:	4302      	orrs	r2, r0
 8001a90:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a94:	079f      	lsls	r7, r3, #30
 8001a96:	d508      	bpl.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a98:	4984      	ldr	r1, [pc, #528]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001a9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001a9c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001aa0:	f022 020c 	bic.w	r2, r2, #12
 8001aa4:	4302      	orrs	r2, r0
 8001aa6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001aaa:	075e      	lsls	r6, r3, #29
 8001aac:	d508      	bpl.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001aae:	497f      	ldr	r1, [pc, #508]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ab0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001ab2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ab6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001aba:	4302      	orrs	r2, r0
 8001abc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ac0:	0718      	lsls	r0, r3, #28
 8001ac2:	d508      	bpl.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ac4:	4979      	ldr	r1, [pc, #484]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ac6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001ac8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001acc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001ad0:	4302      	orrs	r2, r0
 8001ad2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ad6:	06d9      	lsls	r1, r3, #27
 8001ad8:	d508      	bpl.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ada:	4974      	ldr	r1, [pc, #464]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001adc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001ade:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ae2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ae6:	4302      	orrs	r2, r0
 8001ae8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001aec:	069a      	lsls	r2, r3, #26
 8001aee:	d508      	bpl.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001af0:	496e      	ldr	r1, [pc, #440]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001af2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001af4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001af8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001afc:	4302      	orrs	r2, r0
 8001afe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b02:	059f      	lsls	r7, r3, #22
 8001b04:	d508      	bpl.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b06:	4969      	ldr	r1, [pc, #420]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001b08:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001b0a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001b0e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001b12:	4302      	orrs	r2, r0
 8001b14:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b18:	055e      	lsls	r6, r3, #21
 8001b1a:	d508      	bpl.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001b1c:	4963      	ldr	r1, [pc, #396]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001b1e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001b20:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001b24:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001b28:	4302      	orrs	r2, r0
 8001b2a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b2e:	0658      	lsls	r0, r3, #25
 8001b30:	d508      	bpl.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b32:	495e      	ldr	r1, [pc, #376]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001b34:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001b36:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001b3a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001b3e:	4302      	orrs	r2, r0
 8001b40:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b44:	0619      	lsls	r1, r3, #24
 8001b46:	d508      	bpl.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b48:	4958      	ldr	r1, [pc, #352]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001b4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b4c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001b50:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001b54:	4302      	orrs	r2, r0
 8001b56:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b5a:	05da      	lsls	r2, r3, #23
 8001b5c:	d508      	bpl.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b5e:	4953      	ldr	r1, [pc, #332]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b62:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001b66:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001b6a:	4302      	orrs	r2, r0
 8001b6c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b70:	049b      	lsls	r3, r3, #18
 8001b72:	d50f      	bpl.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b74:	4a4d      	ldr	r2, [pc, #308]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001b76:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001b78:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b7c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001b80:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b82:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b8a:	d164      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b8c:	68d3      	ldr	r3, [r2, #12]
 8001b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b92:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	031f      	lsls	r7, r3, #12
 8001b98:	d50f      	bpl.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001b9a:	4a44      	ldr	r2, [pc, #272]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001b9c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001b9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ba2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001ba6:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001ba8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001bb0:	d15c      	bne.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bb2:	68d3      	ldr	r3, [r2, #12]
 8001bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bb8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	035e      	lsls	r6, r3, #13
 8001bbe:	d50f      	bpl.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001bc0:	4a3a      	ldr	r2, [pc, #232]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001bc2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001bc4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001bc8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001bcc:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001bce:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001bd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001bd6:	d154      	bne.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bd8:	68d3      	ldr	r3, [r2, #12]
 8001bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bde:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	0458      	lsls	r0, r3, #17
 8001be4:	d512      	bpl.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001be6:	4931      	ldr	r1, [pc, #196]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001be8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001bea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001bee:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001bf2:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001bf4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001bfc:	d14c      	bne.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001bfe:	2102      	movs	r1, #2
 8001c00:	1d20      	adds	r0, r4, #4
 8001c02:	f7ff fd61 	bl	80016c8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001c06:	2800      	cmp	r0, #0
 8001c08:	bf18      	it	ne
 8001c0a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001c0c:	6822      	ldr	r2, [r4, #0]
 8001c0e:	0411      	lsls	r1, r2, #16
 8001c10:	d508      	bpl.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001c12:	4926      	ldr	r1, [pc, #152]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001c14:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001c16:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001c24:	03d3      	lsls	r3, r2, #15
 8001c26:	d509      	bpl.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001c28:	4a20      	ldr	r2, [pc, #128]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001c2a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001c2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c36:	430b      	orrs	r3, r1
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	b002      	add	sp, #8
 8001c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7fe fccc 	bl	80005e0 <HAL_GetTick>
 8001c48:	1b40      	subs	r0, r0, r5
 8001c4a:	4548      	cmp	r0, r9
 8001c4c:	f67f aee8 	bls.w	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001c50:	e70c      	b.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001c52:	4635      	mov	r5, r6
 8001c54:	e712      	b.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001c56:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001c5a:	d19b      	bne.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	1d20      	adds	r0, r4, #4
 8001c60:	f7ff fd32 	bl	80016c8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001c64:	2800      	cmp	r0, #0
 8001c66:	bf18      	it	ne
 8001c68:	4605      	movne	r5, r0
 8001c6a:	e793      	b.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001c6c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001c70:	d1a3      	bne.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c72:	2101      	movs	r1, #1
 8001c74:	1d20      	adds	r0, r4, #4
 8001c76:	f7ff fd27 	bl	80016c8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	bf18      	it	ne
 8001c7e:	4605      	movne	r5, r0
 8001c80:	e79b      	b.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001c82:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001c86:	d1ab      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x300>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c88:	2101      	movs	r1, #1
 8001c8a:	1d20      	adds	r0, r4, #4
 8001c8c:	f7ff fd1c 	bl	80016c8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001c90:	2800      	cmp	r0, #0
 8001c92:	bf18      	it	ne
 8001c94:	4605      	movne	r5, r0
 8001c96:	e7a3      	b.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001c98:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001c9c:	d1b6      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	f104 0020 	add.w	r0, r4, #32
 8001ca4:	f7ff fd9e 	bl	80017e4 <RCCEx_PLLSAI2_Config>
 8001ca8:	e7ad      	b.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001cb0:	4a02      	ldr	r2, [pc, #8]	; (8001cbc <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4770      	bx	lr
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cc0:	6803      	ldr	r3, [r0, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cca:	6842      	ldr	r2, [r0, #4]
 8001ccc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001cd0:	d10a      	bne.n	8001ce8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8001cd2:	6882      	ldr	r2, [r0, #8]
 8001cd4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cd8:	d002      	beq.n	8001ce0 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cda:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001cde:	d103      	bne.n	8001ce8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ce6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ce8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001cea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001cee:	d107      	bne.n	8001d00 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d06:	2300      	movs	r3, #0
 8001d08:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	4770      	bx	lr

08001d10 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	4605      	mov	r5, r0
 8001d14:	460c      	mov	r4, r1
 8001d16:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d18:	682b      	ldr	r3, [r5, #0]
 8001d1a:	6898      	ldr	r0, [r3, #8]
 8001d1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d20:	d00d      	beq.n	8001d3e <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8001d22:	1c62      	adds	r2, r4, #1
 8001d24:	d0f9      	beq.n	8001d1a <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001d26:	b924      	cbnz	r4, 8001d32 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8001d28:	4628      	mov	r0, r5
}
 8001d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001d2e:	f7ff bfc7 	b.w	8001cc0 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001d32:	f7fe fc55 	bl	80005e0 <HAL_GetTick>
 8001d36:	1b80      	subs	r0, r0, r6
 8001d38:	4284      	cmp	r4, r0
 8001d3a:	d8ed      	bhi.n	8001d18 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8001d3c:	e7f4      	b.n	8001d28 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}

08001d40 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d42:	4606      	mov	r6, r0
 8001d44:	460c      	mov	r4, r1
 8001d46:	4615      	mov	r5, r2
 8001d48:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001d4a:	6831      	ldr	r1, [r6, #0]
 8001d4c:	6888      	ldr	r0, [r1, #8]
 8001d4e:	4020      	ands	r0, r4
 8001d50:	d00e      	beq.n	8001d70 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001d52:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001d56:	bf01      	itttt	eq
 8001d58:	7b0a      	ldrbeq	r2, [r1, #12]
 8001d5a:	b2d2      	uxtbeq	r2, r2
 8001d5c:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8001d60:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8001d64:	1c6b      	adds	r3, r5, #1
 8001d66:	d0f1      	beq.n	8001d4c <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001d68:	b925      	cbnz	r5, 8001d74 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	f7ff ffa8 	bl	8001cc0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001d70:	b003      	add	sp, #12
 8001d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001d74:	f7fe fc34 	bl	80005e0 <HAL_GetTick>
 8001d78:	1bc0      	subs	r0, r0, r7
 8001d7a:	4285      	cmp	r5, r0
 8001d7c:	d8e5      	bhi.n	8001d4a <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8001d7e:	e7f4      	b.n	8001d6a <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08001d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d80:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001d82:	4613      	mov	r3, r2
{
 8001d84:	460d      	mov	r5, r1
 8001d86:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001d88:	460a      	mov	r2, r1
 8001d8a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8001d8e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001d90:	f7ff ffd6 	bl	8001d40 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001d94:	b128      	cbz	r0, 8001da2 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d96:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d98:	f043 0320 	orr.w	r3, r3, #32
 8001d9c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001d9e:	2003      	movs	r0, #3
 8001da0:	e00f      	b.n	8001dc2 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001da2:	4632      	mov	r2, r6
 8001da4:	4629      	mov	r1, r5
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7ff ffb2 	bl	8001d10 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d1f2      	bne.n	8001d96 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001db0:	4633      	mov	r3, r6
 8001db2:	462a      	mov	r2, r5
 8001db4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001db8:	4620      	mov	r0, r4
 8001dba:	f7ff ffc1 	bl	8001d40 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d1e9      	bne.n	8001d96 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}

08001dc4 <SPI_EndRxTransaction>:
{
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dc6:	6843      	ldr	r3, [r0, #4]
 8001dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8001dcc:	4604      	mov	r4, r0
 8001dce:	460e      	mov	r6, r1
 8001dd0:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dd2:	d10b      	bne.n	8001dec <SPI_EndRxTransaction+0x28>
 8001dd4:	6883      	ldr	r3, [r0, #8]
 8001dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dda:	d002      	beq.n	8001de2 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de0:	d104      	bne.n	8001dec <SPI_EndRxTransaction+0x28>
    __HAL_SPI_DISABLE(hspi);
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dea:	601a      	str	r2, [r3, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001dec:	463a      	mov	r2, r7
 8001dee:	4631      	mov	r1, r6
 8001df0:	4620      	mov	r0, r4
 8001df2:	f7ff ff8d 	bl	8001d10 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001df6:	4605      	mov	r5, r0
 8001df8:	b128      	cbz	r0, 8001e06 <SPI_EndRxTransaction+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dfa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001dfc:	f043 0320 	orr.w	r3, r3, #32
 8001e00:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001e02:	2503      	movs	r5, #3
 8001e04:	e013      	b.n	8001e2e <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e06:	6863      	ldr	r3, [r4, #4]
 8001e08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e0c:	d10f      	bne.n	8001e2e <SPI_EndRxTransaction+0x6a>
 8001e0e:	68a3      	ldr	r3, [r4, #8]
 8001e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e14:	d002      	beq.n	8001e1c <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1a:	d108      	bne.n	8001e2e <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4632      	mov	r2, r6
 8001e20:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff ff8b 	bl	8001d40 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001e2a:	2800      	cmp	r0, #0
 8001e2c:	d1e5      	bne.n	8001dfa <SPI_EndRxTransaction+0x36>
}
 8001e2e:	4628      	mov	r0, r5
 8001e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e32 <HAL_SPI_Init>:
{
 8001e32:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8001e34:	4604      	mov	r4, r0
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d04a      	beq.n	8001ed0 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e3e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001e42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e46:	b91b      	cbnz	r3, 8001e50 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001e48:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001e4c:	f001 fd5c 	bl	8003908 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e50:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001e52:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e54:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001e58:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e5a:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e60:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001e64:	600b      	str	r3, [r1, #0]
 8001e66:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e6a:	d92e      	bls.n	8001eca <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e6c:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e6e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e72:	bf18      	it	ne
 8001e74:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001e76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e78:	b92b      	cbnz	r3, 8001e86 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e7a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001e7e:	bf8c      	ite	hi
 8001e80:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001e82:	2301      	movls	r3, #1
 8001e84:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001e86:	68a6      	ldr	r6, [r4, #8]
 8001e88:	6863      	ldr	r3, [r4, #4]
 8001e8a:	69a5      	ldr	r5, [r4, #24]
 8001e8c:	4333      	orrs	r3, r6
 8001e8e:	6926      	ldr	r6, [r4, #16]
 8001e90:	4333      	orrs	r3, r6
 8001e92:	6966      	ldr	r6, [r4, #20]
 8001e94:	4333      	orrs	r3, r6
 8001e96:	69e6      	ldr	r6, [r4, #28]
 8001e98:	4333      	orrs	r3, r6
 8001e9a:	6a26      	ldr	r6, [r4, #32]
 8001e9c:	4333      	orrs	r3, r6
 8001e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ea0:	4333      	orrs	r3, r6
 8001ea2:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001ea6:	4333      	orrs	r3, r6
 8001ea8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eac:	431a      	orrs	r2, r3
 8001eae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001eb0:	0c2d      	lsrs	r5, r5, #16
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	f005 0504 	and.w	r5, r5, #4
 8001eb8:	432a      	orrs	r2, r5
 8001eba:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8001ebc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ebe:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001ec0:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ec2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ec4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001eca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ece:	e7d0      	b.n	8001e72 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001ed0:	2001      	movs	r0, #1
}
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}

08001ed4 <HAL_SPI_DeInit>:
{
 8001ed4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	b180      	cbz	r0, 8001efc <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8001eda:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001ee2:	6813      	ldr	r3, [r2, #0]
 8001ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ee8:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8001eea:	f001 fd33 	bl	8003954 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eee:	2000      	movs	r0, #0
 8001ef0:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 8001ef2:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 8001ef6:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  return HAL_OK;
 8001efa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001efc:	2001      	movs	r0, #1
}
 8001efe:	bd10      	pop	{r4, pc}

08001f00 <HAL_SPI_Transmit>:
{
 8001f00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f04:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001f06:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001f0a:	2b01      	cmp	r3, #1
{
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	460d      	mov	r5, r1
 8001f10:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001f12:	f000 80b1 	beq.w	8002078 <HAL_SPI_Transmit+0x178>
 8001f16:	2301      	movs	r3, #1
 8001f18:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001f1c:	f7fe fb60 	bl	80005e0 <HAL_GetTick>
 8001f20:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001f22:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001f26:	b2c0      	uxtb	r0, r0
 8001f28:	2801      	cmp	r0, #1
 8001f2a:	f040 80a3 	bne.w	8002074 <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8001f2e:	2d00      	cmp	r5, #0
 8001f30:	d057      	beq.n	8001fe2 <HAL_SPI_Transmit+0xe2>
 8001f32:	f1b8 0f00 	cmp.w	r8, #0
 8001f36:	d054      	beq.n	8001fe2 <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f42:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001f44:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8001f48:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001f4c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001f50:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001f52:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f54:	68a3      	ldr	r3, [r4, #8]
 8001f56:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f58:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001f5e:	bf08      	it	eq
 8001f60:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001f62:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8001f66:	bf04      	itt	eq
 8001f68:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001f6c:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f6e:	6803      	ldr	r3, [r0, #0]
 8001f70:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001f72:	bf5e      	ittt	pl
 8001f74:	6803      	ldrpl	r3, [r0, #0]
 8001f76:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001f7a:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f7c:	68e3      	ldr	r3, [r4, #12]
 8001f7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f82:	6863      	ldr	r3, [r4, #4]
 8001f84:	d93e      	bls.n	8002004 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001f86:	b11b      	cbz	r3, 8001f90 <HAL_SPI_Transmit+0x90>
 8001f88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d106      	bne.n	8001f9e <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 8001f90:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001f94:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8001f96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001f9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	b9a3      	cbnz	r3, 8001fce <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fa4:	463a      	mov	r2, r7
 8001fa6:	4631      	mov	r1, r6
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f7ff fee9 	bl	8001d80 <SPI_EndRxTxTransaction>
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	d15d      	bne.n	800206e <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fb2:	68a3      	ldr	r3, [r4, #8]
 8001fb4:	b933      	cbnz	r3, 8001fc4 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	9201      	str	r2, [sp, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fc4:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8001fc6:	3000      	adds	r0, #0
 8001fc8:	bf18      	it	ne
 8001fca:	2001      	movne	r0, #1
 8001fcc:	e009      	b.n	8001fe2 <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	0790      	lsls	r0, r2, #30
 8001fd4:	d503      	bpl.n	8001fde <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001fd6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	e7db      	b.n	8001f96 <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001fde:	b94e      	cbnz	r6, 8001ff4 <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 8001fe0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8001fee:	b002      	add	sp, #8
 8001ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001ff4:	1c71      	adds	r1, r6, #1
 8001ff6:	d0d2      	beq.n	8001f9e <HAL_SPI_Transmit+0x9e>
 8001ff8:	f7fe faf2 	bl	80005e0 <HAL_GetTick>
 8001ffc:	1bc0      	subs	r0, r0, r7
 8001ffe:	4286      	cmp	r6, r0
 8002000:	d8cd      	bhi.n	8001f9e <HAL_SPI_Transmit+0x9e>
 8002002:	e7ed      	b.n	8001fe0 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002004:	b11b      	cbz	r3, 800200e <HAL_SPI_Transmit+0x10e>
 8002006:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d10a      	bne.n	8002024 <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 800200e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d916      	bls.n	8002044 <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 8002016:	f835 3b02 	ldrh.w	r3, [r5], #2
 800201a:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 800201c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800201e:	3b02      	subs	r3, #2
 8002020:	b29b      	uxth	r3, r3
 8002022:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002024:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0bb      	beq.n	8001fa4 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	0792      	lsls	r2, r2, #30
 8002032:	d512      	bpl.n	800205a <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 8002034:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002036:	b292      	uxth	r2, r2
 8002038:	2a01      	cmp	r2, #1
 800203a:	d90b      	bls.n	8002054 <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 800203c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	e7eb      	b.n	800201c <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002044:	782b      	ldrb	r3, [r5, #0]
 8002046:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 8002048:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800204a:	3b01      	subs	r3, #1
 800204c:	b29b      	uxth	r3, r3
 800204e:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002050:	3501      	adds	r5, #1
 8002052:	e7e7      	b.n	8002024 <HAL_SPI_Transmit+0x124>
 8002054:	782a      	ldrb	r2, [r5, #0]
 8002056:	731a      	strb	r2, [r3, #12]
 8002058:	e7f6      	b.n	8002048 <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800205a:	2e00      	cmp	r6, #0
 800205c:	d0c0      	beq.n	8001fe0 <HAL_SPI_Transmit+0xe0>
 800205e:	1c73      	adds	r3, r6, #1
 8002060:	d0e0      	beq.n	8002024 <HAL_SPI_Transmit+0x124>
 8002062:	f7fe fabd 	bl	80005e0 <HAL_GetTick>
 8002066:	1bc0      	subs	r0, r0, r7
 8002068:	4286      	cmp	r6, r0
 800206a:	d8db      	bhi.n	8002024 <HAL_SPI_Transmit+0x124>
 800206c:	e7b8      	b.n	8001fe0 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800206e:	2320      	movs	r3, #32
 8002070:	6623      	str	r3, [r4, #96]	; 0x60
 8002072:	e79e      	b.n	8001fb2 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8002074:	2002      	movs	r0, #2
 8002076:	e7b4      	b.n	8001fe2 <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 8002078:	2002      	movs	r0, #2
 800207a:	e7b8      	b.n	8001fee <HAL_SPI_Transmit+0xee>

0800207c <HAL_SPI_TransmitReceive>:
{
 800207c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002080:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002082:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8002086:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 800208a:	2b01      	cmp	r3, #1
{
 800208c:	4604      	mov	r4, r0
 800208e:	460d      	mov	r5, r1
 8002090:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 8002092:	f000 8112 	beq.w	80022ba <HAL_SPI_TransmitReceive+0x23e>
 8002096:	2301      	movs	r3, #1
 8002098:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800209c:	f7fe faa0 	bl	80005e0 <HAL_GetTick>
  tmp  = hspi->State;
 80020a0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 80020a4:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 80020a6:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 80020a8:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80020aa:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 80020ac:	d00a      	beq.n	80020c4 <HAL_SPI_TransmitReceive+0x48>
 80020ae:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80020b2:	f040 8100 	bne.w	80022b6 <HAL_SPI_TransmitReceive+0x23a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80020b6:	68a2      	ldr	r2, [r4, #8]
 80020b8:	2a00      	cmp	r2, #0
 80020ba:	f040 80fc 	bne.w	80022b6 <HAL_SPI_TransmitReceive+0x23a>
 80020be:	2b04      	cmp	r3, #4
 80020c0:	f040 80f9 	bne.w	80022b6 <HAL_SPI_TransmitReceive+0x23a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020c4:	2d00      	cmp	r5, #0
 80020c6:	d04b      	beq.n	8002160 <HAL_SPI_TransmitReceive+0xe4>
 80020c8:	2e00      	cmp	r6, #0
 80020ca:	d049      	beq.n	8002160 <HAL_SPI_TransmitReceive+0xe4>
 80020cc:	2f00      	cmp	r7, #0
 80020ce:	d047      	beq.n	8002160 <HAL_SPI_TransmitReceive+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020d0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80020d4:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020d6:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020d8:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020da:	bf1c      	itt	ne
 80020dc:	2305      	movne	r3, #5
 80020de:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020e2:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80020e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020e8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80020ea:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80020ec:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80020f0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80020f2:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020f6:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80020f8:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80020fa:	87a7      	strh	r7, [r4, #60]	; 0x3c
 80020fc:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80020fe:	d804      	bhi.n	800210a <HAL_SPI_TransmitReceive+0x8e>
 8002100:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002104:	b292      	uxth	r2, r2
 8002106:	2a01      	cmp	r2, #1
 8002108:	d92c      	bls.n	8002164 <HAL_SPI_TransmitReceive+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002110:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002116:	bf5e      	ittt	pl
 8002118:	681a      	ldrpl	r2, [r3, #0]
 800211a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800211e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002120:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002124:	d956      	bls.n	80021d4 <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002126:	b119      	cbz	r1, 8002130 <HAL_SPI_TransmitReceive+0xb4>
 8002128:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800212a:	b292      	uxth	r2, r2
 800212c:	2a01      	cmp	r2, #1
 800212e:	d106      	bne.n	800213e <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002130:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002134:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002136:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002138:	3b01      	subs	r3, #1
 800213a:	b29b      	uxth	r3, r3
 800213c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800213e:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002140:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002142:	b29b      	uxth	r3, r3
 8002144:	b993      	cbnz	r3, 800216c <HAL_SPI_TransmitReceive+0xf0>
 8002146:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800214a:	b29b      	uxth	r3, r3
 800214c:	b973      	cbnz	r3, 800216c <HAL_SPI_TransmitReceive+0xf0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800214e:	464a      	mov	r2, r9
 8002150:	4641      	mov	r1, r8
 8002152:	4620      	mov	r0, r4
 8002154:	f7ff fe14 	bl	8001d80 <SPI_EndRxTxTransaction>
 8002158:	2800      	cmp	r0, #0
 800215a:	d033      	beq.n	80021c4 <HAL_SPI_TransmitReceive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800215c:	2320      	movs	r3, #32
 800215e:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002160:	2001      	movs	r0, #1
 8002162:	e02f      	b.n	80021c4 <HAL_SPI_TransmitReceive+0x148>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800216a:	e7d1      	b.n	8002110 <HAL_SPI_TransmitReceive+0x94>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800216c:	b177      	cbz	r7, 800218c <HAL_SPI_TransmitReceive+0x110>
 800216e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002170:	b29b      	uxth	r3, r3
 8002172:	b15b      	cbz	r3, 800218c <HAL_SPI_TransmitReceive+0x110>
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	0792      	lsls	r2, r2, #30
 800217a:	d507      	bpl.n	800218c <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800217c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002180:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002182:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002184:	3b01      	subs	r3, #1
 8002186:	b29b      	uxth	r3, r3
 8002188:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800218a:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800218c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002190:	b29b      	uxth	r3, r3
 8002192:	b16b      	cbz	r3, 80021b0 <HAL_SPI_TransmitReceive+0x134>
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	07d0      	lsls	r0, r2, #31
 800219a:	d509      	bpl.n	80021b0 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80021a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80021ae:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80021b0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80021b4:	d0c4      	beq.n	8002140 <HAL_SPI_TransmitReceive+0xc4>
 80021b6:	f7fe fa13 	bl	80005e0 <HAL_GetTick>
 80021ba:	eba0 0009 	sub.w	r0, r0, r9
 80021be:	4580      	cmp	r8, r0
 80021c0:	d8be      	bhi.n	8002140 <HAL_SPI_TransmitReceive+0xc4>
        errorcode = HAL_TIMEOUT;
 80021c2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80021ca:	2300      	movs	r3, #0
 80021cc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80021d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80021d4:	b119      	cbz	r1, 80021de <HAL_SPI_TransmitReceive+0x162>
 80021d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80021d8:	b292      	uxth	r2, r2
 80021da:	2a01      	cmp	r2, #1
 80021dc:	d10a      	bne.n	80021f4 <HAL_SPI_TransmitReceive+0x178>
      if (hspi->TxXferCount > 1U)
 80021de:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80021e0:	b292      	uxth	r2, r2
 80021e2:	2a01      	cmp	r2, #1
 80021e4:	d94d      	bls.n	8002282 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80021e6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80021ea:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80021ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021ee:	3b02      	subs	r3, #2
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80021f4:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b923      	cbnz	r3, 8002206 <HAL_SPI_TransmitReceive+0x18a>
 80021fc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0a3      	beq.n	800214e <HAL_SPI_TransmitReceive+0xd2>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002206:	b197      	cbz	r7, 800222e <HAL_SPI_TransmitReceive+0x1b2>
 8002208:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800220a:	b29b      	uxth	r3, r3
 800220c:	b17b      	cbz	r3, 800222e <HAL_SPI_TransmitReceive+0x1b2>
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	0791      	lsls	r1, r2, #30
 8002214:	d50b      	bpl.n	800222e <HAL_SPI_TransmitReceive+0x1b2>
        if (hspi->TxXferCount > 1U)
 8002216:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002218:	b292      	uxth	r2, r2
 800221a:	2a01      	cmp	r2, #1
 800221c:	d939      	bls.n	8002292 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800221e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002222:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8002224:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002226:	3b02      	subs	r3, #2
 8002228:	b29b      	uxth	r3, r3
 800222a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800222c:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800222e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002232:	b29b      	uxth	r3, r3
 8002234:	b1db      	cbz	r3, 800226e <HAL_SPI_TransmitReceive+0x1f2>
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	07d2      	lsls	r2, r2, #31
 800223c:	d517      	bpl.n	800226e <HAL_SPI_TransmitReceive+0x1f2>
        if (hspi->RxXferCount > 1U)
 800223e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002242:	b292      	uxth	r2, r2
 8002244:	2a01      	cmp	r2, #1
 8002246:	d92c      	bls.n	80022a2 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 800224e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002252:	3a02      	subs	r2, #2
 8002254:	b292      	uxth	r2, r2
 8002256:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800225a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800225e:	b292      	uxth	r2, r2
 8002260:	2a01      	cmp	r2, #1
 8002262:	d803      	bhi.n	800226c <HAL_SPI_TransmitReceive+0x1f0>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800226a:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 800226c:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800226e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002272:	d0c0      	beq.n	80021f6 <HAL_SPI_TransmitReceive+0x17a>
 8002274:	f7fe f9b4 	bl	80005e0 <HAL_GetTick>
 8002278:	eba0 0009 	sub.w	r0, r0, r9
 800227c:	4580      	cmp	r8, r0
 800227e:	d8ba      	bhi.n	80021f6 <HAL_SPI_TransmitReceive+0x17a>
 8002280:	e79f      	b.n	80021c2 <HAL_SPI_TransmitReceive+0x146>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002282:	782a      	ldrb	r2, [r5, #0]
 8002284:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002286:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002288:	3b01      	subs	r3, #1
 800228a:	b29b      	uxth	r3, r3
 800228c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800228e:	3501      	adds	r5, #1
 8002290:	e7b0      	b.n	80021f4 <HAL_SPI_TransmitReceive+0x178>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002292:	782a      	ldrb	r2, [r5, #0]
 8002294:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8002296:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002298:	3b01      	subs	r3, #1
 800229a:	b29b      	uxth	r3, r3
 800229c:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800229e:	3501      	adds	r5, #1
 80022a0:	e7c4      	b.n	800222c <HAL_SPI_TransmitReceive+0x1b0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022a2:	7b1b      	ldrb	r3, [r3, #12]
 80022a4:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 80022a6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022b2:	3601      	adds	r6, #1
 80022b4:	e7da      	b.n	800226c <HAL_SPI_TransmitReceive+0x1f0>
    errorcode = HAL_BUSY;
 80022b6:	2002      	movs	r0, #2
 80022b8:	e784      	b.n	80021c4 <HAL_SPI_TransmitReceive+0x148>
  __HAL_LOCK(hspi);
 80022ba:	2002      	movs	r0, #2
}
 80022bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080022c0 <HAL_SPI_Receive>:
{
 80022c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80022c4:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022c6:	6843      	ldr	r3, [r0, #4]
 80022c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80022cc:	4604      	mov	r4, r0
 80022ce:	460e      	mov	r6, r1
 80022d0:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022d2:	d10c      	bne.n	80022ee <HAL_SPI_Receive+0x2e>
 80022d4:	6883      	ldr	r3, [r0, #8]
 80022d6:	b953      	cbnz	r3, 80022ee <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022d8:	2304      	movs	r3, #4
 80022da:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022de:	4613      	mov	r3, r2
 80022e0:	9500      	str	r5, [sp, #0]
 80022e2:	460a      	mov	r2, r1
 80022e4:	f7ff feca 	bl	800207c <HAL_SPI_TransmitReceive>
}
 80022e8:	b002      	add	sp, #8
 80022ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80022ee:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	f000 808b 	beq.w	800240e <HAL_SPI_Receive+0x14e>
 80022f8:	2301      	movs	r3, #1
 80022fa:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80022fe:	f7fe f96f 	bl	80005e0 <HAL_GetTick>
 8002302:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002304:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8002308:	b2c0      	uxtb	r0, r0
 800230a:	2801      	cmp	r0, #1
 800230c:	d17d      	bne.n	800240a <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 800230e:	2e00      	cmp	r6, #0
 8002310:	d05f      	beq.n	80023d2 <HAL_SPI_Receive+0x112>
 8002312:	f1b8 0f00 	cmp.w	r8, #0
 8002316:	d05c      	beq.n	80023d2 <HAL_SPI_Receive+0x112>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002318:	2304      	movs	r3, #4
 800231a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800231e:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002320:	68e2      	ldr	r2, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002322:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002324:	2300      	movs	r3, #0
 8002326:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8002328:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800232c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800232e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002330:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8002332:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002334:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002336:	684b      	ldr	r3, [r1, #4]
  hspi->RxXferSize  = Size;
 8002338:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800233c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002340:	bf8c      	ite	hi
 8002342:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002346:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 800234a:	604b      	str	r3, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800234c:	68a3      	ldr	r3, [r4, #8]
 800234e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 8002352:	bf02      	ittt	eq
 8002354:	680b      	ldreq	r3, [r1, #0]
 8002356:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 800235a:	600b      	streq	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800235c:	680b      	ldr	r3, [r1, #0]
 800235e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002360:	bf5e      	ittt	pl
 8002362:	680b      	ldrpl	r3, [r1, #0]
 8002364:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002368:	600b      	strpl	r3, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800236a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800236e:	d91e      	bls.n	80023ae <HAL_SPI_Receive+0xee>
    while (hspi->RxXferCount > 0U)
 8002370:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002374:	b29b      	uxth	r3, r3
 8002376:	b1fb      	cbz	r3, 80023b8 <HAL_SPI_Receive+0xf8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	07d2      	lsls	r2, r2, #31
 800237e:	d537      	bpl.n	80023f0 <HAL_SPI_Receive+0x130>
        *((uint16_t *)pData) = hspi->Instance->DR;
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002386:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800238a:	3b01      	subs	r3, #1
 800238c:	b29b      	uxth	r3, r3
 800238e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8002392:	e7ed      	b.n	8002370 <HAL_SPI_Receive+0xb0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	07d0      	lsls	r0, r2, #31
 800239a:	d518      	bpl.n	80023ce <HAL_SPI_Receive+0x10e>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800239c:	7b1b      	ldrb	r3, [r3, #12]
 800239e:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 80023a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 80023ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ed      	bne.n	8002394 <HAL_SPI_Receive+0xd4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023b8:	463a      	mov	r2, r7
 80023ba:	4629      	mov	r1, r5
 80023bc:	4620      	mov	r0, r4
 80023be:	f7ff fd01 	bl	8001dc4 <SPI_EndRxTransaction>
 80023c2:	b9f8      	cbnz	r0, 8002404 <HAL_SPI_Receive+0x144>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023c4:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80023c6:	3000      	adds	r0, #0
 80023c8:	bf18      	it	ne
 80023ca:	2001      	movne	r0, #1
 80023cc:	e001      	b.n	80023d2 <HAL_SPI_Receive+0x112>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80023ce:	b93d      	cbnz	r5, 80023e0 <HAL_SPI_Receive+0x120>
          errorcode = HAL_TIMEOUT;
 80023d0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80023d8:	2300      	movs	r3, #0
 80023da:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 80023de:	e783      	b.n	80022e8 <HAL_SPI_Receive+0x28>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80023e0:	1c69      	adds	r1, r5, #1
 80023e2:	d0e4      	beq.n	80023ae <HAL_SPI_Receive+0xee>
 80023e4:	f7fe f8fc 	bl	80005e0 <HAL_GetTick>
 80023e8:	1bc0      	subs	r0, r0, r7
 80023ea:	4285      	cmp	r5, r0
 80023ec:	d8df      	bhi.n	80023ae <HAL_SPI_Receive+0xee>
 80023ee:	e7ef      	b.n	80023d0 <HAL_SPI_Receive+0x110>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80023f0:	2d00      	cmp	r5, #0
 80023f2:	d0ed      	beq.n	80023d0 <HAL_SPI_Receive+0x110>
 80023f4:	1c6b      	adds	r3, r5, #1
 80023f6:	d0bb      	beq.n	8002370 <HAL_SPI_Receive+0xb0>
 80023f8:	f7fe f8f2 	bl	80005e0 <HAL_GetTick>
 80023fc:	1bc0      	subs	r0, r0, r7
 80023fe:	4285      	cmp	r5, r0
 8002400:	d8b6      	bhi.n	8002370 <HAL_SPI_Receive+0xb0>
 8002402:	e7e5      	b.n	80023d0 <HAL_SPI_Receive+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002404:	2320      	movs	r3, #32
 8002406:	6623      	str	r3, [r4, #96]	; 0x60
 8002408:	e7dc      	b.n	80023c4 <HAL_SPI_Receive+0x104>
    errorcode = HAL_BUSY;
 800240a:	2002      	movs	r0, #2
 800240c:	e7e1      	b.n	80023d2 <HAL_SPI_Receive+0x112>
  __HAL_LOCK(hspi);
 800240e:	2002      	movs	r0, #2
 8002410:	e76a      	b.n	80022e8 <HAL_SPI_Receive+0x28>

08002412 <HAL_SPIEx_FlushRxFifo>:
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8002412:	6802      	ldr	r2, [r0, #0]
{
 8002414:	b082      	sub	sp, #8
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8002416:	2304      	movs	r3, #4
 8002418:	6890      	ldr	r0, [r2, #8]
 800241a:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 800241e:	d101      	bne.n	8002424 <HAL_SPIEx_FlushRxFifo+0x12>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8002420:	b002      	add	sp, #8
 8002422:	4770      	bx	lr
    tmpreg = hspi->Instance->DR;
 8002424:	68d1      	ldr	r1, [r2, #12]
 8002426:	9101      	str	r1, [sp, #4]
 8002428:	3b01      	subs	r3, #1
    if (count == SPI_FIFO_SIZE)
 800242a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    UNUSED(tmpreg); /* To avoid GCC warning */
 800242e:	9901      	ldr	r1, [sp, #4]
    if (count == SPI_FIFO_SIZE)
 8002430:	d1f2      	bne.n	8002418 <HAL_SPIEx_FlushRxFifo+0x6>
      return HAL_TIMEOUT;
 8002432:	2003      	movs	r0, #3
 8002434:	e7f4      	b.n	8002420 <HAL_SPIEx_FlushRxFifo+0xe>
	...

08002438 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8002438:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800243a:	69c1      	ldr	r1, [r0, #28]
{
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002440:	6883      	ldr	r3, [r0, #8]
 8002442:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002444:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002446:	4303      	orrs	r3, r0
 8002448:	6960      	ldr	r0, [r4, #20]
 800244a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800244c:	48ba      	ldr	r0, [pc, #744]	; (8002738 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800244e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002450:	4028      	ands	r0, r5
 8002452:	4303      	orrs	r3, r0
 8002454:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002456:	6853      	ldr	r3, [r2, #4]
 8002458:	68e0      	ldr	r0, [r4, #12]
 800245a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800245e:	4303      	orrs	r3, r0
 8002460:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002462:	4bb6      	ldr	r3, [pc, #728]	; (800273c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002464:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002466:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002468:	bf1c      	itt	ne
 800246a:	6a23      	ldrne	r3, [r4, #32]
 800246c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800246e:	6893      	ldr	r3, [r2, #8]
 8002470:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002474:	4303      	orrs	r3, r0
 8002476:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002478:	4bb1      	ldr	r3, [pc, #708]	; (8002740 <UART_SetConfig+0x308>)
 800247a:	429a      	cmp	r2, r3
 800247c:	d119      	bne.n	80024b2 <UART_SetConfig+0x7a>
 800247e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002482:	4ab0      	ldr	r2, [pc, #704]	; (8002744 <UART_SetConfig+0x30c>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800248c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002490:	5cd3      	ldrb	r3, [r2, r3]
 8002492:	f040 8138 	bne.w	8002706 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8002496:	2b08      	cmp	r3, #8
 8002498:	f200 808f 	bhi.w	80025ba <UART_SetConfig+0x182>
 800249c:	e8df f013 	tbh	[pc, r3, lsl #1]
 80024a0:	00ca011a 	.word	0x00ca011a
 80024a4:	008d00f9 	.word	0x008d00f9
 80024a8:	008d0114 	.word	0x008d0114
 80024ac:	008d008d 	.word	0x008d008d
 80024b0:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024b2:	4ba5      	ldr	r3, [pc, #660]	; (8002748 <UART_SetConfig+0x310>)
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d107      	bne.n	80024c8 <UART_SetConfig+0x90>
 80024b8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80024bc:	4aa3      	ldr	r2, [pc, #652]	; (800274c <UART_SetConfig+0x314>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	e7e1      	b.n	800248c <UART_SetConfig+0x54>
 80024c8:	4ba1      	ldr	r3, [pc, #644]	; (8002750 <UART_SetConfig+0x318>)
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d123      	bne.n	8002516 <UART_SetConfig+0xde>
 80024ce:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024da:	2b10      	cmp	r3, #16
 80024dc:	f000 80f1 	beq.w	80026c2 <UART_SetConfig+0x28a>
 80024e0:	d80b      	bhi.n	80024fa <UART_SetConfig+0xc2>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80f3 	beq.w	80026ce <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024e8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 80024ec:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80024f0:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024f4:	f000 80f8 	beq.w	80026e8 <UART_SetConfig+0x2b0>
 80024f8:	e0a8      	b.n	800264c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	f000 80c6 	beq.w	800268c <UART_SetConfig+0x254>
 8002500:	2b30      	cmp	r3, #48	; 0x30
 8002502:	d1f1      	bne.n	80024e8 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002504:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002508:	f040 80b8 	bne.w	800267c <UART_SetConfig+0x244>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800250c:	6860      	ldr	r0, [r4, #4]
 800250e:	0843      	lsrs	r3, r0, #1
 8002510:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002514:	e0c3      	b.n	800269e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002516:	4b8f      	ldr	r3, [pc, #572]	; (8002754 <UART_SetConfig+0x31c>)
 8002518:	429a      	cmp	r2, r3
 800251a:	d11e      	bne.n	800255a <UART_SetConfig+0x122>
 800251c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	f000 80bb 	beq.w	80026a4 <UART_SetConfig+0x26c>
 800252e:	d80a      	bhi.n	8002546 <UART_SetConfig+0x10e>
 8002530:	b97b      	cbnz	r3, 8002552 <UART_SetConfig+0x11a>
  if(UART_INSTANCE_LOWPOWER(huart))
 8002532:	4b82      	ldr	r3, [pc, #520]	; (800273c <UART_SetConfig+0x304>)
 8002534:	429a      	cmp	r2, r3
 8002536:	f040 80ca 	bne.w	80026ce <UART_SetConfig+0x296>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800253a:	f7ff f8a5 	bl	8001688 <HAL_RCC_GetPCLK1Freq>
      break;
 800253e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002540:	bbb0      	cbnz	r0, 80025b0 <UART_SetConfig+0x178>
 8002542:	4602      	mov	r2, r0
 8002544:	e03a      	b.n	80025bc <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002546:	2b80      	cmp	r3, #128	; 0x80
 8002548:	f000 809d 	beq.w	8002686 <UART_SetConfig+0x24e>
 800254c:	2bc0      	cmp	r3, #192	; 0xc0
 800254e:	f000 80b0 	beq.w	80026b2 <UART_SetConfig+0x27a>
  if(UART_INSTANCE_LOWPOWER(huart))
 8002552:	4b7a      	ldr	r3, [pc, #488]	; (800273c <UART_SetConfig+0x304>)
 8002554:	429a      	cmp	r2, r3
 8002556:	d1c7      	bne.n	80024e8 <UART_SetConfig+0xb0>
 8002558:	e02f      	b.n	80025ba <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800255a:	4b7f      	ldr	r3, [pc, #508]	; (8002758 <UART_SetConfig+0x320>)
 800255c:	429a      	cmp	r2, r3
 800255e:	d111      	bne.n	8002584 <UART_SetConfig+0x14c>
 8002560:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002570:	f000 8098 	beq.w	80026a4 <UART_SetConfig+0x26c>
 8002574:	d9dc      	bls.n	8002530 <UART_SetConfig+0xf8>
 8002576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257a:	f000 8084 	beq.w	8002686 <UART_SetConfig+0x24e>
 800257e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002582:	e7e4      	b.n	800254e <UART_SetConfig+0x116>
 8002584:	4b6d      	ldr	r3, [pc, #436]	; (800273c <UART_SetConfig+0x304>)
 8002586:	429a      	cmp	r2, r3
 8002588:	d1ae      	bne.n	80024e8 <UART_SetConfig+0xb0>
 800258a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259a:	f000 8083 	beq.w	80026a4 <UART_SetConfig+0x26c>
 800259e:	d9c7      	bls.n	8002530 <UART_SetConfig+0xf8>
 80025a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a4:	d06f      	beq.n	8002686 <UART_SetConfig+0x24e>
 80025a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025aa:	e7d0      	b.n	800254e <UART_SetConfig+0x116>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80025ac:	486b      	ldr	r0, [pc, #428]	; (800275c <UART_SetConfig+0x324>)
  if(UART_INSTANCE_LOWPOWER(huart))
 80025ae:	2302      	movs	r3, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 80025b0:	6862      	ldr	r2, [r4, #4]
 80025b2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80025b6:	4281      	cmp	r1, r0
 80025b8:	d905      	bls.n	80025c6 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80025ba:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80025c0:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 80025c2:	4610      	mov	r0, r2
 80025c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 80025c6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80025ca:	d8f6      	bhi.n	80025ba <UART_SetConfig+0x182>
        switch (clocksource)
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d82e      	bhi.n	800262e <UART_SetConfig+0x1f6>
 80025d0:	e8df f003 	tbb	[pc, r3]
 80025d4:	2d1c2d05 	.word	0x2d1c2d05
 80025d8:	2d2d2d24 	.word	0x2d2d2d24
 80025dc:	27          	.byte	0x27
 80025dd:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025de:	f7ff f853 	bl	8001688 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025e2:	6862      	ldr	r2, [r4, #4]
 80025e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025e8:	0856      	lsrs	r6, r2, #1
 80025ea:	2700      	movs	r7, #0
 80025ec:	fbe1 6700 	umlal	r6, r7, r1, r0
 80025f0:	2300      	movs	r3, #0
 80025f2:	4630      	mov	r0, r6
 80025f4:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80025f6:	f7fd fe43 	bl	8000280 <__aeabi_uldivmod>
          break;
 80025fa:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80025fc:	4b58      	ldr	r3, [pc, #352]	; (8002760 <UART_SetConfig+0x328>)
 80025fe:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002602:	4299      	cmp	r1, r3
 8002604:	d8d9      	bhi.n	80025ba <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	60d8      	str	r0, [r3, #12]
 800260a:	e7d7      	b.n	80025bc <UART_SetConfig+0x184>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800260c:	4855      	ldr	r0, [pc, #340]	; (8002764 <UART_SetConfig+0x32c>)
 800260e:	0855      	lsrs	r5, r2, #1
 8002610:	2300      	movs	r3, #0
 8002612:	2100      	movs	r1, #0
 8002614:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002616:	f141 0100 	adc.w	r1, r1, #0
 800261a:	e7ec      	b.n	80025f6 <UART_SetConfig+0x1be>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800261c:	f7fe fcde 	bl	8000fdc <HAL_RCC_GetSysClockFreq>
 8002620:	e7df      	b.n	80025e2 <UART_SetConfig+0x1aa>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002622:	0850      	lsrs	r0, r2, #1
 8002624:	2100      	movs	r1, #0
 8002626:	2300      	movs	r3, #0
 8002628:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800262c:	e7f3      	b.n	8002616 <UART_SetConfig+0x1de>
          ret = HAL_ERROR;
 800262e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002630:	2000      	movs	r0, #0
 8002632:	e7e3      	b.n	80025fc <UART_SetConfig+0x1c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002634:	f7ff f838 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
 8002638:	e04e      	b.n	80026d8 <UART_SetConfig+0x2a0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800263a:	f7ff f825 	bl	8001688 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800263e:	6862      	ldr	r2, [r4, #4]
 8002640:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002644:	fbb3 f3f2 	udiv	r3, r3, r2
 8002648:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800264a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800264c:	f1a3 0010 	sub.w	r0, r3, #16
 8002650:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002654:	4288      	cmp	r0, r1
 8002656:	d8b0      	bhi.n	80025ba <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8002658:	6821      	ldr	r1, [r4, #0]
 800265a:	60cb      	str	r3, [r1, #12]
 800265c:	e7ae      	b.n	80025bc <UART_SetConfig+0x184>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800265e:	f7ff f823 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
 8002662:	e7ec      	b.n	800263e <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002664:	6860      	ldr	r0, [r4, #4]
 8002666:	0843      	lsrs	r3, r0, #1
 8002668:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800266c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002670:	fbb3 f3f0 	udiv	r3, r3, r0
 8002674:	e7e8      	b.n	8002648 <UART_SetConfig+0x210>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002676:	f7fe fcb1 	bl	8000fdc <HAL_RCC_GetSysClockFreq>
 800267a:	e7e0      	b.n	800263e <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800267c:	6860      	ldr	r0, [r4, #4]
 800267e:	0843      	lsrs	r3, r0, #1
 8002680:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002684:	e7f4      	b.n	8002670 <UART_SetConfig+0x238>
  if(UART_INSTANCE_LOWPOWER(huart))
 8002686:	4b2d      	ldr	r3, [pc, #180]	; (800273c <UART_SetConfig+0x304>)
 8002688:	429a      	cmp	r2, r3
 800268a:	d08f      	beq.n	80025ac <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800268c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002690:	d1e8      	bne.n	8002664 <UART_SetConfig+0x22c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002692:	6860      	ldr	r0, [r4, #4]
 8002694:	0843      	lsrs	r3, r0, #1
 8002696:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800269a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800269e:	fbb3 f3f0 	udiv	r3, r3, r0
 80026a2:	e01f      	b.n	80026e4 <UART_SetConfig+0x2ac>
  if(UART_INSTANCE_LOWPOWER(huart))
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <UART_SetConfig+0x304>)
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d10b      	bne.n	80026c2 <UART_SetConfig+0x28a>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80026aa:	f7fe fc97 	bl	8000fdc <HAL_RCC_GetSysClockFreq>
      break;
 80026ae:	2304      	movs	r3, #4
 80026b0:	e746      	b.n	8002540 <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 80026b2:	4b22      	ldr	r3, [pc, #136]	; (800273c <UART_SetConfig+0x304>)
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f47f af25 	bne.w	8002504 <UART_SetConfig+0xcc>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80026ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if(UART_INSTANCE_LOWPOWER(huart))
 80026be:	2308      	movs	r3, #8
 80026c0:	e776      	b.n	80025b0 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026c2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80026c6:	d1d6      	bne.n	8002676 <UART_SetConfig+0x23e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026c8:	f7fe fc88 	bl	8000fdc <HAL_RCC_GetSysClockFreq>
 80026cc:	e004      	b.n	80026d8 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80026d2:	d1b2      	bne.n	800263a <UART_SetConfig+0x202>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026d4:	f7fe ffd8 	bl	8001688 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026d8:	6861      	ldr	r1, [r4, #4]
 80026da:	084a      	lsrs	r2, r1, #1
 80026dc:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80026e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80026e6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026e8:	f1a3 0010 	sub.w	r0, r3, #16
 80026ec:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80026f0:	4288      	cmp	r0, r1
 80026f2:	f63f af62 	bhi.w	80025ba <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 80026f6:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80026fa:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026fc:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002700:	430b      	orrs	r3, r1
 8002702:	60c3      	str	r3, [r0, #12]
 8002704:	e75a      	b.n	80025bc <UART_SetConfig+0x184>
    switch (clocksource)
 8002706:	2b08      	cmp	r3, #8
 8002708:	f63f af57 	bhi.w	80025ba <UART_SetConfig+0x182>
 800270c:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <UART_SetConfig+0x2dc>)
 800270e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002712:	bf00      	nop
 8002714:	0800263b 	.word	0x0800263b
 8002718:	0800265f 	.word	0x0800265f
 800271c:	08002665 	.word	0x08002665
 8002720:	080025bb 	.word	0x080025bb
 8002724:	08002677 	.word	0x08002677
 8002728:	080025bb 	.word	0x080025bb
 800272c:	080025bb 	.word	0x080025bb
 8002730:	080025bb 	.word	0x080025bb
 8002734:	0800267d 	.word	0x0800267d
 8002738:	efff69f3 	.word	0xefff69f3
 800273c:	40008000 	.word	0x40008000
 8002740:	40013800 	.word	0x40013800
 8002744:	080045ec 	.word	0x080045ec
 8002748:	40004400 	.word	0x40004400
 800274c:	080045f0 	.word	0x080045f0
 8002750:	40004800 	.word	0x40004800
 8002754:	40004c00 	.word	0x40004c00
 8002758:	40005000 	.word	0x40005000
 800275c:	00f42400 	.word	0x00f42400
 8002760:	000ffcff 	.word	0x000ffcff
 8002764:	f4240000 	.word	0xf4240000

08002768 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002768:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800276a:	07da      	lsls	r2, r3, #31
{
 800276c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800276e:	d506      	bpl.n	800277e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002770:	6801      	ldr	r1, [r0, #0]
 8002772:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002774:	684a      	ldr	r2, [r1, #4]
 8002776:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800277a:	4322      	orrs	r2, r4
 800277c:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800277e:	079c      	lsls	r4, r3, #30
 8002780:	d506      	bpl.n	8002790 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002782:	6801      	ldr	r1, [r0, #0]
 8002784:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002786:	684a      	ldr	r2, [r1, #4]
 8002788:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800278c:	4322      	orrs	r2, r4
 800278e:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002790:	0759      	lsls	r1, r3, #29
 8002792:	d506      	bpl.n	80027a2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002794:	6801      	ldr	r1, [r0, #0]
 8002796:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002798:	684a      	ldr	r2, [r1, #4]
 800279a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800279e:	4322      	orrs	r2, r4
 80027a0:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027a2:	071a      	lsls	r2, r3, #28
 80027a4:	d506      	bpl.n	80027b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027a6:	6801      	ldr	r1, [r0, #0]
 80027a8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80027aa:	684a      	ldr	r2, [r1, #4]
 80027ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b0:	4322      	orrs	r2, r4
 80027b2:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027b4:	06dc      	lsls	r4, r3, #27
 80027b6:	d506      	bpl.n	80027c6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027b8:	6801      	ldr	r1, [r0, #0]
 80027ba:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80027bc:	688a      	ldr	r2, [r1, #8]
 80027be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027c2:	4322      	orrs	r2, r4
 80027c4:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027c6:	0699      	lsls	r1, r3, #26
 80027c8:	d506      	bpl.n	80027d8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027ca:	6801      	ldr	r1, [r0, #0]
 80027cc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80027ce:	688a      	ldr	r2, [r1, #8]
 80027d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d4:	4322      	orrs	r2, r4
 80027d6:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027d8:	065a      	lsls	r2, r3, #25
 80027da:	d50f      	bpl.n	80027fc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027dc:	6801      	ldr	r1, [r0, #0]
 80027de:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80027e0:	684a      	ldr	r2, [r1, #4]
 80027e2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80027e6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027e8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027ec:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027ee:	d105      	bne.n	80027fc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027f0:	684a      	ldr	r2, [r1, #4]
 80027f2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80027f4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80027f8:	4322      	orrs	r2, r4
 80027fa:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	d506      	bpl.n	800280e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002800:	6802      	ldr	r2, [r0, #0]
 8002802:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002804:	6853      	ldr	r3, [r2, #4]
 8002806:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800280a:	430b      	orrs	r3, r1
 800280c:	6053      	str	r3, [r2, #4]
 800280e:	bd10      	pop	{r4, pc}

08002810 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002814:	9d06      	ldr	r5, [sp, #24]
 8002816:	4604      	mov	r4, r0
 8002818:	460f      	mov	r7, r1
 800281a:	4616      	mov	r6, r2
 800281c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281e:	6821      	ldr	r1, [r4, #0]
 8002820:	69ca      	ldr	r2, [r1, #28]
 8002822:	ea37 0302 	bics.w	r3, r7, r2
 8002826:	bf0c      	ite	eq
 8002828:	2201      	moveq	r2, #1
 800282a:	2200      	movne	r2, #0
 800282c:	42b2      	cmp	r2, r6
 800282e:	d002      	beq.n	8002836 <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002830:	2000      	movs	r0, #0
}
 8002832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002836:	1c6b      	adds	r3, r5, #1
 8002838:	d0f2      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800283a:	b99d      	cbnz	r5, 8002864 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002844:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	f022 0201 	bic.w	r2, r2, #1
 800284c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800284e:	2320      	movs	r3, #32
 8002850:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002854:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002858:	2300      	movs	r3, #0
 800285a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800285e:	2003      	movs	r0, #3
 8002860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002864:	f7fd febc 	bl	80005e0 <HAL_GetTick>
 8002868:	eba0 0008 	sub.w	r0, r0, r8
 800286c:	4285      	cmp	r5, r0
 800286e:	d2d6      	bcs.n	800281e <UART_WaitOnFlagUntilTimeout+0xe>
 8002870:	e7e4      	b.n	800283c <UART_WaitOnFlagUntilTimeout+0x2c>

08002872 <UART_CheckIdleState>:
{
 8002872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002874:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002876:	2600      	movs	r6, #0
 8002878:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800287a:	f7fd feb1 	bl	80005e0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002884:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002886:	d417      	bmi.n	80028b8 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	075b      	lsls	r3, r3, #29
 800288e:	d50a      	bpl.n	80028a6 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2200      	movs	r2, #0
 8002898:	462b      	mov	r3, r5
 800289a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800289e:	4620      	mov	r0, r4
 80028a0:	f7ff ffb6 	bl	8002810 <UART_WaitOnFlagUntilTimeout>
 80028a4:	b9a0      	cbnz	r0, 80028d0 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 80028a6:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80028a8:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80028aa:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 80028ae:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 80028b2:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80028b6:	e00c      	b.n	80028d2 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4632      	mov	r2, r6
 80028c0:	4603      	mov	r3, r0
 80028c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7ff ffa2 	bl	8002810 <UART_WaitOnFlagUntilTimeout>
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d0db      	beq.n	8002888 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80028d0:	2003      	movs	r0, #3
}
 80028d2:	b002      	add	sp, #8
 80028d4:	bd70      	pop	{r4, r5, r6, pc}

080028d6 <HAL_UART_Init>:
{
 80028d6:	b510      	push	{r4, lr}
  if(huart == NULL)
 80028d8:	4604      	mov	r4, r0
 80028da:	b360      	cbz	r0, 8002936 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80028dc:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80028e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028e4:	b91b      	cbnz	r3, 80028ee <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80028e6:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80028ea:	f001 f849 	bl	8003980 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80028ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028f0:	2324      	movs	r3, #36	; 0x24
 80028f2:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80028f6:	6813      	ldr	r3, [r2, #0]
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff fd9a 	bl	8002438 <UART_SetConfig>
 8002904:	2801      	cmp	r0, #1
 8002906:	d016      	beq.n	8002936 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800290a:	b113      	cbz	r3, 8002912 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800290c:	4620      	mov	r0, r4
 800290e:	f7ff ff2b 	bl	8002768 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800291a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002922:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800292a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800292c:	601a      	str	r2, [r3, #0]
}
 800292e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002932:	f7ff bf9e 	b.w	8002872 <UART_CheckIdleState>
}
 8002936:	2001      	movs	r0, #1
 8002938:	bd10      	pop	{r4, pc}

0800293a <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800293a:	b084      	sub	sp, #16
 800293c:	b538      	push	{r3, r4, r5, lr}
 800293e:	ad05      	add	r5, sp, #20
 8002940:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002944:	68c3      	ldr	r3, [r0, #12]
 8002946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 800294a:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800294c:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 800294e:	f000 f8f3 	bl	8002b38 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002956:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8002958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800295c:	2000      	movs	r0, #0
 800295e:	b004      	add	sp, #16
 8002960:	4770      	bx	lr

08002962 <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002962:	6883      	ldr	r3, [r0, #8]
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800296a:	2000      	movs	r0, #0
 800296c:	4770      	bx	lr

0800296e <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 800296e:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002970:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 8002972:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002974:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002978:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 800297a:	d108      	bne.n	800298e <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800297c:	68c3      	ldr	r3, [r0, #12]
 800297e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002982:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8002984:	2032      	movs	r0, #50	; 0x32
 8002986:	f7fd fe31 	bl	80005ec <HAL_Delay>
  
  return HAL_OK;
}
 800298a:	2000      	movs	r0, #0
 800298c:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 800298e:	2900      	cmp	r1, #0
 8002990:	d1f8      	bne.n	8002984 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002992:	68c3      	ldr	r3, [r0, #12]
 8002994:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002998:	60c3      	str	r3, [r0, #12]
 800299a:	e7f3      	b.n	8002984 <USB_SetCurrentMode+0x16>

0800299c <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800299c:	b084      	sub	sp, #16
 800299e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029a2:	4604      	mov	r4, r0
 80029a4:	a809      	add	r0, sp, #36	; 0x24
 80029a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80029aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029ac:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80029ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80029b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b6:	4689      	mov	r9, r1
 80029b8:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 80029ba:	b95f      	cbnz	r7, 80029d4 <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 80029bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029c2:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ca:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d2:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80029d4:	2500      	movs	r5, #0
 80029d6:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80029da:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80029de:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80029e2:	2103      	movs	r1, #3
 80029e4:	4620      	mov	r0, r4
 80029e6:	f000 f893 	bl	8002b10 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80029ea:	2110      	movs	r1, #16
 80029ec:	4620      	mov	r0, r4
 80029ee:	f000 f86d 	bl	8002acc <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80029f2:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 80029f6:	4620      	mov	r0, r4
 80029f8:	f000 f87a 	bl	8002af0 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 8002a00:	6135      	str	r5, [r6, #16]
 8002a02:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 8002a04:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002a06:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8002a0a:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8002a0c:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 8002a0e:	61f5      	str	r5, [r6, #28]
 8002a10:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 8002a14:	454d      	cmp	r5, r9
 8002a16:	d13c      	bne.n	8002a92 <USB_DevInit+0xf6>
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8002a1e:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8002a24:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 8002a28:	4295      	cmp	r5, r2
 8002a2a:	d13e      	bne.n	8002aaa <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002a2c:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 8002a2e:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a36:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8002a38:	d108      	bne.n	8002a4c <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <USB_DevInit+0x128>)
 8002a3c:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002a3e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	f043 0303 	orr.w	r3, r3, #3
 8002a48:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 8002a4a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8002a50:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002a54:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002a56:	f1b8 0f00 	cmp.w	r8, #0
 8002a5a:	d103      	bne.n	8002a64 <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002a5c:	69a3      	ldr	r3, [r4, #24]
 8002a5e:	f043 0310 	orr.w	r3, r3, #16
 8002a62:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002a64:	69a2      	ldr	r2, [r4, #24]
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <USB_DevInit+0x12c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 8002a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002a6e:	b11b      	cbz	r3, 8002a78 <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002a70:	69a3      	ldr	r3, [r4, #24]
 8002a72:	f043 0308 	orr.w	r3, r3, #8
 8002a76:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002a78:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002a7a:	bf01      	itttt	eq
 8002a7c:	69a3      	ldreq	r3, [r4, #24]
 8002a7e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002a82:	f043 0304 	orreq.w	r3, r3, #4
 8002a86:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8002a88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	b004      	add	sp, #16
 8002a90:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a92:	f8d3 e000 	ldr.w	lr, [r3]
 8002a96:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002a9a:	bfb4      	ite	lt
 8002a9c:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 8002a9e:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8002aa0:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 8002aa2:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8002aa4:	6098      	str	r0, [r3, #8]
 8002aa6:	3320      	adds	r3, #32
 8002aa8:	e7b4      	b.n	8002a14 <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002aaa:	f8d3 c000 	ldr.w	ip, [r3]
 8002aae:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002ab2:	bfb4      	ite	lt
 8002ab4:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 8002ab6:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8002ab8:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8002aba:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8002abc:	f8c3 e008 	str.w	lr, [r3, #8]
 8002ac0:	3320      	adds	r3, #32
 8002ac2:	e7b1      	b.n	8002a28 <USB_DevInit+0x8c>
 8002ac4:	00800100 	.word	0x00800100
 8002ac8:	803c3800 	.word	0x803c3800

08002acc <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002acc:	0189      	lsls	r1, r1, #6
 8002ace:	f041 0120 	orr.w	r1, r1, #32
 8002ad2:	4a06      	ldr	r2, [pc, #24]	; (8002aec <USB_FlushTxFifo+0x20>)
 8002ad4:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8002ad6:	3a01      	subs	r2, #1
 8002ad8:	d005      	beq.n	8002ae6 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002ada:	6903      	ldr	r3, [r0, #16]
 8002adc:	f013 0320 	ands.w	r3, r3, #32
 8002ae0:	d1f9      	bne.n	8002ad6 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002ae6:	2003      	movs	r0, #3
}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	00030d41 	.word	0x00030d41

08002af0 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002af0:	2310      	movs	r3, #16
 8002af2:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <USB_FlushRxFifo+0x1c>)
 8002af4:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002af6:	3a01      	subs	r2, #1
 8002af8:	d005      	beq.n	8002b06 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002afa:	6903      	ldr	r3, [r0, #16]
 8002afc:	f013 0310 	ands.w	r3, r3, #16
 8002b00:	d1f9      	bne.n	8002af6 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8002b02:	4618      	mov	r0, r3
 8002b04:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002b06:	2003      	movs	r0, #3
}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	00030d41 	.word	0x00030d41

08002b10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8002b10:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002b14:	4319      	orrs	r1, r3
 8002b16:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	4770      	bx	lr

08002b1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8002b1e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8002b20:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8002b2c:	2003      	movs	r0, #3
 8002b2e:	f7fd fd5d 	bl	80005ec <HAL_Delay>
  
  return HAL_OK;  
}
 8002b32:	2000      	movs	r0, #0
 8002b34:	bd08      	pop	{r3, pc}
	...

08002b38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <USB_CoreReset+0x64>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e01b      	b.n	8002b8e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	daf2      	bge.n	8002b44 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3301      	adds	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <USB_CoreReset+0x64>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e006      	b.n	8002b8e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d0f0      	beq.n	8002b6e <USB_CoreReset+0x36>
  
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	00030d40 	.word	0x00030d40

08002ba0 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt) 
{
 8002ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;
    
    if (*ptr == '-') {                                		/* Check for minus character */
 8002ba2:	7803      	ldrb	r3, [r0, #0]
 8002ba4:	2b2d      	cmp	r3, #45	; 0x2d
        minus = 1;
        ptr++;
 8002ba6:	bf06      	itte	eq
 8002ba8:	3001      	addeq	r0, #1
        minus = 1;
 8002baa:	2501      	moveq	r5, #1
    uint8_t minus = 0, i = 0;
 8002bac:	2500      	movne	r5, #0
 8002bae:	1e43      	subs	r3, r0, #1
 8002bb0:	462a      	mov	r2, r5
 8002bb2:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8002bb4:	270a      	movs	r7, #10
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8002bb6:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8002bba:	3c30      	subs	r4, #48	; 0x30
 8002bbc:	b2e6      	uxtb	r6, r4
 8002bbe:	2e09      	cmp	r6, #9
 8002bc0:	d904      	bls.n	8002bcc <ParseNumber+0x2c>
        ptr++;
        i++;
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8002bc2:	b101      	cbz	r1, 8002bc6 <ParseNumber+0x26>
        *cnt = i;
 8002bc4:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8002bc6:	b105      	cbz	r5, 8002bca <ParseNumber+0x2a>
        return 0 - sum;
 8002bc8:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8002bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        i++;
 8002bcc:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 8002bce:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	e7ef      	b.n	8002bb6 <ParseNumber+0x16>

08002bd6 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr) 
{
 8002bd6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002bda:	4604      	mov	r4, r0
 8002bdc:	460f      	mov	r7, r1
  uint8_t hexnum = 0, hexcnt;
 8002bde:	2500      	movs	r5, #0
  
  while(* ptr) { 
    hexcnt = 1;
 8002be0:	f04f 0801 	mov.w	r8, #1
  while(* ptr) { 
 8002be4:	7823      	ldrb	r3, [r4, #0]
 8002be6:	b913      	cbnz	r3, 8002bee <ParseIP+0x18>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8002be8:	b002      	add	sp, #8
 8002bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*ptr != '.')
 8002bee:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8002bf0:	f88d 8007 	strb.w	r8, [sp, #7]
    if(*ptr != '.')
 8002bf4:	d008      	beq.n	8002c08 <ParseIP+0x32>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8002bf6:	f10d 0107 	add.w	r1, sp, #7
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f7ff ffd0 	bl	8002ba0 <ParseNumber>
 8002c00:	1c6e      	adds	r6, r5, #1
 8002c02:	b2f6      	uxtb	r6, r6
 8002c04:	5578      	strb	r0, [r7, r5]
 8002c06:	4635      	mov	r5, r6
    ptr = ptr + hexcnt;
 8002c08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c0c:	441c      	add	r4, r3
 8002c0e:	e7e9      	b.n	8002be4 <ParseIP+0xe>

08002c10 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	4604      	mov	r4, r0
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8002c14:	4608      	mov	r0, r1
{
 8002c16:	460e      	mov	r6, r1
 8002c18:	4615      	mov	r5, r2
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8002c1a:	f7fd fad9 	bl	80001d0 <strlen>
 8002c1e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8002c22:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 8002c26:	b281      	uxth	r1, r0
 8002c28:	4630      	mov	r0, r6
 8002c2a:	4798      	blx	r3
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	dd14      	ble.n	8002c5a <AT_ExecuteCommand+0x4a>
  {
    int16_t n=Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8002c30:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8002c34:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	4798      	blx	r3
    if(n > 0)
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	dd0b      	ble.n	8002c5a <AT_ExecuteCommand+0x4a>
    {
      *(pdata+n)=0;
 8002c42:	2400      	movs	r4, #0
 8002c44:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8002c46:	4908      	ldr	r1, [pc, #32]	; (8002c68 <AT_ExecuteCommand+0x58>)
 8002c48:	4628      	mov	r0, r5
 8002c4a:	f001 f850 	bl	8003cee <strstr>
 8002c4e:	b930      	cbnz	r0, 8002c5e <AT_ExecuteCommand+0x4e>
      {
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8002c50:	4906      	ldr	r1, [pc, #24]	; (8002c6c <AT_ExecuteCommand+0x5c>)
 8002c52:	4628      	mov	r0, r5
 8002c54:	f001 f84b 	bl	8003cee <strstr>
 8002c58:	b918      	cbnz	r0, 8002c62 <AT_ExecuteCommand+0x52>
      {
        return ES_WIFI_STATUS_ERROR;
      }      
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8002c5a:	2004      	movs	r0, #4
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 8002c5e:	4620      	mov	r0, r4
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_ERROR;
 8002c62:	2002      	movs	r0, #2
}
 8002c64:	bd70      	pop	{r4, r5, r6, pc}
 8002c66:	bf00      	nop
 8002c68:	080045fd 	.word	0x080045fd
 8002c6c:	08004606 	.word	0x08004606

08002c70 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8002c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  
  Obj->Timeout = ES_WIFI_TIMEOUT;
 8002c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c78:	f8c0 3760 	str.w	r3, [r0, #1888]	; 0x760
  
  if (Obj->fops.IO_Init() == 0)
 8002c7c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
{
 8002c80:	4604      	mov	r4, r0
  if (Obj->fops.IO_Init() == 0)
 8002c82:	4798      	blx	r3
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d14b      	bne.n	8002d20 <ES_WIFI_Init+0xb0>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8002c88:	f504 7290 	add.w	r2, r4, #288	; 0x120
 8002c8c:	4925      	ldr	r1, [pc, #148]	; (8002d24 <ES_WIFI_Init+0xb4>)
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f7ff ffbe 	bl	8002c10 <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8002c94:	4605      	mov	r5, r0
 8002c96:	b960      	cbnz	r0, 8002cb2 <ES_WIFI_Init+0x42>
  ptr = strtok((char *)pdata + 2, ",");  
 8002c98:	4923      	ldr	r1, [pc, #140]	; (8002d28 <ES_WIFI_Init+0xb8>)
      ptr = strtok(ptr, "\r"); 
 8002c9a:	4f24      	ldr	r7, [pc, #144]	; (8002d2c <ES_WIFI_Init+0xbc>)
    ptr = strtok(NULL, ","); 
 8002c9c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002d28 <ES_WIFI_Init+0xb8>
  ptr = strtok((char *)pdata + 2, ",");  
 8002ca0:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8002ca4:	f001 f83e 	bl	8003d24 <strtok>
 8002ca8:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8002caa:	f104 0860 	add.w	r8, r4, #96	; 0x60
 8002cae:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8002cb0:	b910      	cbnz	r0, 8002cb8 <ES_WIFI_Init+0x48>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) { 
 8002cb8:	2b06      	cmp	r3, #6
 8002cba:	d824      	bhi.n	8002d06 <ES_WIFI_Init+0x96>
 8002cbc:	e8df f003 	tbb	[pc, r3]
 8002cc0:	140f0a04 	.word	0x140f0a04
 8002cc4:	1e19      	.short	0x1e19
 8002cc6:	29          	.byte	0x29
 8002cc7:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8002cc8:	4601      	mov	r1, r0
 8002cca:	2220      	movs	r2, #32
 8002ccc:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8002cce:	f000 fff9 	bl	8003cc4 <strncpy>
 8002cd2:	e018      	b.n	8002d06 <ES_WIFI_Init+0x96>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8002cd4:	4601      	mov	r1, r0
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	f104 0020 	add.w	r0, r4, #32
 8002cdc:	e7f7      	b.n	8002cce <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);      
 8002cde:	4601      	mov	r1, r0
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002ce6:	e7f2      	b.n	8002cce <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);   
 8002ce8:	4601      	mov	r1, r0
 8002cea:	2210      	movs	r2, #16
 8002cec:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002cf0:	e7ed      	b.n	8002cce <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);        
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002cfa:	e7e8      	b.n	8002cce <ES_WIFI_Init+0x5e>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	f7ff ff4f 	bl	8002ba0 <ParseNumber>
 8002d02:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    ptr = strtok(NULL, ","); 
 8002d06:	4649      	mov	r1, r9
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f001 f80b 	bl	8003d24 <strtok>
 8002d0e:	3601      	adds	r6, #1
 8002d10:	e7cd      	b.n	8002cae <ES_WIFI_Init+0x3e>
      ptr = strtok(ptr, "\r"); 
 8002d12:	4639      	mov	r1, r7
 8002d14:	f001 f806 	bl	8003d24 <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8002d18:	2220      	movs	r2, #32
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	4640      	mov	r0, r8
 8002d1e:	e7d6      	b.n	8002cce <ES_WIFI_Init+0x5e>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002d20:	2502      	movs	r5, #2
 8002d22:	e7c6      	b.n	8002cb2 <ES_WIFI_Init+0x42>
 8002d24:	0800462b 	.word	0x0800462b
 8002d28:	08004630 	.word	0x08004630
 8002d2c:	08004625 	.word	0x08004625

08002d30 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,  
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8002d30:	b530      	push	{r4, r5, lr}
 8002d32:	9d03      	ldr	r5, [sp, #12]
 8002d34:	9c04      	ldr	r4, [sp, #16]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8002d36:	b168      	cbz	r0, 8002d54 <ES_WIFI_RegisterBusIO+0x24>
 8002d38:	b161      	cbz	r1, 8002d54 <ES_WIFI_RegisterBusIO+0x24>
 8002d3a:	b15a      	cbz	r2, 8002d54 <ES_WIFI_RegisterBusIO+0x24>
 8002d3c:	b155      	cbz	r5, 8002d54 <ES_WIFI_RegisterBusIO+0x24>
 8002d3e:	b14c      	cbz	r4, 8002d54 <ES_WIFI_RegisterBusIO+0x24>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 8002d40:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
  Obj->fops.IO_Send = IO_Send;
 8002d44:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
  Obj->fops.IO_Receive = IO_Receive;
 8002d48:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
  Obj->fops.IO_Delay = IO_Delay;  
 8002d4c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
  
  return ES_WIFI_STATUS_OK;
 8002d50:	2000      	movs	r0, #0
 8002d52:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8002d54:	2002      	movs	r0, #2
}
 8002d56:	bd30      	pop	{r4, r5, pc}

08002d58 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID, 
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8002d5a:	f500 7490 	add.w	r4, r0, #288	; 0x120
{
 8002d5e:	4605      	mov	r5, r0
 8002d60:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8002d62:	4620      	mov	r0, r4
 8002d64:	460a      	mov	r2, r1
 8002d66:	4918      	ldr	r1, [pc, #96]	; (8002dc8 <ES_WIFI_Connect+0x70>)
{
 8002d68:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8002d6a:	f000 ff7f 	bl	8003c6c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d6e:	4622      	mov	r2, r4
 8002d70:	4621      	mov	r1, r4
 8002d72:	4628      	mov	r0, r5
 8002d74:	f7ff ff4c 	bl	8002c10 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8002d78:	bb20      	cbnz	r0, 8002dc4 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8002d7a:	463a      	mov	r2, r7
 8002d7c:	4913      	ldr	r1, [pc, #76]	; (8002dcc <ES_WIFI_Connect+0x74>)
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f000 ff74 	bl	8003c6c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d84:	4622      	mov	r2, r4
 8002d86:	4621      	mov	r1, r4
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f7ff ff41 	bl	8002c10 <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8002d8e:	b9c8      	cbnz	r0, 8002dc4 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8002d90:	4632      	mov	r2, r6
 8002d92:	490f      	ldr	r1, [pc, #60]	; (8002dd0 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8002d94:	f885 6084 	strb.w	r6, [r5, #132]	; 0x84
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f000 ff67 	bl	8003c6c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d9e:	4622      	mov	r2, r4
 8002da0:	4621      	mov	r1, r4
 8002da2:	4628      	mov	r0, r5
 8002da4:	f7ff ff34 	bl	8002c10 <AT_ExecuteCommand>
      
      if(ret == ES_WIFI_STATUS_OK)
 8002da8:	b960      	cbnz	r0, 8002dc4 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8002daa:	490a      	ldr	r1, [pc, #40]	; (8002dd4 <ES_WIFI_Connect+0x7c>)
 8002dac:	4620      	mov	r0, r4
 8002dae:	f000 ff81 	bl	8003cb4 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);  
 8002db2:	4622      	mov	r2, r4
 8002db4:	4621      	mov	r1, r4
 8002db6:	4628      	mov	r0, r5
 8002db8:	f7ff ff2a 	bl	8002c10 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8002dbc:	b910      	cbnz	r0, 8002dc4 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f885 30ca 	strb.w	r3, [r5, #202]	; 0xca
        }
      }    
    }
  }
  return ret;
}
 8002dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	0800460e 	.word	0x0800460e
 8002dcc:	08004615 	.word	0x08004615
 8002dd0:	0800461c 	.word	0x0800461c
 8002dd4:	08004623 	.word	0x08004623

08002dd8 <ES_WIFI_GetNetworkSettings>:
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C?\r");
 8002dd8:	f500 7290 	add.w	r2, r0, #288	; 0x120
{
 8002ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8002de0:	4937      	ldr	r1, [pc, #220]	; (8002ec0 <ES_WIFI_GetNetworkSettings+0xe8>)
{
 8002de2:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8002de4:	4610      	mov	r0, r2
 8002de6:	f000 ff65 	bl	8003cb4 <strcpy>
 8002dea:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002dec:	4601      	mov	r1, r0
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7ff ff0e 	bl	8002c10 <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8002df4:	4606      	mov	r6, r0
 8002df6:	b960      	cbnz	r0, 8002e12 <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");   
 8002df8:	4932      	ldr	r1, [pc, #200]	; (8002ec4 <ES_WIFI_GetNetworkSettings+0xec>)
    ptr = strtok(NULL, ",");
 8002dfa:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002ec4 <ES_WIFI_GetNetworkSettings+0xec>
  ptr = strtok(pdata + 2, ",");   
 8002dfe:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8002e02:	f000 ff8f 	bl	8003d24 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002e06:	f104 0785 	add.w	r7, r4, #133	; 0x85
  uint8_t num = 0;
 8002e0a:	46b2      	mov	sl, r6
      ParseIP(ptr, NetSettings->DNS2);
 8002e0c:	f104 08dd 	add.w	r8, r4, #221	; 0xdd
  while (ptr != NULL) {
 8002e10:	b910      	cbnz	r0, 8002e18 <ES_WIFI_GetNetworkSettings+0x40>
  }  
  return ret;
}
 8002e12:	4630      	mov	r0, r6
 8002e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (num++) {      
 8002e18:	f10a 0501 	add.w	r5, sl, #1
 8002e1c:	b2ed      	uxtb	r5, r5
 8002e1e:	f1ba 0f0b 	cmp.w	sl, #11
 8002e22:	d80c      	bhi.n	8002e3e <ES_WIFI_GetNetworkSettings+0x66>
 8002e24:	e8df f00a 	tbb	[pc, sl]
 8002e28:	241e1906 	.word	0x241e1906
 8002e2c:	3835302a 	.word	0x3835302a
 8002e30:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1); 
 8002e34:	4601      	mov	r1, r0
 8002e36:	2221      	movs	r2, #33	; 0x21
 8002e38:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 8002e3a:	f000 ff43 	bl	8003cc4 <strncpy>
    ptr = strtok(NULL, ",");
 8002e3e:	4649      	mov	r1, r9
 8002e40:	2000      	movs	r0, #0
 8002e42:	f000 ff6f 	bl	8003d24 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8002e46:	b130      	cbz	r0, 8002e56 <ES_WIFI_GetNetworkSettings+0x7e>
 8002e48:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8002e4c:	2b2c      	cmp	r3, #44	; 0x2c
      num++;
 8002e4e:	bf04      	itt	eq
 8002e50:	f10a 0502 	addeq.w	r5, sl, #2
 8002e54:	b2ed      	uxtbeq	r5, r5
{
 8002e56:	46aa      	mov	sl, r5
 8002e58:	e7da      	b.n	8002e10 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	2221      	movs	r2, #33	; 0x21
 8002e5e:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
 8002e62:	e7ea      	b.n	8002e3a <ES_WIFI_GetNetworkSettings+0x62>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8002e64:	2100      	movs	r1, #0
 8002e66:	f7ff fe9b 	bl	8002ba0 <ParseNumber>
 8002e6a:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
 8002e6e:	e7e6      	b.n	8002e3e <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8002e70:	2100      	movs	r1, #0
 8002e72:	f7ff fe95 	bl	8002ba0 <ParseNumber>
 8002e76:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
 8002e7a:	e7e0      	b.n	8002e3e <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	f7ff fe8f 	bl	8002ba0 <ParseNumber>
 8002e82:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
 8002e86:	e7da      	b.n	8002e3e <ES_WIFI_GetNetworkSettings+0x66>
      ParseIP(ptr, NetSettings->IP_Addr);
 8002e88:	f104 01cd 	add.w	r1, r4, #205	; 0xcd
      ParseIP(ptr, NetSettings->IP_Mask);
 8002e8c:	f7ff fea3 	bl	8002bd6 <ParseIP>
 8002e90:	e7d5      	b.n	8002e3e <ES_WIFI_GetNetworkSettings+0x66>
 8002e92:	f104 01d1 	add.w	r1, r4, #209	; 0xd1
 8002e96:	e7f9      	b.n	8002e8c <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8002e98:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
 8002e9c:	e7f6      	b.n	8002e8c <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->DNS1);
 8002e9e:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8002ea2:	e7f3      	b.n	8002e8c <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->DNS2);
 8002ea4:	4641      	mov	r1, r8
 8002ea6:	e7f1      	b.n	8002e8c <ES_WIFI_GetNetworkSettings+0xb4>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	f7ff fe79 	bl	8002ba0 <ParseNumber>
 8002eae:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
 8002eb2:	e7c4      	b.n	8002e3e <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	f7ff fe73 	bl	8002ba0 <ParseNumber>
 8002eba:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
 8002ebe:	e7be      	b.n	8002e3e <ES_WIFI_GetNetworkSettings+0x66>
 8002ec0:	08004627 	.word	0x08004627
 8002ec4:	08004630 	.word	0x08004630

08002ec8 <SPI_WIFI_MspInit>:
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002ec8:	4b44      	ldr	r3, [pc, #272]	; (8002fdc <SPI_WIFI_MspInit+0x114>)
{
 8002eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002ece:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8002ed0:	4e43      	ldr	r6, [pc, #268]	; (8002fe0 <SPI_WIFI_MspInit+0x118>)
  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002ed2:	4f44      	ldr	r7, [pc, #272]	; (8002fe4 <SPI_WIFI_MspInit+0x11c>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ed8:	659a      	str	r2, [r3, #88]	; 0x58
 8002eda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8002edc:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002ede:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002ee2:	9201      	str	r2, [sp, #4]
 8002ee4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ee8:	f042 0202 	orr.w	r2, r2, #2
 8002eec:	64da      	str	r2, [r3, #76]	; 0x4c
 8002eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ef0:	f002 0202 	and.w	r2, r2, #2
 8002ef4:	9202      	str	r2, [sp, #8]
 8002ef6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002efa:	f042 0204 	orr.w	r2, r2, #4
 8002efe:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f02:	f002 0204 	and.w	r2, r2, #4
 8002f06:	9203      	str	r2, [sp, #12]
 8002f08:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f0c:	f042 0210 	orr.w	r2, r2, #16
 8002f10:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f14:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8002f18:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f1a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8002f1c:	4630      	mov	r0, r6
 8002f1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f22:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002f24:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f26:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8002f28:	f7fd fe04 	bl	8000b34 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002f30:	a905      	add	r1, sp, #20
 8002f32:	4630      	mov	r0, r6
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002f34:	9305      	str	r3, [sp, #20]
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002f36:	2602      	movs	r6, #2
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f38:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002f3a:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002f3c:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002f3e:	f7fd fc7d 	bl	800083c <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002f42:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <SPI_WIFI_MspInit+0x120>)
 8002f44:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002f46:	a905      	add	r1, sp, #20
 8002f48:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002f4a:	9605      	str	r6, [sp, #20]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002f4c:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002f4e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002f50:	f7fd fc74 	bl	800083c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8002f54:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  GPIO_Init.Alternate = 0;
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002f58:	a905      	add	r1, sp, #20
 8002f5a:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_8;
 8002f5c:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f5e:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002f60:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002f62:	9508      	str	r5, [sp, #32]
  GPIO_Init.Alternate = 0;
 8002f64:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002f66:	f7fd fc69 	bl	800083c <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE, GPIO_PIN_0, GPIO_PIN_SET ); 
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	4638      	mov	r0, r7
 8002f70:	f7fd fde0 	bl	8000b34 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_0;
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002f74:	a905      	add	r1, sp, #20
 8002f76:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_10;
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002f78:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002f7c:	f04f 0806 	mov.w	r8, #6
  GPIO_Init.Pin       = GPIO_PIN_0;
 8002f80:	9405      	str	r4, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f82:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002f84:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002f86:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002f88:	f7fd fc58 	bl	800083c <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_10;
 8002f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002f90:	a905      	add	r1, sp, #20
 8002f92:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_10;
 8002f94:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002f96:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002f98:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002f9a:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002f9c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002fa0:	f7fd fc4c 	bl	800083c <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002fa8:	a905      	add	r1, sp, #20
 8002faa:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002fac:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002fae:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002fb0:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002fb2:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002fb4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002fb8:	f7fd fc40 	bl	800083c <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002fc0:	a905      	add	r1, sp, #20
 8002fc2:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002fc4:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002fc6:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002fc8:	9407      	str	r4, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002fca:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002fcc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002fd0:	f7fd fc34 	bl	800083c <HAL_GPIO_Init>
}
 8002fd4:	b00a      	add	sp, #40	; 0x28
 8002fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	48000400 	.word	0x48000400
 8002fe4:	48001000 	.word	0x48001000
 8002fe8:	10110000 	.word	0x10110000

08002fec <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(void)
{
 8002fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8002fee:	f7fd faf7 	bl	80005e0 <HAL_GetTick>
  uint8_t Prompt[6];
  uint8_t count = 0;
  HAL_StatusTypeDef  Status;
  
  hspi.Instance               = SPI3;
 8002ff2:	4c41      	ldr	r4, [pc, #260]	; (80030f8 <SPI_WIFI_Init+0x10c>)
 8002ff4:	4b41      	ldr	r3, [pc, #260]	; (80030fc <SPI_WIFI_Init+0x110>)
 8002ff6:	6023      	str	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8002ff8:	4606      	mov	r6, r0
  SPI_WIFI_MspInit(&hspi);
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f7ff ff64 	bl	8002ec8 <SPI_WIFI_MspInit>
  
  hspi.Init.Mode              = SPI_MODE_MASTER;
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8003000:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  hspi.Init.Mode              = SPI_MODE_MASTER;
 8003004:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8003008:	60e2      	str	r2, [r4, #12]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
  hspi.Init.NSS               = SPI_NSS_SOFT;
 800300a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi.Init.Mode              = SPI_MODE_MASTER;
 800300e:	6063      	str	r3, [r4, #4]
  hspi.Init.NSS               = SPI_NSS_SOFT;
 8003010:	61a2      	str	r2, [r4, #24]
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8003012:	2300      	movs	r3, #0
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8003014:	2210      	movs	r2, #16
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
  hspi.Init.CRCPolynomial     = 0;
  
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8003016:	4620      	mov	r0, r4
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8003018:	60a3      	str	r3, [r4, #8]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800301a:	6123      	str	r3, [r4, #16]
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800301c:	6163      	str	r3, [r4, #20]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 800301e:	61e2      	str	r2, [r4, #28]
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003020:	6223      	str	r3, [r4, #32]
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8003022:	6263      	str	r3, [r4, #36]	; 0x24
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8003024:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi.Init.CRCPolynomial     = 0;
 8003026:	62e3      	str	r3, [r4, #44]	; 0x2c
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8003028:	f7fe ff03 	bl	8001e32 <HAL_SPI_Init>
 800302c:	4605      	mov	r5, r0
 800302e:	2800      	cmp	r0, #0
 8003030:	d15c      	bne.n	80030ec <SPI_WIFI_Init+0x100>
  {
    return -1;
  }
  
  WIFI_RESET_MODULE();
 8003032:	4602      	mov	r2, r0
 8003034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003038:	4831      	ldr	r0, [pc, #196]	; (8003100 <SPI_WIFI_Init+0x114>)
 800303a:	f7fd fd7b 	bl	8000b34 <HAL_GPIO_WritePin>
 800303e:	200a      	movs	r0, #10
 8003040:	f7fd fad4 	bl	80005ec <HAL_Delay>
 8003044:	2201      	movs	r2, #1
 8003046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800304a:	482d      	ldr	r0, [pc, #180]	; (8003100 <SPI_WIFI_Init+0x114>)
 800304c:	f7fd fd72 	bl	8000b34 <HAL_GPIO_WritePin>
 8003050:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003054:	f7fd faca 	bl	80005ec <HAL_Delay>
  
  WIFI_ENABLE_NSS(); 
 8003058:	4829      	ldr	r0, [pc, #164]	; (8003100 <SPI_WIFI_Init+0x114>)
 800305a:	462a      	mov	r2, r5
 800305c:	2101      	movs	r1, #1
 800305e:	f7fd fd69 	bl	8000b34 <HAL_GPIO_WritePin>
 8003062:	200a      	movs	r0, #10
 8003064:	f7fd fac2 	bl	80005ec <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 8003068:	2102      	movs	r1, #2
 800306a:	4825      	ldr	r0, [pc, #148]	; (8003100 <SPI_WIFI_Init+0x114>)
 800306c:	f7fd fd5c 	bl	8000b28 <HAL_GPIO_ReadPin>
 8003070:	2801      	cmp	r0, #1
 8003072:	4602      	mov	r2, r0
 8003074:	d022      	beq.n	80030bc <SPI_WIFI_Init+0xd0>
      WIFI_DISABLE_NSS(); 
      return -1;
    }    
  }
  
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8003076:	f89d 3000 	ldrb.w	r3, [sp]
 800307a:	2b15      	cmp	r3, #21
 800307c:	d12e      	bne.n	80030dc <SPI_WIFI_Init+0xf0>
 800307e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003082:	2b15      	cmp	r3, #21
 8003084:	d12a      	bne.n	80030dc <SPI_WIFI_Init+0xf0>
 8003086:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800308a:	2b0d      	cmp	r3, #13
 800308c:	d126      	bne.n	80030dc <SPI_WIFI_Init+0xf0>
 800308e:	f89d 4003 	ldrb.w	r4, [sp, #3]
 8003092:	2c0a      	cmp	r4, #10
 8003094:	d122      	bne.n	80030dc <SPI_WIFI_Init+0xf0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8003096:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800309a:	2b3e      	cmp	r3, #62	; 0x3e
 800309c:	d11e      	bne.n	80030dc <SPI_WIFI_Init+0xf0>
 800309e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d11a      	bne.n	80030dc <SPI_WIFI_Init+0xf0>
  {
    WIFI_DISABLE_NSS(); 
    return -1;
  }    
   
  WIFI_DISABLE_NSS(); 
 80030a6:	2201      	movs	r2, #1
 80030a8:	4611      	mov	r1, r2
 80030aa:	4815      	ldr	r0, [pc, #84]	; (8003100 <SPI_WIFI_Init+0x114>)
 80030ac:	f7fd fd42 	bl	8000b34 <HAL_GPIO_WritePin>
 80030b0:	4620      	mov	r0, r4
 80030b2:	f7fd fa9b 	bl	80005ec <HAL_Delay>
  return 0;
 80030b6:	2000      	movs	r0, #0
}
 80030b8:	b003      	add	sp, #12
 80030ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 80030bc:	eb0d 0105 	add.w	r1, sp, r5
 80030c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7ff f8fb 	bl	80022c0 <HAL_SPI_Receive>
 80030ca:	4607      	mov	r7, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80030cc:	f7fd fa88 	bl	80005e0 <HAL_GetTick>
 80030d0:	1b80      	subs	r0, r0, r6
    count += 2;
 80030d2:	3502      	adds	r5, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80030d4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 80030d8:	b2ed      	uxtb	r5, r5
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80030da:	d30a      	bcc.n	80030f2 <SPI_WIFI_Init+0x106>
      WIFI_DISABLE_NSS(); 
 80030dc:	2201      	movs	r2, #1
 80030de:	4808      	ldr	r0, [pc, #32]	; (8003100 <SPI_WIFI_Init+0x114>)
 80030e0:	4611      	mov	r1, r2
 80030e2:	f7fd fd27 	bl	8000b34 <HAL_GPIO_WritePin>
 80030e6:	200a      	movs	r0, #10
 80030e8:	f7fd fa80 	bl	80005ec <HAL_Delay>
    return -1;
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	e7e2      	b.n	80030b8 <SPI_WIFI_Init+0xcc>
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80030f2:	2f00      	cmp	r7, #0
 80030f4:	d0b8      	beq.n	8003068 <SPI_WIFI_Init+0x7c>
 80030f6:	e7f1      	b.n	80030dc <SPI_WIFI_Init+0xf0>
 80030f8:	200000c8 	.word	0x200000c8
 80030fc:	40003c00 	.word	0x40003c00
 8003100:	48001000 	.word	0x48001000

08003104 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8003104:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8003106:	4802      	ldr	r0, [pc, #8]	; (8003110 <SPI_WIFI_DeInit+0xc>)
 8003108:	f7fe fee4 	bl	8001ed4 <HAL_SPI_DeInit>
  return 0;
}
 800310c:	2000      	movs	r0, #0
 800310e:	bd08      	pop	{r3, pc}
 8003110:	200000c8 	.word	0x200000c8

08003114 <SPI_WIFI_ReceiveData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8003114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003118:	468a      	mov	sl, r1
 800311a:	4616      	mov	r6, r2
 800311c:	4680      	mov	r8, r0
  uint32_t tickstart = HAL_GetTick();
 800311e:	f7fd fa5f 	bl	80005e0 <HAL_GetTick>
 8003122:	4681      	mov	r9, r0
  int16_t length = 0;
  uint8_t tmp[2];
  
  HAL_SPIEx_FlushRxFifo(&hspi);
 8003124:	4837      	ldr	r0, [pc, #220]	; (8003204 <SPI_WIFI_ReceiveData+0xf0>)
  
  WIFI_DISABLE_NSS(); 
  
  while (!WIFI_IS_CMDDATA_READY())
 8003126:	4c38      	ldr	r4, [pc, #224]	; (8003208 <SPI_WIFI_ReceiveData+0xf4>)
  HAL_SPIEx_FlushRxFifo(&hspi);
 8003128:	f7ff f973 	bl	8002412 <HAL_SPIEx_FlushRxFifo>
  WIFI_DISABLE_NSS(); 
 800312c:	2201      	movs	r2, #1
 800312e:	4611      	mov	r1, r2
 8003130:	4835      	ldr	r0, [pc, #212]	; (8003208 <SPI_WIFI_ReceiveData+0xf4>)
 8003132:	f7fd fcff 	bl	8000b34 <HAL_GPIO_WritePin>
 8003136:	200a      	movs	r0, #10
 8003138:	f7fd fa58 	bl	80005ec <HAL_Delay>
  while (!WIFI_IS_CMDDATA_READY())
 800313c:	2102      	movs	r1, #2
 800313e:	4620      	mov	r0, r4
 8003140:	f7fd fcf2 	bl	8000b28 <HAL_GPIO_ReadPin>
 8003144:	2801      	cmp	r0, #1
 8003146:	4601      	mov	r1, r0
 8003148:	d141      	bne.n	80031ce <SPI_WIFI_ReceiveData+0xba>
    {
      return -1;
    }
  }
  
  WIFI_ENABLE_NSS(); 
 800314a:	2200      	movs	r2, #0
 800314c:	482e      	ldr	r0, [pc, #184]	; (8003208 <SPI_WIFI_ReceiveData+0xf4>)
  
  while (WIFI_IS_CMDDATA_READY())
 800314e:	4f2e      	ldr	r7, [pc, #184]	; (8003208 <SPI_WIFI_ReceiveData+0xf4>)
  WIFI_ENABLE_NSS(); 
 8003150:	f7fd fcf0 	bl	8000b34 <HAL_GPIO_WritePin>
 8003154:	200a      	movs	r0, #10
 8003156:	f7fd fa49 	bl	80005ec <HAL_Delay>
  while (WIFI_IS_CMDDATA_READY())
 800315a:	4644      	mov	r4, r8
 800315c:	2102      	movs	r1, #2
 800315e:	4638      	mov	r0, r7
 8003160:	f7fd fce2 	bl	8000b28 <HAL_GPIO_ReadPin>
 8003164:	eba4 0508 	sub.w	r5, r4, r8
 8003168:	b2ad      	uxth	r5, r5
 800316a:	2801      	cmp	r0, #1
 800316c:	fa0f fb85 	sxth.w	fp, r5
 8003170:	d121      	bne.n	80031b6 <SPI_WIFI_ReceiveData+0xa2>
  {
    if((length < len) || (!len))
 8003172:	45d3      	cmp	fp, sl
 8003174:	db02      	blt.n	800317c <SPI_WIFI_ReceiveData+0x68>
 8003176:	f1ba 0f00 	cmp.w	sl, #0
 800317a:	d11c      	bne.n	80031b6 <SPI_WIFI_ReceiveData+0xa2>
    {
      HAL_SPI_Receive(&hspi, tmp, 1, timeout) ;	   
 800317c:	4633      	mov	r3, r6
 800317e:	2201      	movs	r2, #1
 8003180:	a901      	add	r1, sp, #4
 8003182:	4820      	ldr	r0, [pc, #128]	; (8003204 <SPI_WIFI_ReceiveData+0xf0>)
 8003184:	f7ff f89c 	bl	80022c0 <HAL_SPI_Receive>
      /* let some time to hardware to change CMDDATA signal */
      if(tmp[1] == 0x15)
 8003188:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800318c:	2b15      	cmp	r3, #21
 800318e:	d102      	bne.n	8003196 <SPI_WIFI_ReceiveData+0x82>
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8003190:	2001      	movs	r0, #1
 8003192:	f7fd fa2b 	bl	80005ec <HAL_Delay>
      if(!WIFI_IS_CMDDATA_READY())
 8003196:	2102      	movs	r1, #2
 8003198:	4638      	mov	r0, r7
 800319a:	f7fd fcc5 	bl	8000b28 <HAL_GPIO_ReadPin>
 800319e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80031a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pData[0] = tmp[0];
 80031a6:	7022      	strb	r2, [r4, #0]
      if(!WIFI_IS_CMDDATA_READY())
 80031a8:	2801      	cmp	r0, #1
 80031aa:	d019      	beq.n	80031e0 <SPI_WIFI_ReceiveData+0xcc>
        if(tmp[1] == 0x15)
 80031ac:	2b15      	cmp	r3, #21
 80031ae:	d117      	bne.n	80031e0 <SPI_WIFI_ReceiveData+0xcc>
          length++;
 80031b0:	3501      	adds	r5, #1
 80031b2:	fa0f fb85 	sxth.w	fp, r5
  WIFI_DISABLE_NSS(); 
 80031b6:	2201      	movs	r2, #1
 80031b8:	4813      	ldr	r0, [pc, #76]	; (8003208 <SPI_WIFI_ReceiveData+0xf4>)
 80031ba:	4611      	mov	r1, r2
 80031bc:	f7fd fcba 	bl	8000b34 <HAL_GPIO_WritePin>
 80031c0:	200a      	movs	r0, #10
 80031c2:	f7fd fa13 	bl	80005ec <HAL_Delay>
}
 80031c6:	4658      	mov	r0, fp
 80031c8:	b003      	add	sp, #12
 80031ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 80031ce:	f7fd fa07 	bl	80005e0 <HAL_GetTick>
 80031d2:	eba0 0009 	sub.w	r0, r0, r9
 80031d6:	42b0      	cmp	r0, r6
 80031d8:	d9b0      	bls.n	800313c <SPI_WIFI_ReceiveData+0x28>
      return -1;
 80031da:	f04f 3bff 	mov.w	fp, #4294967295
 80031de:	e7f2      	b.n	80031c6 <SPI_WIFI_ReceiveData+0xb2>
      pData[1] = tmp[1];
 80031e0:	7063      	strb	r3, [r4, #1]
      if((HAL_GetTick() - tickstart ) > timeout)
 80031e2:	f7fd f9fd 	bl	80005e0 <HAL_GetTick>
 80031e6:	eba0 0009 	sub.w	r0, r0, r9
 80031ea:	4286      	cmp	r6, r0
      pData  += 2;
 80031ec:	f104 0402 	add.w	r4, r4, #2
      if((HAL_GetTick() - tickstart ) > timeout)
 80031f0:	d2b4      	bcs.n	800315c <SPI_WIFI_ReceiveData+0x48>
        WIFI_DISABLE_NSS(); 
 80031f2:	2201      	movs	r2, #1
 80031f4:	4611      	mov	r1, r2
 80031f6:	4804      	ldr	r0, [pc, #16]	; (8003208 <SPI_WIFI_ReceiveData+0xf4>)
 80031f8:	f7fd fc9c 	bl	8000b34 <HAL_GPIO_WritePin>
 80031fc:	200a      	movs	r0, #10
 80031fe:	f7fd f9f5 	bl	80005ec <HAL_Delay>
 8003202:	e7ea      	b.n	80031da <SPI_WIFI_ReceiveData+0xc6>
 8003204:	200000c8 	.word	0x200000c8
 8003208:	48001000 	.word	0x48001000

0800320c <SPI_WIFI_SendData>:
{
 800320c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003210:	4605      	mov	r5, r0
 8003212:	460c      	mov	r4, r1
 8003214:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8003216:	f7fd f9e3 	bl	80005e0 <HAL_GetTick>
  while (!WIFI_IS_CMDDATA_READY())
 800321a:	4f1f      	ldr	r7, [pc, #124]	; (8003298 <SPI_WIFI_SendData+0x8c>)
  uint32_t tickstart = HAL_GetTick();
 800321c:	4680      	mov	r8, r0
  while (!WIFI_IS_CMDDATA_READY())
 800321e:	2102      	movs	r1, #2
 8003220:	4638      	mov	r0, r7
 8003222:	f7fd fc81 	bl	8000b28 <HAL_GPIO_ReadPin>
 8003226:	2801      	cmp	r0, #1
 8003228:	4601      	mov	r1, r0
 800322a:	d122      	bne.n	8003272 <SPI_WIFI_SendData+0x66>
  WIFI_ENABLE_NSS(); 
 800322c:	2200      	movs	r2, #0
 800322e:	481a      	ldr	r0, [pc, #104]	; (8003298 <SPI_WIFI_SendData+0x8c>)
 8003230:	f7fd fc80 	bl	8000b34 <HAL_GPIO_WritePin>
 8003234:	200a      	movs	r0, #10
 8003236:	f7fd f9d9 	bl	80005ec <HAL_Delay>
  if (len > 1)
 800323a:	2c01      	cmp	r4, #1
 800323c:	d906      	bls.n	800324c <SPI_WIFI_SendData+0x40>
   if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, timeout) != HAL_OK)
 800323e:	4633      	mov	r3, r6
 8003240:	0862      	lsrs	r2, r4, #1
 8003242:	4629      	mov	r1, r5
 8003244:	4815      	ldr	r0, [pc, #84]	; (800329c <SPI_WIFI_SendData+0x90>)
 8003246:	f7fe fe5b 	bl	8001f00 <HAL_SPI_Transmit>
 800324a:	b9c0      	cbnz	r0, 800327e <SPI_WIFI_SendData+0x72>
  if ( len & 1)
 800324c:	07e3      	lsls	r3, r4, #31
 800324e:	d50e      	bpl.n	800326e <SPI_WIFI_SendData+0x62>
    Padding[0] = pdata[len-1];
 8003250:	4425      	add	r5, r4
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 8003252:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 8003254:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003258:	f88d 3004 	strb.w	r3, [sp, #4]
    Padding[1] = '\n';
 800325c:	230a      	movs	r3, #10
 800325e:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 8003262:	a901      	add	r1, sp, #4
 8003264:	4633      	mov	r3, r6
 8003266:	480d      	ldr	r0, [pc, #52]	; (800329c <SPI_WIFI_SendData+0x90>)
 8003268:	f7fe fe4a 	bl	8001f00 <HAL_SPI_Transmit>
 800326c:	b938      	cbnz	r0, 800327e <SPI_WIFI_SendData+0x72>
  return len;
 800326e:	b220      	sxth	r0, r4
 8003270:	e00f      	b.n	8003292 <SPI_WIFI_SendData+0x86>
    if((HAL_GetTick() - tickstart ) > timeout)
 8003272:	f7fd f9b5 	bl	80005e0 <HAL_GetTick>
 8003276:	eba0 0008 	sub.w	r0, r0, r8
 800327a:	42b0      	cmp	r0, r6
 800327c:	d9cf      	bls.n	800321e <SPI_WIFI_SendData+0x12>
      WIFI_DISABLE_NSS();       
 800327e:	2201      	movs	r2, #1
 8003280:	4611      	mov	r1, r2
 8003282:	4805      	ldr	r0, [pc, #20]	; (8003298 <SPI_WIFI_SendData+0x8c>)
 8003284:	f7fd fc56 	bl	8000b34 <HAL_GPIO_WritePin>
 8003288:	200a      	movs	r0, #10
 800328a:	f7fd f9af 	bl	80005ec <HAL_Delay>
      return -1;
 800328e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003292:	b002      	add	sp, #8
 8003294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003298:	48001000 	.word	0x48001000
 800329c:	200000c8 	.word	0x200000c8

080032a0 <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 80032a0:	f7fd b9a4 	b.w	80005ec <HAL_Delay>

080032a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032a4:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80032a6:	4a30      	ldr	r2, [pc, #192]	; (8003368 <SystemClock_Config+0xc4>)
 80032a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
{
 80032ac:	b0b8      	sub	sp, #224	; 0xe0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80032ae:	f023 0318 	bic.w	r3, r3, #24
 80032b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80032b6:	2314      	movs	r3, #20
 80032b8:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80032be:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80032c0:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032c2:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80032c4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80032c6:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 80032c8:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ca:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80032cc:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80032ce:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032d0:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80032d2:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80032d4:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80032d6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80032d8:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80032da:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80032dc:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032de:	f7fd fee5 	bl	80010ac <HAL_RCC_OscConfig>
 80032e2:	b100      	cbz	r0, 80032e6 <SystemClock_Config+0x42>
 80032e4:	e7fe      	b.n	80032e4 <SystemClock_Config+0x40>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032e6:	220f      	movs	r2, #15
 80032e8:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032ea:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032ec:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ee:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80032f0:	2104      	movs	r1, #4
 80032f2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f4:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80032f8:	f7fe f90a 	bl	8001510 <HAL_RCC_ClockConfig>
 80032fc:	b100      	cbz	r0, 8003300 <SystemClock_Config+0x5c>
 80032fe:	e7fe      	b.n	80032fe <SystemClock_Config+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <SystemClock_Config+0xc8>)
 8003302:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003304:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003308:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800330a:	2318      	movs	r3, #24
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800330c:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800330e:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003310:	902b      	str	r0, [sp, #172]	; 0xac
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003312:	9036      	str	r0, [sp, #216]	; 0xd8
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003314:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003316:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003318:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800331c:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800331e:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003320:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003322:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003324:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003326:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003328:	f7fe fada 	bl	80018e0 <HAL_RCCEx_PeriphCLKConfig>
 800332c:	b100      	cbz	r0, 8003330 <SystemClock_Config+0x8c>
 800332e:	e7fe      	b.n	800332e <SystemClock_Config+0x8a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003330:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003334:	f7fd fd56 	bl	8000de4 <HAL_PWREx_ControlVoltageScaling>
 8003338:	4604      	mov	r4, r0
 800333a:	b100      	cbz	r0, 800333e <SystemClock_Config+0x9a>
 800333c:	e7fe      	b.n	800333c <SystemClock_Config+0x98>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800333e:	f7fe f99d 	bl	800167c <HAL_RCC_GetHCLKFreq>
 8003342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003346:	fbb0 f0f3 	udiv	r0, r0, r3
 800334a:	f7fd f9af 	bl	80006ac <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800334e:	2004      	movs	r0, #4
 8003350:	f7fd f9c2 	bl	80006d8 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration 
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8003354:	f7fe fcac 	bl	8001cb0 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003358:	4622      	mov	r2, r4
 800335a:	4621      	mov	r1, r4
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	f7fd f964 	bl	800062c <HAL_NVIC_SetPriority>
}
 8003364:	b038      	add	sp, #224	; 0xe0
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	00012085 	.word	0x00012085

08003370 <main>:
{
 8003370:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003374:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8003376:	f7fd f91f 	bl	80005b8 <HAL_Init>
  SystemClock_Config();
 800337a:	f7ff ff93 	bl	80032a4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800337e:	4bb2      	ldr	r3, [pc, #712]	; (8003648 <main+0x2d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8003380:	48b2      	ldr	r0, [pc, #712]	; (800364c <main+0x2dc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003384:	4fb2      	ldr	r7, [pc, #712]	; (8003650 <main+0x2e0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003386:	f042 0210 	orr.w	r2, r2, #16
 800338a:	64da      	str	r2, [r3, #76]	; 0x4c
 800338c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800338e:	f002 0210 	and.w	r2, r2, #16
 8003392:	9200      	str	r2, [sp, #0]
 8003394:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003398:	f042 0204 	orr.w	r2, r2, #4
 800339c:	64da      	str	r2, [r3, #76]	; 0x4c
 800339e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033a0:	f002 0204 	and.w	r2, r2, #4
 80033a4:	9201      	str	r2, [sp, #4]
 80033a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80033b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b2:	f002 0201 	and.w	r2, r2, #1
 80033b6:	9202      	str	r2, [sp, #8]
 80033b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033bc:	f042 0202 	orr.w	r2, r2, #2
 80033c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80033c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033c4:	f002 0202 	and.w	r2, r2, #2
 80033c8:	9203      	str	r2, [sp, #12]
 80033ca:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033ce:	f042 0208 	orr.w	r2, r2, #8
 80033d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80033dc:	2200      	movs	r2, #0
 80033de:	f240 1115 	movw	r1, #277	; 0x115
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033e2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80033e4:	f7fd fba6 	bl	8000b34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80033e8:	2200      	movs	r2, #0
 80033ea:	f248 1104 	movw	r1, #33028	; 0x8104
 80033ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f2:	f7fd fb9f 	bl	8000b34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80033f6:	2200      	movs	r2, #0
 80033f8:	f24f 0134 	movw	r1, #61492	; 0xf034
 80033fc:	4895      	ldr	r0, [pc, #596]	; (8003654 <main+0x2e4>)
 80033fe:	f7fd fb99 	bl	8000b34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8003402:	2200      	movs	r2, #0
 8003404:	f243 0181 	movw	r1, #12417	; 0x3081
 8003408:	4893      	ldr	r0, [pc, #588]	; (8003658 <main+0x2e8>)
 800340a:	f7fd fb93 	bl	8000b34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800340e:	2200      	movs	r2, #0
 8003410:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003414:	4891      	ldr	r0, [pc, #580]	; (800365c <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8003418:	f7fd fb8c 	bl	8000b34 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800341e:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003422:	a905      	add	r1, sp, #20
 8003424:	4889      	ldr	r0, [pc, #548]	; (800364c <main+0x2dc>)
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8003426:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003428:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800342e:	f7fd fa05 	bl	800083c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8003432:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003434:	a905      	add	r1, sp, #20
 8003436:	4885      	ldr	r0, [pc, #532]	; (800364c <main+0x2dc>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8003438:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800343a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800343e:	f7fd f9fd 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8003442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003446:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003448:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800344a:	4b85      	ldr	r3, [pc, #532]	; (8003660 <main+0x2f0>)
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800344c:	4883      	ldr	r0, [pc, #524]	; (800365c <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800344e:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003450:	f04f 080b 	mov.w	r8, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003456:	f7fd f9f1 	bl	800083c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 800345a:	233f      	movs	r3, #63	; 0x3f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800345c:	a905      	add	r1, sp, #20
 800345e:	487f      	ldr	r0, [pc, #508]	; (800365c <main+0x2ec>)
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8003460:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003466:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800346a:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800346e:	2608      	movs	r6, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003472:	f7fd f9e3 	bl	800083c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003476:	a905      	add	r1, sp, #20
 8003478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800347c:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003480:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800348a:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348c:	f7fd f9d6 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8003490:	f248 1304 	movw	r3, #33028	; 0x8104
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	a905      	add	r1, sp, #20
 8003496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800349a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a2:	f7fd f9cb 	bl	800083c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80034a6:	a905      	add	r1, sp, #20
 80034a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80034ac:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ae:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034b6:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80034b8:	f7fd f9c0 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80034bc:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80034be:	a905      	add	r1, sp, #20
 80034c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80034c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80034c6:	f8cd 8018 	str.w	r8, [sp, #24]
  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034ca:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80034d0:	f7fd f9b4 	bl	800083c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80034d4:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d6:	a905      	add	r1, sp, #20
 80034d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80034dc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034de:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034e8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ec:	f7fd f9a6 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80034f0:	a905      	add	r1, sp, #20
 80034f2:	4858      	ldr	r0, [pc, #352]	; (8003654 <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034f4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80034f6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80034fa:	f7fd f99f 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80034fe:	a905      	add	r1, sp, #20
 8003500:	4854      	ldr	r0, [pc, #336]	; (8003654 <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003502:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003506:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800350c:	f7fd f996 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8003510:	f24f 0334 	movw	r3, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003514:	a905      	add	r1, sp, #20
 8003516:	484f      	ldr	r0, [pc, #316]	; (8003654 <main+0x2e4>)
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8003518:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800351a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003520:	f7fd f98c 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8003524:	f64c 4304 	movw	r3, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003528:	a905      	add	r1, sp, #20
 800352a:	484b      	ldr	r0, [pc, #300]	; (8003658 <main+0x2e8>)
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 800352c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800352e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003532:	f7fd f983 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8003536:	f243 0381 	movw	r3, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800353a:	a905      	add	r1, sp, #20
 800353c:	4846      	ldr	r0, [pc, #280]	; (8003658 <main+0x2e8>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800353e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003540:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003544:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003546:	f7fd f979 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800354a:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354e:	a905      	add	r1, sp, #20
 8003550:	4842      	ldr	r0, [pc, #264]	; (800365c <main+0x2ec>)
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8003552:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003554:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003558:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355a:	f7fd f96f 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800355e:	f44f 73c0 	mov.w	r3, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003562:	a905      	add	r1, sp, #20
 8003564:	483d      	ldr	r0, [pc, #244]	; (800365c <main+0x2ec>)
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8003566:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003568:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356c:	f7fd f966 	bl	800083c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003570:	a905      	add	r1, sp, #20
 8003572:	4839      	ldr	r0, [pc, #228]	; (8003658 <main+0x2e8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003574:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8003578:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003582:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003586:	2707      	movs	r7, #7
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003588:	f7fd f958 	bl	800083c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800358c:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800358e:	a905      	add	r1, sp, #20
 8003590:	4831      	ldr	r0, [pc, #196]	; (8003658 <main+0x2e8>)
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003592:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003594:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800359e:	9709      	str	r7, [sp, #36]	; 0x24

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80035a0:	f44f 7840 	mov.w	r8, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035a4:	f7fd f94a 	bl	800083c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035a8:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035aa:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ae:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035b0:	f04f 0a04 	mov.w	sl, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b4:	4827      	ldr	r0, [pc, #156]	; (8003654 <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035b6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80035b8:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035bc:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035be:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c2:	f7fd f93b 	bl	800083c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80035c6:	4622      	mov	r2, r4
 80035c8:	4621      	mov	r1, r4
 80035ca:	2017      	movs	r0, #23
 80035cc:	f7fd f82e 	bl	800062c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80035d0:	2017      	movs	r0, #23
 80035d2:	f7fd f85f 	bl	8000694 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80035d6:	4622      	mov	r2, r4
 80035d8:	4621      	mov	r1, r4
 80035da:	2028      	movs	r0, #40	; 0x28
 80035dc:	f7fd f826 	bl	800062c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80035e0:	2028      	movs	r0, #40	; 0x28
 80035e2:	f7fd f857 	bl	8000694 <HAL_NVIC_EnableIRQ>
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80035e6:	481f      	ldr	r0, [pc, #124]	; (8003664 <main+0x2f4>)
 80035e8:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <main+0x2f8>)
 80035ea:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80035ec:	f44f 7380 	mov.w	r3, #256	; 0x100
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80035f0:	7105      	strb	r5, [r0, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80035f2:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80035f4:	f8c0 900c 	str.w	r9, [r0, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80035f8:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80035fa:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80035fc:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80035fe:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003600:	f8c0 a020 	str.w	sl, [r0, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8003604:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8003606:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8003608:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800360a:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800360c:	f7fd f8a2 	bl	8000754 <HAL_DFSDM_ChannelInit>
 8003610:	b100      	cbz	r0, 8003614 <main+0x2a4>
 8003612:	e7fe      	b.n	8003612 <main+0x2a2>
  hi2c2.Instance = I2C2;
 8003614:	4c15      	ldr	r4, [pc, #84]	; (800366c <main+0x2fc>)
  hi2c2.Init.Timing = 0x10909CEC;
 8003616:	4b16      	ldr	r3, [pc, #88]	; (8003670 <main+0x300>)
 8003618:	f8df c058 	ldr.w	ip, [pc, #88]	; 8003674 <main+0x304>
  hi2c2.Init.OwnAddress1 = 0;
 800361c:	60a0      	str	r0, [r4, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800361e:	6120      	str	r0, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003620:	6160      	str	r0, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003622:	61a0      	str	r0, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003624:	61e0      	str	r0, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003626:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003628:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x10909CEC;
 800362a:	e884 1008 	stmia.w	r4, {r3, ip}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800362e:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003630:	f7fd fa92 	bl	8000b58 <HAL_I2C_Init>
 8003634:	4601      	mov	r1, r0
 8003636:	b100      	cbz	r0, 800363a <main+0x2ca>
 8003638:	e7fe      	b.n	8003638 <main+0x2c8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800363a:	4620      	mov	r0, r4
 800363c:	f7fd fadd 	bl	8000bfa <HAL_I2CEx_ConfigAnalogFilter>
 8003640:	4601      	mov	r1, r0
 8003642:	b1c8      	cbz	r0, 8003678 <main+0x308>
 8003644:	e7fe      	b.n	8003644 <main+0x2d4>
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	48001000 	.word	0x48001000
 8003650:	10110000 	.word	0x10110000
 8003654:	48000400 	.word	0x48000400
 8003658:	48000c00 	.word	0x48000c00
 800365c:	48000800 	.word	0x48000800
 8003660:	10210000 	.word	0x10210000
 8003664:	2000012c 	.word	0x2000012c
 8003668:	40016020 	.word	0x40016020
 800366c:	200005a8 	.word	0x200005a8
 8003670:	40005800 	.word	0x40005800
 8003674:	10909cec 	.word	0x10909cec
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003678:	4620      	mov	r0, r4
 800367a:	f7fd fae4 	bl	8000c46 <HAL_I2CEx_ConfigDigitalFilter>
 800367e:	b100      	cbz	r0, 8003682 <main+0x312>
 8003680:	e7fe      	b.n	8003680 <main+0x310>
  hqspi.Instance = QUADSPI;
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <main+0x3f4>)
  hqspi.Init.ClockPrescaler = 255;
 8003684:	4a38      	ldr	r2, [pc, #224]	; (8003768 <main+0x3f8>)
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003686:	60d8      	str	r0, [r3, #12]
  hqspi.Init.ClockPrescaler = 255;
 8003688:	f04f 0eff 	mov.w	lr, #255	; 0xff
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800368c:	6158      	str	r0, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800368e:	6198      	str	r0, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003690:	4618      	mov	r0, r3
  hqspi.Init.ClockPrescaler = 255;
 8003692:	e883 4004 	stmia.w	r3, {r2, lr}
  hqspi.Init.FifoThreshold = 1;
 8003696:	609d      	str	r5, [r3, #8]
  hqspi.Init.FlashSize = 1;
 8003698:	611d      	str	r5, [r3, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800369a:	f7fd fc05 	bl	8000ea8 <HAL_QSPI_Init>
 800369e:	b100      	cbz	r0, 80036a2 <main+0x332>
 80036a0:	e7fe      	b.n	80036a0 <main+0x330>
  hspi3.Instance = SPI3;
 80036a2:	4b32      	ldr	r3, [pc, #200]	; (800376c <main+0x3fc>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80036a4:	4a32      	ldr	r2, [pc, #200]	; (8003770 <main+0x400>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80036a6:	6098      	str	r0, [r3, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80036a8:	f44f 7482 	mov.w	r4, #260	; 0x104
 80036ac:	e883 0014 	stmia.w	r3, {r2, r4}
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036b0:	6118      	str	r0, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036b2:	6158      	str	r0, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80036b4:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036b8:	61d8      	str	r0, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036ba:	6218      	str	r0, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80036bc:	6258      	str	r0, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036be:	6298      	str	r0, [r3, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80036c0:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80036c2:	4618      	mov	r0, r3
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80036c4:	f8c3 800c 	str.w	r8, [r3, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80036c8:	619a      	str	r2, [r3, #24]
  hspi3.Init.CRCPolynomial = 7;
 80036ca:	62df      	str	r7, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80036cc:	635e      	str	r6, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80036ce:	f7fe fbb0 	bl	8001e32 <HAL_SPI_Init>
 80036d2:	b100      	cbz	r0, 80036d6 <main+0x366>
 80036d4:	e7fe      	b.n	80036d4 <main+0x364>
  huart1.Instance = USART1;
 80036d6:	4b27      	ldr	r3, [pc, #156]	; (8003774 <main+0x404>)
  huart1.Init.BaudRate = 115200;
 80036d8:	4a27      	ldr	r2, [pc, #156]	; (8003778 <main+0x408>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036da:	60d8      	str	r0, [r3, #12]
  huart1.Init.BaudRate = 115200;
 80036dc:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80036e0:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  huart1.Init.Parity = UART_PARITY_NONE;
 80036e4:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036e6:	240c      	movs	r4, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036e8:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036ea:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036ec:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036ee:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036f0:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 80036f2:	e883 0084 	stmia.w	r3, {r2, r7}
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80036f6:	609e      	str	r6, [r3, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036f8:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036fa:	f7ff f8ec 	bl	80028d6 <HAL_UART_Init>
 80036fe:	b100      	cbz	r0, 8003702 <main+0x392>
 8003700:	e7fe      	b.n	8003700 <main+0x390>
  huart3.Instance = USART3;
 8003702:	4b1e      	ldr	r3, [pc, #120]	; (800377c <main+0x40c>)
 8003704:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <main+0x410>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003706:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003708:	6118      	str	r0, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800370a:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800370c:	61d8      	str	r0, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800370e:	6218      	str	r0, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003710:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003712:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 8003714:	e883 0084 	stmia.w	r3, {r2, r7}
  huart3.Init.WordLength = UART_WORDLENGTH_7B;
 8003718:	609e      	str	r6, [r3, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800371a:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800371c:	f7ff f8db 	bl	80028d6 <HAL_UART_Init>
 8003720:	b100      	cbz	r0, 8003724 <main+0x3b4>
 8003722:	e7fe      	b.n	8003722 <main+0x3b2>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003724:	4b17      	ldr	r3, [pc, #92]	; (8003784 <main+0x414>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003726:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800372a:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800372c:	6158      	str	r0, [r3, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800372e:	61d8      	str	r0, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003730:	6218      	str	r0, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003732:	6258      	str	r0, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8003734:	6298      	str	r0, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003736:	6318      	str	r0, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003738:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800373a:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800373c:	e883 0006 	stmia.w	r3, {r1, r2}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003740:	60dd      	str	r5, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003742:	619d      	str	r5, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003744:	f7fd faa4 	bl	8000c90 <HAL_PCD_Init>
 8003748:	b100      	cbz	r0, 800374c <main+0x3dc>
 800374a:	e7fe      	b.n	800374a <main+0x3da>
  WIFI_Init();
 800374c:	f000 f9fc 	bl	8003b48 <WIFI_Init>
  WIFI_Connect(ssid,pswd,ecn);
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <main+0x418>)
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <main+0x41c>)
 8003756:	6819      	ldr	r1, [r3, #0]
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <main+0x420>)
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	f000 fa18 	bl	8003b90 <WIFI_Connect>
 8003760:	e7fe      	b.n	8003760 <main+0x3f0>
 8003762:	bf00      	nop
 8003764:	200006d0 	.word	0x200006d0
 8003768:	a0001000 	.word	0xa0001000
 800376c:	200005f4 	.word	0x200005f4
 8003770:	40003c00 	.word	0x40003c00
 8003774:	20000658 	.word	0x20000658
 8003778:	40013800 	.word	0x40013800
 800377c:	20000164 	.word	0x20000164
 8003780:	40004800 	.word	0x40004800
 8003784:	200001dc 	.word	0x200001dc
 8003788:	20000000 	.word	0x20000000
 800378c:	20000004 	.word	0x20000004
 8003790:	20000008 	.word	0x20000008

08003794 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003794:	4b21      	ldr	r3, [pc, #132]	; (800381c <HAL_MspInit+0x88>)
{
 8003796:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003798:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	661a      	str	r2, [r3, #96]	; 0x60
 80037a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037a2:	f002 0201 	and.w	r2, r2, #1
 80037a6:	9200      	str	r2, [sp, #0]
 80037a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037b0:	659a      	str	r2, [r3, #88]	; 0x58
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b8:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ba:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037be:	f7fc ff23 	bl	8000608 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80037c2:	2200      	movs	r2, #0
 80037c4:	4611      	mov	r1, r2
 80037c6:	f06f 000b 	mvn.w	r0, #11
 80037ca:	f7fc ff2f 	bl	800062c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	4611      	mov	r1, r2
 80037d2:	f06f 000a 	mvn.w	r0, #10
 80037d6:	f7fc ff29 	bl	800062c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80037da:	2200      	movs	r2, #0
 80037dc:	4611      	mov	r1, r2
 80037de:	f06f 0009 	mvn.w	r0, #9
 80037e2:	f7fc ff23 	bl	800062c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80037e6:	2200      	movs	r2, #0
 80037e8:	4611      	mov	r1, r2
 80037ea:	f06f 0004 	mvn.w	r0, #4
 80037ee:	f7fc ff1d 	bl	800062c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80037f2:	2200      	movs	r2, #0
 80037f4:	4611      	mov	r1, r2
 80037f6:	f06f 0003 	mvn.w	r0, #3
 80037fa:	f7fc ff17 	bl	800062c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80037fe:	2200      	movs	r2, #0
 8003800:	4611      	mov	r1, r2
 8003802:	f06f 0001 	mvn.w	r0, #1
 8003806:	f7fc ff11 	bl	800062c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800380a:	2200      	movs	r2, #0
 800380c:	4611      	mov	r1, r2
 800380e:	f04f 30ff 	mov.w	r0, #4294967295
 8003812:	f7fc ff0b 	bl	800062c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003816:	b003      	add	sp, #12
 8003818:	f85d fb04 	ldr.w	pc, [sp], #4
 800381c:	40021000 	.word	0x40021000

08003820 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 8003822:	4b0e      	ldr	r3, [pc, #56]	; (800385c <HAL_DFSDM_ChannelMspInit+0x3c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	b9b3      	cbnz	r3, 8003856 <HAL_DFSDM_ChannelMspInit+0x36>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <HAL_DFSDM_ChannelMspInit+0x40>)
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800382a:	480e      	ldr	r0, [pc, #56]	; (8003864 <HAL_DFSDM_ChannelMspInit+0x44>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800382c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800382e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003832:	6611      	str	r1, [r2, #96]	; 0x60
 8003834:	6e12      	ldr	r2, [r2, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	9303      	str	r3, [sp, #12]
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003838:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800383c:	9200      	str	r2, [sp, #0]
 800383e:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003840:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003842:	f44f 7220 	mov.w	r2, #640	; 0x280
 8003846:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003848:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800384c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003850:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003852:	f7fc fff3 	bl	800083c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8003856:	b007      	add	sp, #28
 8003858:	f85d fb04 	ldr.w	pc, [sp], #4
 800385c:	200000b4 	.word	0x200000b4
 8003860:	40021000 	.word	0x40021000
 8003864:	48001000 	.word	0x48001000

08003868 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C2)
 800386a:	6802      	ldr	r2, [r0, #0]
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <HAL_I2C_MspInit+0x44>)
 800386e:	429a      	cmp	r2, r3
 8003870:	d119      	bne.n	80038a6 <HAL_I2C_MspInit+0x3e>
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003872:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003876:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003878:	2312      	movs	r3, #18
 800387a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800387c:	2301      	movs	r3, #1
 800387e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003880:	2303      	movs	r3, #3
 8003882:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003884:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003886:	eb0d 0103 	add.w	r1, sp, r3
 800388a:	4809      	ldr	r0, [pc, #36]	; (80038b0 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800388c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388e:	f7fc ffd5 	bl	800083c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <HAL_I2C_MspInit+0x4c>)
 8003894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003896:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800389a:	659a      	str	r2, [r3, #88]	; 0x58
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80038a6:	b007      	add	sp, #28
 80038a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80038ac:	40005800 	.word	0x40005800
 80038b0:	48000400 	.word	0x48000400
 80038b4:	40021000 	.word	0x40021000

080038b8 <HAL_QSPI_MspInit>:
  }

}

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80038b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hqspi->Instance==QUADSPI)
 80038ba:	6802      	ldr	r2, [r0, #0]
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_QSPI_MspInit+0x48>)
 80038be:	429a      	cmp	r2, r3
 80038c0:	d11b      	bne.n	80038fa <HAL_QSPI_MspInit+0x42>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80038c2:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 80038c6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038ca:	a901      	add	r1, sp, #4
    __HAL_RCC_QSPI_CLK_ENABLE();
 80038cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038ce:	480d      	ldr	r0, [pc, #52]	; (8003904 <HAL_QSPI_MspInit+0x4c>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 80038d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d4:	651a      	str	r2, [r3, #80]	; 0x50
 80038d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 80038e0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80038e4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ee:	2303      	movs	r3, #3
 80038f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80038f2:	230a      	movs	r3, #10
 80038f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038f6:	f7fc ffa1 	bl	800083c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80038fa:	b007      	add	sp, #28
 80038fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003900:	a0001000 	.word	0xa0001000
 8003904:	48001000 	.word	0x48001000

08003908 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003908:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI3)
 800390a:	6802      	ldr	r2, [r0, #0]
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <HAL_SPI_MspInit+0x44>)
 800390e:	429a      	cmp	r2, r3
 8003910:	d119      	bne.n	8003946 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003912:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003916:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003918:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800391a:	480d      	ldr	r0, [pc, #52]	; (8003950 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800391c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003920:	659a      	str	r2, [r3, #88]	; 0x58
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800392c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003930:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003932:	2302      	movs	r3, #2
 8003934:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	2300      	movs	r3, #0
 8003938:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800393e:	2306      	movs	r3, #6
 8003940:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003942:	f7fc ff7b 	bl	800083c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003946:	b007      	add	sp, #28
 8003948:	f85d fb04 	ldr.w	pc, [sp], #4
 800394c:	40003c00 	.word	0x40003c00
 8003950:	48000800 	.word	0x48000800

08003954 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{

  if(hspi->Instance==SPI3)
 8003954:	6802      	ldr	r2, [r0, #0]
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <HAL_SPI_MspDeInit+0x20>)
 8003958:	429a      	cmp	r2, r3
 800395a:	d109      	bne.n	8003970 <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800395c:	4a06      	ldr	r2, [pc, #24]	; (8003978 <HAL_SPI_MspDeInit+0x24>)
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800395e:	4807      	ldr	r0, [pc, #28]	; (800397c <HAL_SPI_MspDeInit+0x28>)
    __HAL_RCC_SPI3_CLK_DISABLE();
 8003960:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003962:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8003968:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800396c:	f7fd b842 	b.w	80009f4 <HAL_GPIO_DeInit>
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40003c00 	.word	0x40003c00
 8003978:	40021000 	.word	0x40021000
 800397c:	48000800 	.word	0x48000800

08003980 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003980:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003982:	6803      	ldr	r3, [r0, #0]
 8003984:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <HAL_UART_MspInit+0x78>)
 8003986:	4293      	cmp	r3, r2
{
 8003988:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==USART1)
 800398a:	d11a      	bne.n	80039c2 <HAL_UART_MspInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398e:	481c      	ldr	r0, [pc, #112]	; (8003a00 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003990:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003996:	661a      	str	r2, [r3, #96]	; 0x60
 8003998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80039a2:	23c0      	movs	r3, #192	; 0xc0
 80039a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a6:	2302      	movs	r3, #2
 80039a8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ae:	2303      	movs	r3, #3
 80039b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039b2:	2307      	movs	r3, #7
 80039b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039b8:	f7fc ff40 	bl	800083c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039bc:	b009      	add	sp, #36	; 0x24
 80039be:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(huart->Instance==USART3)
 80039c2:	4a10      	ldr	r2, [pc, #64]	; (8003a04 <HAL_UART_MspInit+0x84>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d1f9      	bne.n	80039bc <HAL_UART_MspInit+0x3c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_UART_MspInit+0x7c>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039ca:	480f      	ldr	r0, [pc, #60]	; (8003a08 <HAL_UART_MspInit+0x88>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80039cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80039d2:	659a      	str	r2, [r3, #88]	; 0x58
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039da:	9302      	str	r3, [sp, #8]
 80039dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80039de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ec:	2303      	movs	r3, #3
 80039ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039f0:	2307      	movs	r3, #7
 80039f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039f4:	a903      	add	r1, sp, #12
 80039f6:	e7df      	b.n	80039b8 <HAL_UART_MspInit+0x38>
 80039f8:	40013800 	.word	0x40013800
 80039fc:	40021000 	.word	0x40021000
 8003a00:	48000400 	.word	0x48000400
 8003a04:	40004800 	.word	0x40004800
 8003a08:	48000c00 	.word	0x48000c00

08003a0c <HAL_PCD_MspInit>:
  }

}

void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003a0c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hpcd->Instance==USB_OTG_FS)
 8003a0e:	6803      	ldr	r3, [r0, #0]
 8003a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003a14:	b088      	sub	sp, #32
  if(hpcd->Instance==USB_OTG_FS)
 8003a16:	d138      	bne.n	8003a8a <HAL_PCD_MspInit+0x7e>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a18:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a1e:	a903      	add	r1, sp, #12
 8003a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003a24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a26:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a2a:	f7fc ff07 	bl	800083c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003a2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003a32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a38:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003a3c:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a42:	2303      	movs	r3, #3
 8003a44:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a46:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a48:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a50:	f7fc fef4 	bl	800083c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003a56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a5a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003a5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	d410      	bmi.n	8003a8e <HAL_PCD_MspInit+0x82>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a72:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	9302      	str	r3, [sp, #8]
 8003a7c:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8003a7e:	f7fd f9e5 	bl	8000e4c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a88:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003a8a:	b008      	add	sp, #32
 8003a8c:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8003a8e:	f7fd f9dd 	bl	8000e4c <HAL_PWREx_EnableVddUSB>
}
 8003a92:	e7fa      	b.n	8003a8a <HAL_PCD_MspInit+0x7e>

08003a94 <NMI_Handler>:
 8003a94:	4770      	bx	lr

08003a96 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003a96:	e7fe      	b.n	8003a96 <HardFault_Handler>

08003a98 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003a98:	e7fe      	b.n	8003a98 <MemManage_Handler>

08003a9a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003a9a:	e7fe      	b.n	8003a9a <BusFault_Handler>

08003a9c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003a9c:	e7fe      	b.n	8003a9c <UsageFault_Handler>

08003a9e <SVC_Handler>:
 8003a9e:	4770      	bx	lr

08003aa0 <DebugMon_Handler>:
 8003aa0:	4770      	bx	lr

08003aa2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003aa2:	4770      	bx	lr

08003aa4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003aa4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa6:	f7fc fd93 	bl	80005d0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003aae:	f7fc be20 	b.w	80006f2 <HAL_SYSTICK_IRQHandler>

08003ab2 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8003ab2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003ab4:	2020      	movs	r0, #32
 8003ab6:	f7fd f843 	bl	8000b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003aba:	2040      	movs	r0, #64	; 0x40
 8003abc:	f7fd f840 	bl	8000b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003ac0:	2080      	movs	r0, #128	; 0x80
 8003ac2:	f7fd f83d 	bl	8000b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003ac6:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003ace:	f7fd b837 	b.w	8000b40 <HAL_GPIO_EXTI_IRQHandler>

08003ad2 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8003ad2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003ad4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003ad8:	f7fd f832 	bl	8000b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003adc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ae0:	f7fd f82e 	bl	8000b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003ae4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ae8:	f7fd f82a 	bl	8000b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003aec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003af0:	f7fd f826 	bl	8000b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003af4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003af8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003afc:	f7fd b820 	b.w	8000b40 <HAL_GPIO_EXTI_IRQHandler>

08003b00 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b00:	490f      	ldr	r1, [pc, #60]	; (8003b40 <SystemInit+0x40>)
 8003b02:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003b06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <SystemInit+0x44>)
 8003b10:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003b12:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003b1a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003b22:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003b26:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003b28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b34:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003b36:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b3c:	608b      	str	r3, [r1, #8]
 8003b3e:	4770      	bx	lr
 8003b40:	e000ed00 	.word	0xe000ed00
 8003b44:	40021000 	.word	0x40021000

08003b48 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003b48:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <WIFI_Init+0x30>)
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <WIFI_Init+0x34>)
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	4a0b      	ldr	r2, [pc, #44]	; (8003b80 <WIFI_Init+0x38>)
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <WIFI_Init+0x3c>)
 8003b56:	490c      	ldr	r1, [pc, #48]	; (8003b88 <WIFI_Init+0x40>)
 8003b58:	480c      	ldr	r0, [pc, #48]	; (8003b8c <WIFI_Init+0x44>)
 8003b5a:	f7ff f8e9 	bl	8002d30 <ES_WIFI_RegisterBusIO>
 8003b5e:	b940      	cbnz	r0, 8003b72 <WIFI_Init+0x2a>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003b60:	480a      	ldr	r0, [pc, #40]	; (8003b8c <WIFI_Init+0x44>)
 8003b62:	f7ff f885 	bl	8002c70 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003b66:	3000      	adds	r0, #0
 8003b68:	bf18      	it	ne
 8003b6a:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8003b6c:	b003      	add	sp, #12
 8003b6e:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003b72:	2001      	movs	r0, #1
 8003b74:	e7fa      	b.n	8003b6c <WIFI_Init+0x24>
 8003b76:	bf00      	nop
 8003b78:	08003115 	.word	0x08003115
 8003b7c:	0800320d 	.word	0x0800320d
 8003b80:	08003105 	.word	0x08003105
 8003b84:	080032a1 	.word	0x080032a1
 8003b88:	08002fed 	.word	0x08002fed
 8003b8c:	20000714 	.word	0x20000714

08003b90 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8003b90:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003b92:	4613      	mov	r3, r2
 8003b94:	460a      	mov	r2, r1
 8003b96:	4601      	mov	r1, r0
 8003b98:	4806      	ldr	r0, [pc, #24]	; (8003bb4 <WIFI_Connect+0x24>)
 8003b9a:	f7ff f8dd 	bl	8002d58 <ES_WIFI_Connect>
 8003b9e:	b930      	cbnz	r0, 8003bae <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003ba0:	4804      	ldr	r0, [pc, #16]	; (8003bb4 <WIFI_Connect+0x24>)
 8003ba2:	f7ff f919 	bl	8002dd8 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8003ba6:	3000      	adds	r0, #0
 8003ba8:	bf18      	it	ne
 8003baa:	2001      	movne	r0, #1
 8003bac:	bd08      	pop	{r3, pc}
 8003bae:	2001      	movs	r0, #1
       ret = WIFI_STATUS_OK;
    }
    
  }
  return ret;
}
 8003bb0:	bd08      	pop	{r3, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000714 	.word	0x20000714

08003bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bf0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003bbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003bbe:	e003      	b.n	8003bc8 <LoopCopyDataInit>

08003bc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003bc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003bc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003bc6:	3104      	adds	r1, #4

08003bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003bc8:	480b      	ldr	r0, [pc, #44]	; (8003bf8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <LoopForever+0xe>)
	adds	r2, r0, r1
 8003bcc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003bce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003bd0:	d3f6      	bcc.n	8003bc0 <CopyDataInit>
	ldr	r2, =_sbss
 8003bd2:	4a0b      	ldr	r2, [pc, #44]	; (8003c00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003bd4:	e002      	b.n	8003bdc <LoopFillZerobss>

08003bd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003bd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003bd8:	f842 3b04 	str.w	r3, [r2], #4

08003bdc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <LoopForever+0x16>)
	cmp	r2, r3
 8003bde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003be0:	d3f9      	bcc.n	8003bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003be2:	f7ff ff8d 	bl	8003b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003be6:	f000 f811 	bl	8003c0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003bea:	f7ff fbc1 	bl	8003370 <main>

08003bee <LoopForever>:

LoopForever:
    b LoopForever
 8003bee:	e7fe      	b.n	8003bee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003bf0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003bf4:	080046d4 	.word	0x080046d4
	ldr	r0, =_sdata
 8003bf8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003bfc:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8003c00:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8003c04:	20000e80 	.word	0x20000e80

08003c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c08:	e7fe      	b.n	8003c08 <ADC1_2_IRQHandler>
	...

08003c0c <__libc_init_array>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	4e0d      	ldr	r6, [pc, #52]	; (8003c44 <__libc_init_array+0x38>)
 8003c10:	4c0d      	ldr	r4, [pc, #52]	; (8003c48 <__libc_init_array+0x3c>)
 8003c12:	1ba4      	subs	r4, r4, r6
 8003c14:	10a4      	asrs	r4, r4, #2
 8003c16:	2500      	movs	r5, #0
 8003c18:	42a5      	cmp	r5, r4
 8003c1a:	d109      	bne.n	8003c30 <__libc_init_array+0x24>
 8003c1c:	4e0b      	ldr	r6, [pc, #44]	; (8003c4c <__libc_init_array+0x40>)
 8003c1e:	4c0c      	ldr	r4, [pc, #48]	; (8003c50 <__libc_init_array+0x44>)
 8003c20:	f000 fcd8 	bl	80045d4 <_init>
 8003c24:	1ba4      	subs	r4, r4, r6
 8003c26:	10a4      	asrs	r4, r4, #2
 8003c28:	2500      	movs	r5, #0
 8003c2a:	42a5      	cmp	r5, r4
 8003c2c:	d105      	bne.n	8003c3a <__libc_init_array+0x2e>
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c34:	4798      	blx	r3
 8003c36:	3501      	adds	r5, #1
 8003c38:	e7ee      	b.n	8003c18 <__libc_init_array+0xc>
 8003c3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c3e:	4798      	blx	r3
 8003c40:	3501      	adds	r5, #1
 8003c42:	e7f2      	b.n	8003c2a <__libc_init_array+0x1e>
 8003c44:	080046cc 	.word	0x080046cc
 8003c48:	080046cc 	.word	0x080046cc
 8003c4c:	080046cc 	.word	0x080046cc
 8003c50:	080046d0 	.word	0x080046d0

08003c54 <memcpy>:
 8003c54:	b510      	push	{r4, lr}
 8003c56:	1e43      	subs	r3, r0, #1
 8003c58:	440a      	add	r2, r1
 8003c5a:	4291      	cmp	r1, r2
 8003c5c:	d100      	bne.n	8003c60 <memcpy+0xc>
 8003c5e:	bd10      	pop	{r4, pc}
 8003c60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c68:	e7f7      	b.n	8003c5a <memcpy+0x6>
	...

08003c6c <siprintf>:
 8003c6c:	b40e      	push	{r1, r2, r3}
 8003c6e:	b500      	push	{lr}
 8003c70:	b09c      	sub	sp, #112	; 0x70
 8003c72:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003c76:	ab1d      	add	r3, sp, #116	; 0x74
 8003c78:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003c7c:	9002      	str	r0, [sp, #8]
 8003c7e:	9006      	str	r0, [sp, #24]
 8003c80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c84:	480a      	ldr	r0, [pc, #40]	; (8003cb0 <siprintf+0x44>)
 8003c86:	9104      	str	r1, [sp, #16]
 8003c88:	9107      	str	r1, [sp, #28]
 8003c8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c92:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003c96:	6800      	ldr	r0, [r0, #0]
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	a902      	add	r1, sp, #8
 8003c9c:	f000 f9a6 	bl	8003fec <_svfiprintf_r>
 8003ca0:	9b02      	ldr	r3, [sp, #8]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	b01c      	add	sp, #112	; 0x70
 8003ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cac:	b003      	add	sp, #12
 8003cae:	4770      	bx	lr
 8003cb0:	20000010 	.word	0x20000010

08003cb4 <strcpy>:
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cba:	f803 2b01 	strb.w	r2, [r3], #1
 8003cbe:	2a00      	cmp	r2, #0
 8003cc0:	d1f9      	bne.n	8003cb6 <strcpy+0x2>
 8003cc2:	4770      	bx	lr

08003cc4 <strncpy>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	b902      	cbnz	r2, 8003ccc <strncpy+0x8>
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	4623      	mov	r3, r4
 8003cce:	f811 5b01 	ldrb.w	r5, [r1], #1
 8003cd2:	f803 5b01 	strb.w	r5, [r3], #1
 8003cd6:	1e56      	subs	r6, r2, #1
 8003cd8:	b91d      	cbnz	r5, 8003ce2 <strncpy+0x1e>
 8003cda:	4414      	add	r4, r2
 8003cdc:	42a3      	cmp	r3, r4
 8003cde:	d103      	bne.n	8003ce8 <strncpy+0x24>
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
 8003ce2:	461c      	mov	r4, r3
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	e7ef      	b.n	8003cc8 <strncpy+0x4>
 8003ce8:	f803 5b01 	strb.w	r5, [r3], #1
 8003cec:	e7f6      	b.n	8003cdc <strncpy+0x18>

08003cee <strstr>:
 8003cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf0:	7803      	ldrb	r3, [r0, #0]
 8003cf2:	b133      	cbz	r3, 8003d02 <strstr+0x14>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	1c5e      	adds	r6, r3, #1
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b933      	cbnz	r3, 8003d0c <strstr+0x1e>
 8003cfe:	4618      	mov	r0, r3
 8003d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d02:	780b      	ldrb	r3, [r1, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf18      	it	ne
 8003d08:	2000      	movne	r0, #0
 8003d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0c:	1e4d      	subs	r5, r1, #1
 8003d0e:	1e44      	subs	r4, r0, #1
 8003d10:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003d14:	2a00      	cmp	r2, #0
 8003d16:	d0f3      	beq.n	8003d00 <strstr+0x12>
 8003d18:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8003d1c:	4297      	cmp	r7, r2
 8003d1e:	4633      	mov	r3, r6
 8003d20:	d0f6      	beq.n	8003d10 <strstr+0x22>
 8003d22:	e7e8      	b.n	8003cf6 <strstr+0x8>

08003d24 <strtok>:
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <strtok+0x50>)
 8003d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2a:	681d      	ldr	r5, [r3, #0]
 8003d2c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003d2e:	4606      	mov	r6, r0
 8003d30:	460f      	mov	r7, r1
 8003d32:	b9b4      	cbnz	r4, 8003d62 <strtok+0x3e>
 8003d34:	2050      	movs	r0, #80	; 0x50
 8003d36:	f000 f849 	bl	8003dcc <malloc>
 8003d3a:	65a8      	str	r0, [r5, #88]	; 0x58
 8003d3c:	6004      	str	r4, [r0, #0]
 8003d3e:	6044      	str	r4, [r0, #4]
 8003d40:	6084      	str	r4, [r0, #8]
 8003d42:	60c4      	str	r4, [r0, #12]
 8003d44:	6104      	str	r4, [r0, #16]
 8003d46:	6144      	str	r4, [r0, #20]
 8003d48:	6184      	str	r4, [r0, #24]
 8003d4a:	6284      	str	r4, [r0, #40]	; 0x28
 8003d4c:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003d4e:	6304      	str	r4, [r0, #48]	; 0x30
 8003d50:	6344      	str	r4, [r0, #52]	; 0x34
 8003d52:	6384      	str	r4, [r0, #56]	; 0x38
 8003d54:	63c4      	str	r4, [r0, #60]	; 0x3c
 8003d56:	6404      	str	r4, [r0, #64]	; 0x40
 8003d58:	6444      	str	r4, [r0, #68]	; 0x44
 8003d5a:	6484      	str	r4, [r0, #72]	; 0x48
 8003d5c:	64c4      	str	r4, [r0, #76]	; 0x4c
 8003d5e:	7704      	strb	r4, [r0, #28]
 8003d60:	6244      	str	r4, [r0, #36]	; 0x24
 8003d62:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003d64:	4639      	mov	r1, r7
 8003d66:	4630      	mov	r0, r6
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6e:	f000 b803 	b.w	8003d78 <__strtok_r>
 8003d72:	bf00      	nop
 8003d74:	20000010 	.word	0x20000010

08003d78 <__strtok_r>:
 8003d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d7a:	b918      	cbnz	r0, 8003d84 <__strtok_r+0xc>
 8003d7c:	6810      	ldr	r0, [r2, #0]
 8003d7e:	b908      	cbnz	r0, 8003d84 <__strtok_r+0xc>
 8003d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d82:	4620      	mov	r0, r4
 8003d84:	4604      	mov	r4, r0
 8003d86:	460f      	mov	r7, r1
 8003d88:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003d8c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003d90:	b91e      	cbnz	r6, 8003d9a <__strtok_r+0x22>
 8003d92:	b965      	cbnz	r5, 8003dae <__strtok_r+0x36>
 8003d94:	6015      	str	r5, [r2, #0]
 8003d96:	4628      	mov	r0, r5
 8003d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d9a:	42b5      	cmp	r5, r6
 8003d9c:	d1f6      	bne.n	8003d8c <__strtok_r+0x14>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ef      	bne.n	8003d82 <__strtok_r+0xa>
 8003da2:	6014      	str	r4, [r2, #0]
 8003da4:	7003      	strb	r3, [r0, #0]
 8003da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da8:	461c      	mov	r4, r3
 8003daa:	e00c      	b.n	8003dc6 <__strtok_r+0x4e>
 8003dac:	b915      	cbnz	r5, 8003db4 <__strtok_r+0x3c>
 8003dae:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003db2:	460e      	mov	r6, r1
 8003db4:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003db8:	42ab      	cmp	r3, r5
 8003dba:	d1f7      	bne.n	8003dac <__strtok_r+0x34>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f3      	beq.n	8003da8 <__strtok_r+0x30>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003dc6:	6014      	str	r4, [r2, #0]
 8003dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003dcc <malloc>:
 8003dcc:	4b02      	ldr	r3, [pc, #8]	; (8003dd8 <malloc+0xc>)
 8003dce:	4601      	mov	r1, r0
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	f000 b851 	b.w	8003e78 <_malloc_r>
 8003dd6:	bf00      	nop
 8003dd8:	20000010 	.word	0x20000010

08003ddc <_free_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4605      	mov	r5, r0
 8003de0:	2900      	cmp	r1, #0
 8003de2:	d045      	beq.n	8003e70 <_free_r+0x94>
 8003de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003de8:	1f0c      	subs	r4, r1, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfb8      	it	lt
 8003dee:	18e4      	addlt	r4, r4, r3
 8003df0:	f000 fbb0 	bl	8004554 <__malloc_lock>
 8003df4:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <_free_r+0x98>)
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	4610      	mov	r0, r2
 8003dfa:	b933      	cbnz	r3, 8003e0a <_free_r+0x2e>
 8003dfc:	6063      	str	r3, [r4, #4]
 8003dfe:	6014      	str	r4, [r2, #0]
 8003e00:	4628      	mov	r0, r5
 8003e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e06:	f000 bba6 	b.w	8004556 <__malloc_unlock>
 8003e0a:	42a3      	cmp	r3, r4
 8003e0c:	d90c      	bls.n	8003e28 <_free_r+0x4c>
 8003e0e:	6821      	ldr	r1, [r4, #0]
 8003e10:	1862      	adds	r2, r4, r1
 8003e12:	4293      	cmp	r3, r2
 8003e14:	bf04      	itt	eq
 8003e16:	681a      	ldreq	r2, [r3, #0]
 8003e18:	685b      	ldreq	r3, [r3, #4]
 8003e1a:	6063      	str	r3, [r4, #4]
 8003e1c:	bf04      	itt	eq
 8003e1e:	1852      	addeq	r2, r2, r1
 8003e20:	6022      	streq	r2, [r4, #0]
 8003e22:	6004      	str	r4, [r0, #0]
 8003e24:	e7ec      	b.n	8003e00 <_free_r+0x24>
 8003e26:	4613      	mov	r3, r2
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	b10a      	cbz	r2, 8003e30 <_free_r+0x54>
 8003e2c:	42a2      	cmp	r2, r4
 8003e2e:	d9fa      	bls.n	8003e26 <_free_r+0x4a>
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	1858      	adds	r0, r3, r1
 8003e34:	42a0      	cmp	r0, r4
 8003e36:	d10b      	bne.n	8003e50 <_free_r+0x74>
 8003e38:	6820      	ldr	r0, [r4, #0]
 8003e3a:	4401      	add	r1, r0
 8003e3c:	1858      	adds	r0, r3, r1
 8003e3e:	4282      	cmp	r2, r0
 8003e40:	6019      	str	r1, [r3, #0]
 8003e42:	d1dd      	bne.n	8003e00 <_free_r+0x24>
 8003e44:	6810      	ldr	r0, [r2, #0]
 8003e46:	6852      	ldr	r2, [r2, #4]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	4401      	add	r1, r0
 8003e4c:	6019      	str	r1, [r3, #0]
 8003e4e:	e7d7      	b.n	8003e00 <_free_r+0x24>
 8003e50:	d902      	bls.n	8003e58 <_free_r+0x7c>
 8003e52:	230c      	movs	r3, #12
 8003e54:	602b      	str	r3, [r5, #0]
 8003e56:	e7d3      	b.n	8003e00 <_free_r+0x24>
 8003e58:	6820      	ldr	r0, [r4, #0]
 8003e5a:	1821      	adds	r1, r4, r0
 8003e5c:	428a      	cmp	r2, r1
 8003e5e:	bf04      	itt	eq
 8003e60:	6811      	ldreq	r1, [r2, #0]
 8003e62:	6852      	ldreq	r2, [r2, #4]
 8003e64:	6062      	str	r2, [r4, #4]
 8003e66:	bf04      	itt	eq
 8003e68:	1809      	addeq	r1, r1, r0
 8003e6a:	6021      	streq	r1, [r4, #0]
 8003e6c:	605c      	str	r4, [r3, #4]
 8003e6e:	e7c7      	b.n	8003e00 <_free_r+0x24>
 8003e70:	bd38      	pop	{r3, r4, r5, pc}
 8003e72:	bf00      	nop
 8003e74:	200000b8 	.word	0x200000b8

08003e78 <_malloc_r>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	1ccd      	adds	r5, r1, #3
 8003e7c:	f025 0503 	bic.w	r5, r5, #3
 8003e80:	3508      	adds	r5, #8
 8003e82:	2d0c      	cmp	r5, #12
 8003e84:	bf38      	it	cc
 8003e86:	250c      	movcc	r5, #12
 8003e88:	2d00      	cmp	r5, #0
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	db01      	blt.n	8003e92 <_malloc_r+0x1a>
 8003e8e:	42a9      	cmp	r1, r5
 8003e90:	d903      	bls.n	8003e9a <_malloc_r+0x22>
 8003e92:	230c      	movs	r3, #12
 8003e94:	6033      	str	r3, [r6, #0]
 8003e96:	2000      	movs	r0, #0
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
 8003e9a:	f000 fb5b 	bl	8004554 <__malloc_lock>
 8003e9e:	4a23      	ldr	r2, [pc, #140]	; (8003f2c <_malloc_r+0xb4>)
 8003ea0:	6814      	ldr	r4, [r2, #0]
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	b991      	cbnz	r1, 8003ecc <_malloc_r+0x54>
 8003ea6:	4c22      	ldr	r4, [pc, #136]	; (8003f30 <_malloc_r+0xb8>)
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	b91b      	cbnz	r3, 8003eb4 <_malloc_r+0x3c>
 8003eac:	4630      	mov	r0, r6
 8003eae:	f000 fb27 	bl	8004500 <_sbrk_r>
 8003eb2:	6020      	str	r0, [r4, #0]
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	f000 fb22 	bl	8004500 <_sbrk_r>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d126      	bne.n	8003f0e <_malloc_r+0x96>
 8003ec0:	230c      	movs	r3, #12
 8003ec2:	6033      	str	r3, [r6, #0]
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f000 fb46 	bl	8004556 <__malloc_unlock>
 8003eca:	e7e4      	b.n	8003e96 <_malloc_r+0x1e>
 8003ecc:	680b      	ldr	r3, [r1, #0]
 8003ece:	1b5b      	subs	r3, r3, r5
 8003ed0:	d41a      	bmi.n	8003f08 <_malloc_r+0x90>
 8003ed2:	2b0b      	cmp	r3, #11
 8003ed4:	d90f      	bls.n	8003ef6 <_malloc_r+0x7e>
 8003ed6:	600b      	str	r3, [r1, #0]
 8003ed8:	50cd      	str	r5, [r1, r3]
 8003eda:	18cc      	adds	r4, r1, r3
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 fb3a 	bl	8004556 <__malloc_unlock>
 8003ee2:	f104 000b 	add.w	r0, r4, #11
 8003ee6:	1d23      	adds	r3, r4, #4
 8003ee8:	f020 0007 	bic.w	r0, r0, #7
 8003eec:	1ac3      	subs	r3, r0, r3
 8003eee:	d01b      	beq.n	8003f28 <_malloc_r+0xb0>
 8003ef0:	425a      	negs	r2, r3
 8003ef2:	50e2      	str	r2, [r4, r3]
 8003ef4:	bd70      	pop	{r4, r5, r6, pc}
 8003ef6:	428c      	cmp	r4, r1
 8003ef8:	bf0d      	iteet	eq
 8003efa:	6863      	ldreq	r3, [r4, #4]
 8003efc:	684b      	ldrne	r3, [r1, #4]
 8003efe:	6063      	strne	r3, [r4, #4]
 8003f00:	6013      	streq	r3, [r2, #0]
 8003f02:	bf18      	it	ne
 8003f04:	460c      	movne	r4, r1
 8003f06:	e7e9      	b.n	8003edc <_malloc_r+0x64>
 8003f08:	460c      	mov	r4, r1
 8003f0a:	6849      	ldr	r1, [r1, #4]
 8003f0c:	e7ca      	b.n	8003ea4 <_malloc_r+0x2c>
 8003f0e:	1cc4      	adds	r4, r0, #3
 8003f10:	f024 0403 	bic.w	r4, r4, #3
 8003f14:	42a0      	cmp	r0, r4
 8003f16:	d005      	beq.n	8003f24 <_malloc_r+0xac>
 8003f18:	1a21      	subs	r1, r4, r0
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	f000 faf0 	bl	8004500 <_sbrk_r>
 8003f20:	3001      	adds	r0, #1
 8003f22:	d0cd      	beq.n	8003ec0 <_malloc_r+0x48>
 8003f24:	6025      	str	r5, [r4, #0]
 8003f26:	e7d9      	b.n	8003edc <_malloc_r+0x64>
 8003f28:	bd70      	pop	{r4, r5, r6, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200000b8 	.word	0x200000b8
 8003f30:	200000bc 	.word	0x200000bc

08003f34 <__ssputs_r>:
 8003f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f38:	688e      	ldr	r6, [r1, #8]
 8003f3a:	429e      	cmp	r6, r3
 8003f3c:	4682      	mov	sl, r0
 8003f3e:	460c      	mov	r4, r1
 8003f40:	4691      	mov	r9, r2
 8003f42:	4698      	mov	r8, r3
 8003f44:	d835      	bhi.n	8003fb2 <__ssputs_r+0x7e>
 8003f46:	898a      	ldrh	r2, [r1, #12]
 8003f48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f4c:	d031      	beq.n	8003fb2 <__ssputs_r+0x7e>
 8003f4e:	6825      	ldr	r5, [r4, #0]
 8003f50:	6909      	ldr	r1, [r1, #16]
 8003f52:	1a6f      	subs	r7, r5, r1
 8003f54:	6965      	ldr	r5, [r4, #20]
 8003f56:	2302      	movs	r3, #2
 8003f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f5c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003f60:	f108 0301 	add.w	r3, r8, #1
 8003f64:	443b      	add	r3, r7
 8003f66:	429d      	cmp	r5, r3
 8003f68:	bf38      	it	cc
 8003f6a:	461d      	movcc	r5, r3
 8003f6c:	0553      	lsls	r3, r2, #21
 8003f6e:	d531      	bpl.n	8003fd4 <__ssputs_r+0xa0>
 8003f70:	4629      	mov	r1, r5
 8003f72:	f7ff ff81 	bl	8003e78 <_malloc_r>
 8003f76:	4606      	mov	r6, r0
 8003f78:	b950      	cbnz	r0, 8003f90 <__ssputs_r+0x5c>
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	f8ca 3000 	str.w	r3, [sl]
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f90:	463a      	mov	r2, r7
 8003f92:	6921      	ldr	r1, [r4, #16]
 8003f94:	f7ff fe5e 	bl	8003c54 <memcpy>
 8003f98:	89a3      	ldrh	r3, [r4, #12]
 8003f9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa2:	81a3      	strh	r3, [r4, #12]
 8003fa4:	6126      	str	r6, [r4, #16]
 8003fa6:	6165      	str	r5, [r4, #20]
 8003fa8:	443e      	add	r6, r7
 8003faa:	1bed      	subs	r5, r5, r7
 8003fac:	6026      	str	r6, [r4, #0]
 8003fae:	60a5      	str	r5, [r4, #8]
 8003fb0:	4646      	mov	r6, r8
 8003fb2:	4546      	cmp	r6, r8
 8003fb4:	bf28      	it	cs
 8003fb6:	4646      	movcs	r6, r8
 8003fb8:	4632      	mov	r2, r6
 8003fba:	4649      	mov	r1, r9
 8003fbc:	6820      	ldr	r0, [r4, #0]
 8003fbe:	f000 faaf 	bl	8004520 <memmove>
 8003fc2:	68a3      	ldr	r3, [r4, #8]
 8003fc4:	1b9b      	subs	r3, r3, r6
 8003fc6:	60a3      	str	r3, [r4, #8]
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	441e      	add	r6, r3
 8003fcc:	6026      	str	r6, [r4, #0]
 8003fce:	2000      	movs	r0, #0
 8003fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd4:	462a      	mov	r2, r5
 8003fd6:	f000 fabf 	bl	8004558 <_realloc_r>
 8003fda:	4606      	mov	r6, r0
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d1e1      	bne.n	8003fa4 <__ssputs_r+0x70>
 8003fe0:	6921      	ldr	r1, [r4, #16]
 8003fe2:	4650      	mov	r0, sl
 8003fe4:	f7ff fefa 	bl	8003ddc <_free_r>
 8003fe8:	e7c7      	b.n	8003f7a <__ssputs_r+0x46>
	...

08003fec <_svfiprintf_r>:
 8003fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff0:	b09d      	sub	sp, #116	; 0x74
 8003ff2:	4680      	mov	r8, r0
 8003ff4:	9303      	str	r3, [sp, #12]
 8003ff6:	898b      	ldrh	r3, [r1, #12]
 8003ff8:	061c      	lsls	r4, r3, #24
 8003ffa:	460d      	mov	r5, r1
 8003ffc:	4616      	mov	r6, r2
 8003ffe:	d50f      	bpl.n	8004020 <_svfiprintf_r+0x34>
 8004000:	690b      	ldr	r3, [r1, #16]
 8004002:	b96b      	cbnz	r3, 8004020 <_svfiprintf_r+0x34>
 8004004:	2140      	movs	r1, #64	; 0x40
 8004006:	f7ff ff37 	bl	8003e78 <_malloc_r>
 800400a:	6028      	str	r0, [r5, #0]
 800400c:	6128      	str	r0, [r5, #16]
 800400e:	b928      	cbnz	r0, 800401c <_svfiprintf_r+0x30>
 8004010:	230c      	movs	r3, #12
 8004012:	f8c8 3000 	str.w	r3, [r8]
 8004016:	f04f 30ff 	mov.w	r0, #4294967295
 800401a:	e0c5      	b.n	80041a8 <_svfiprintf_r+0x1bc>
 800401c:	2340      	movs	r3, #64	; 0x40
 800401e:	616b      	str	r3, [r5, #20]
 8004020:	2300      	movs	r3, #0
 8004022:	9309      	str	r3, [sp, #36]	; 0x24
 8004024:	2320      	movs	r3, #32
 8004026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800402a:	2330      	movs	r3, #48	; 0x30
 800402c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004030:	f04f 0b01 	mov.w	fp, #1
 8004034:	4637      	mov	r7, r6
 8004036:	463c      	mov	r4, r7
 8004038:	f814 3b01 	ldrb.w	r3, [r4], #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d13c      	bne.n	80040ba <_svfiprintf_r+0xce>
 8004040:	ebb7 0a06 	subs.w	sl, r7, r6
 8004044:	d00b      	beq.n	800405e <_svfiprintf_r+0x72>
 8004046:	4653      	mov	r3, sl
 8004048:	4632      	mov	r2, r6
 800404a:	4629      	mov	r1, r5
 800404c:	4640      	mov	r0, r8
 800404e:	f7ff ff71 	bl	8003f34 <__ssputs_r>
 8004052:	3001      	adds	r0, #1
 8004054:	f000 80a3 	beq.w	800419e <_svfiprintf_r+0x1b2>
 8004058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800405a:	4453      	add	r3, sl
 800405c:	9309      	str	r3, [sp, #36]	; 0x24
 800405e:	783b      	ldrb	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 809c 	beq.w	800419e <_svfiprintf_r+0x1b2>
 8004066:	2300      	movs	r3, #0
 8004068:	f04f 32ff 	mov.w	r2, #4294967295
 800406c:	9304      	str	r3, [sp, #16]
 800406e:	9307      	str	r3, [sp, #28]
 8004070:	9205      	str	r2, [sp, #20]
 8004072:	9306      	str	r3, [sp, #24]
 8004074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004078:	931a      	str	r3, [sp, #104]	; 0x68
 800407a:	2205      	movs	r2, #5
 800407c:	7821      	ldrb	r1, [r4, #0]
 800407e:	4850      	ldr	r0, [pc, #320]	; (80041c0 <_svfiprintf_r+0x1d4>)
 8004080:	f7fc f8ae 	bl	80001e0 <memchr>
 8004084:	1c67      	adds	r7, r4, #1
 8004086:	9b04      	ldr	r3, [sp, #16]
 8004088:	b9d8      	cbnz	r0, 80040c2 <_svfiprintf_r+0xd6>
 800408a:	06d9      	lsls	r1, r3, #27
 800408c:	bf44      	itt	mi
 800408e:	2220      	movmi	r2, #32
 8004090:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004094:	071a      	lsls	r2, r3, #28
 8004096:	bf44      	itt	mi
 8004098:	222b      	movmi	r2, #43	; 0x2b
 800409a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800409e:	7822      	ldrb	r2, [r4, #0]
 80040a0:	2a2a      	cmp	r2, #42	; 0x2a
 80040a2:	d016      	beq.n	80040d2 <_svfiprintf_r+0xe6>
 80040a4:	9a07      	ldr	r2, [sp, #28]
 80040a6:	2100      	movs	r1, #0
 80040a8:	200a      	movs	r0, #10
 80040aa:	4627      	mov	r7, r4
 80040ac:	3401      	adds	r4, #1
 80040ae:	783b      	ldrb	r3, [r7, #0]
 80040b0:	3b30      	subs	r3, #48	; 0x30
 80040b2:	2b09      	cmp	r3, #9
 80040b4:	d951      	bls.n	800415a <_svfiprintf_r+0x16e>
 80040b6:	b1c9      	cbz	r1, 80040ec <_svfiprintf_r+0x100>
 80040b8:	e011      	b.n	80040de <_svfiprintf_r+0xf2>
 80040ba:	2b25      	cmp	r3, #37	; 0x25
 80040bc:	d0c0      	beq.n	8004040 <_svfiprintf_r+0x54>
 80040be:	4627      	mov	r7, r4
 80040c0:	e7b9      	b.n	8004036 <_svfiprintf_r+0x4a>
 80040c2:	4a3f      	ldr	r2, [pc, #252]	; (80041c0 <_svfiprintf_r+0x1d4>)
 80040c4:	1a80      	subs	r0, r0, r2
 80040c6:	fa0b f000 	lsl.w	r0, fp, r0
 80040ca:	4318      	orrs	r0, r3
 80040cc:	9004      	str	r0, [sp, #16]
 80040ce:	463c      	mov	r4, r7
 80040d0:	e7d3      	b.n	800407a <_svfiprintf_r+0x8e>
 80040d2:	9a03      	ldr	r2, [sp, #12]
 80040d4:	1d11      	adds	r1, r2, #4
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	9103      	str	r1, [sp, #12]
 80040da:	2a00      	cmp	r2, #0
 80040dc:	db01      	blt.n	80040e2 <_svfiprintf_r+0xf6>
 80040de:	9207      	str	r2, [sp, #28]
 80040e0:	e004      	b.n	80040ec <_svfiprintf_r+0x100>
 80040e2:	4252      	negs	r2, r2
 80040e4:	f043 0302 	orr.w	r3, r3, #2
 80040e8:	9207      	str	r2, [sp, #28]
 80040ea:	9304      	str	r3, [sp, #16]
 80040ec:	783b      	ldrb	r3, [r7, #0]
 80040ee:	2b2e      	cmp	r3, #46	; 0x2e
 80040f0:	d10e      	bne.n	8004110 <_svfiprintf_r+0x124>
 80040f2:	787b      	ldrb	r3, [r7, #1]
 80040f4:	2b2a      	cmp	r3, #42	; 0x2a
 80040f6:	f107 0101 	add.w	r1, r7, #1
 80040fa:	d132      	bne.n	8004162 <_svfiprintf_r+0x176>
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	1d1a      	adds	r2, r3, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	9203      	str	r2, [sp, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	bfb8      	it	lt
 8004108:	f04f 33ff 	movlt.w	r3, #4294967295
 800410c:	3702      	adds	r7, #2
 800410e:	9305      	str	r3, [sp, #20]
 8004110:	4c2c      	ldr	r4, [pc, #176]	; (80041c4 <_svfiprintf_r+0x1d8>)
 8004112:	7839      	ldrb	r1, [r7, #0]
 8004114:	2203      	movs	r2, #3
 8004116:	4620      	mov	r0, r4
 8004118:	f7fc f862 	bl	80001e0 <memchr>
 800411c:	b138      	cbz	r0, 800412e <_svfiprintf_r+0x142>
 800411e:	2340      	movs	r3, #64	; 0x40
 8004120:	1b00      	subs	r0, r0, r4
 8004122:	fa03 f000 	lsl.w	r0, r3, r0
 8004126:	9b04      	ldr	r3, [sp, #16]
 8004128:	4303      	orrs	r3, r0
 800412a:	9304      	str	r3, [sp, #16]
 800412c:	3701      	adds	r7, #1
 800412e:	7839      	ldrb	r1, [r7, #0]
 8004130:	4825      	ldr	r0, [pc, #148]	; (80041c8 <_svfiprintf_r+0x1dc>)
 8004132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004136:	2206      	movs	r2, #6
 8004138:	1c7e      	adds	r6, r7, #1
 800413a:	f7fc f851 	bl	80001e0 <memchr>
 800413e:	2800      	cmp	r0, #0
 8004140:	d035      	beq.n	80041ae <_svfiprintf_r+0x1c2>
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <_svfiprintf_r+0x1e0>)
 8004144:	b9fb      	cbnz	r3, 8004186 <_svfiprintf_r+0x19a>
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	3307      	adds	r3, #7
 800414a:	f023 0307 	bic.w	r3, r3, #7
 800414e:	3308      	adds	r3, #8
 8004150:	9303      	str	r3, [sp, #12]
 8004152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004154:	444b      	add	r3, r9
 8004156:	9309      	str	r3, [sp, #36]	; 0x24
 8004158:	e76c      	b.n	8004034 <_svfiprintf_r+0x48>
 800415a:	fb00 3202 	mla	r2, r0, r2, r3
 800415e:	2101      	movs	r1, #1
 8004160:	e7a3      	b.n	80040aa <_svfiprintf_r+0xbe>
 8004162:	2300      	movs	r3, #0
 8004164:	9305      	str	r3, [sp, #20]
 8004166:	4618      	mov	r0, r3
 8004168:	240a      	movs	r4, #10
 800416a:	460f      	mov	r7, r1
 800416c:	3101      	adds	r1, #1
 800416e:	783a      	ldrb	r2, [r7, #0]
 8004170:	3a30      	subs	r2, #48	; 0x30
 8004172:	2a09      	cmp	r2, #9
 8004174:	d903      	bls.n	800417e <_svfiprintf_r+0x192>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0ca      	beq.n	8004110 <_svfiprintf_r+0x124>
 800417a:	9005      	str	r0, [sp, #20]
 800417c:	e7c8      	b.n	8004110 <_svfiprintf_r+0x124>
 800417e:	fb04 2000 	mla	r0, r4, r0, r2
 8004182:	2301      	movs	r3, #1
 8004184:	e7f1      	b.n	800416a <_svfiprintf_r+0x17e>
 8004186:	ab03      	add	r3, sp, #12
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	462a      	mov	r2, r5
 800418c:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <_svfiprintf_r+0x1e4>)
 800418e:	a904      	add	r1, sp, #16
 8004190:	4640      	mov	r0, r8
 8004192:	f3af 8000 	nop.w
 8004196:	f1b0 3fff 	cmp.w	r0, #4294967295
 800419a:	4681      	mov	r9, r0
 800419c:	d1d9      	bne.n	8004152 <_svfiprintf_r+0x166>
 800419e:	89ab      	ldrh	r3, [r5, #12]
 80041a0:	065b      	lsls	r3, r3, #25
 80041a2:	f53f af38 	bmi.w	8004016 <_svfiprintf_r+0x2a>
 80041a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041a8:	b01d      	add	sp, #116	; 0x74
 80041aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ae:	ab03      	add	r3, sp, #12
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	462a      	mov	r2, r5
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <_svfiprintf_r+0x1e4>)
 80041b6:	a904      	add	r1, sp, #16
 80041b8:	4640      	mov	r0, r8
 80041ba:	f000 f881 	bl	80042c0 <_printf_i>
 80041be:	e7ea      	b.n	8004196 <_svfiprintf_r+0x1aa>
 80041c0:	08004690 	.word	0x08004690
 80041c4:	08004696 	.word	0x08004696
 80041c8:	0800469a 	.word	0x0800469a
 80041cc:	00000000 	.word	0x00000000
 80041d0:	08003f35 	.word	0x08003f35

080041d4 <_printf_common>:
 80041d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d8:	4691      	mov	r9, r2
 80041da:	461f      	mov	r7, r3
 80041dc:	688a      	ldr	r2, [r1, #8]
 80041de:	690b      	ldr	r3, [r1, #16]
 80041e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041e4:	4293      	cmp	r3, r2
 80041e6:	bfb8      	it	lt
 80041e8:	4613      	movlt	r3, r2
 80041ea:	f8c9 3000 	str.w	r3, [r9]
 80041ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041f2:	4606      	mov	r6, r0
 80041f4:	460c      	mov	r4, r1
 80041f6:	b112      	cbz	r2, 80041fe <_printf_common+0x2a>
 80041f8:	3301      	adds	r3, #1
 80041fa:	f8c9 3000 	str.w	r3, [r9]
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	0699      	lsls	r1, r3, #26
 8004202:	bf42      	ittt	mi
 8004204:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004208:	3302      	addmi	r3, #2
 800420a:	f8c9 3000 	strmi.w	r3, [r9]
 800420e:	6825      	ldr	r5, [r4, #0]
 8004210:	f015 0506 	ands.w	r5, r5, #6
 8004214:	d107      	bne.n	8004226 <_printf_common+0x52>
 8004216:	f104 0a19 	add.w	sl, r4, #25
 800421a:	68e3      	ldr	r3, [r4, #12]
 800421c:	f8d9 2000 	ldr.w	r2, [r9]
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	429d      	cmp	r5, r3
 8004224:	db29      	blt.n	800427a <_printf_common+0xa6>
 8004226:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	3300      	adds	r3, #0
 800422e:	bf18      	it	ne
 8004230:	2301      	movne	r3, #1
 8004232:	0692      	lsls	r2, r2, #26
 8004234:	d42e      	bmi.n	8004294 <_printf_common+0xc0>
 8004236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800423a:	4639      	mov	r1, r7
 800423c:	4630      	mov	r0, r6
 800423e:	47c0      	blx	r8
 8004240:	3001      	adds	r0, #1
 8004242:	d021      	beq.n	8004288 <_printf_common+0xb4>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	68e5      	ldr	r5, [r4, #12]
 8004248:	f8d9 2000 	ldr.w	r2, [r9]
 800424c:	f003 0306 	and.w	r3, r3, #6
 8004250:	2b04      	cmp	r3, #4
 8004252:	bf08      	it	eq
 8004254:	1aad      	subeq	r5, r5, r2
 8004256:	68a3      	ldr	r3, [r4, #8]
 8004258:	6922      	ldr	r2, [r4, #16]
 800425a:	bf0c      	ite	eq
 800425c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004260:	2500      	movne	r5, #0
 8004262:	4293      	cmp	r3, r2
 8004264:	bfc4      	itt	gt
 8004266:	1a9b      	subgt	r3, r3, r2
 8004268:	18ed      	addgt	r5, r5, r3
 800426a:	f04f 0900 	mov.w	r9, #0
 800426e:	341a      	adds	r4, #26
 8004270:	454d      	cmp	r5, r9
 8004272:	d11b      	bne.n	80042ac <_printf_common+0xd8>
 8004274:	2000      	movs	r0, #0
 8004276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427a:	2301      	movs	r3, #1
 800427c:	4652      	mov	r2, sl
 800427e:	4639      	mov	r1, r7
 8004280:	4630      	mov	r0, r6
 8004282:	47c0      	blx	r8
 8004284:	3001      	adds	r0, #1
 8004286:	d103      	bne.n	8004290 <_printf_common+0xbc>
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004290:	3501      	adds	r5, #1
 8004292:	e7c2      	b.n	800421a <_printf_common+0x46>
 8004294:	18e1      	adds	r1, r4, r3
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	2030      	movs	r0, #48	; 0x30
 800429a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800429e:	4422      	add	r2, r4
 80042a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042a8:	3302      	adds	r3, #2
 80042aa:	e7c4      	b.n	8004236 <_printf_common+0x62>
 80042ac:	2301      	movs	r3, #1
 80042ae:	4622      	mov	r2, r4
 80042b0:	4639      	mov	r1, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	47c0      	blx	r8
 80042b6:	3001      	adds	r0, #1
 80042b8:	d0e6      	beq.n	8004288 <_printf_common+0xb4>
 80042ba:	f109 0901 	add.w	r9, r9, #1
 80042be:	e7d7      	b.n	8004270 <_printf_common+0x9c>

080042c0 <_printf_i>:
 80042c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042c4:	4617      	mov	r7, r2
 80042c6:	7e0a      	ldrb	r2, [r1, #24]
 80042c8:	b085      	sub	sp, #20
 80042ca:	2a6e      	cmp	r2, #110	; 0x6e
 80042cc:	4698      	mov	r8, r3
 80042ce:	4606      	mov	r6, r0
 80042d0:	460c      	mov	r4, r1
 80042d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042d4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80042d8:	f000 80bc 	beq.w	8004454 <_printf_i+0x194>
 80042dc:	d81a      	bhi.n	8004314 <_printf_i+0x54>
 80042de:	2a63      	cmp	r2, #99	; 0x63
 80042e0:	d02e      	beq.n	8004340 <_printf_i+0x80>
 80042e2:	d80a      	bhi.n	80042fa <_printf_i+0x3a>
 80042e4:	2a00      	cmp	r2, #0
 80042e6:	f000 80c8 	beq.w	800447a <_printf_i+0x1ba>
 80042ea:	2a58      	cmp	r2, #88	; 0x58
 80042ec:	f000 808a 	beq.w	8004404 <_printf_i+0x144>
 80042f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80042f8:	e02a      	b.n	8004350 <_printf_i+0x90>
 80042fa:	2a64      	cmp	r2, #100	; 0x64
 80042fc:	d001      	beq.n	8004302 <_printf_i+0x42>
 80042fe:	2a69      	cmp	r2, #105	; 0x69
 8004300:	d1f6      	bne.n	80042f0 <_printf_i+0x30>
 8004302:	6821      	ldr	r1, [r4, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	f011 0f80 	tst.w	r1, #128	; 0x80
 800430a:	d023      	beq.n	8004354 <_printf_i+0x94>
 800430c:	1d11      	adds	r1, r2, #4
 800430e:	6019      	str	r1, [r3, #0]
 8004310:	6813      	ldr	r3, [r2, #0]
 8004312:	e027      	b.n	8004364 <_printf_i+0xa4>
 8004314:	2a73      	cmp	r2, #115	; 0x73
 8004316:	f000 80b4 	beq.w	8004482 <_printf_i+0x1c2>
 800431a:	d808      	bhi.n	800432e <_printf_i+0x6e>
 800431c:	2a6f      	cmp	r2, #111	; 0x6f
 800431e:	d02a      	beq.n	8004376 <_printf_i+0xb6>
 8004320:	2a70      	cmp	r2, #112	; 0x70
 8004322:	d1e5      	bne.n	80042f0 <_printf_i+0x30>
 8004324:	680a      	ldr	r2, [r1, #0]
 8004326:	f042 0220 	orr.w	r2, r2, #32
 800432a:	600a      	str	r2, [r1, #0]
 800432c:	e003      	b.n	8004336 <_printf_i+0x76>
 800432e:	2a75      	cmp	r2, #117	; 0x75
 8004330:	d021      	beq.n	8004376 <_printf_i+0xb6>
 8004332:	2a78      	cmp	r2, #120	; 0x78
 8004334:	d1dc      	bne.n	80042f0 <_printf_i+0x30>
 8004336:	2278      	movs	r2, #120	; 0x78
 8004338:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800433c:	496e      	ldr	r1, [pc, #440]	; (80044f8 <_printf_i+0x238>)
 800433e:	e064      	b.n	800440a <_printf_i+0x14a>
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004346:	1d11      	adds	r1, r2, #4
 8004348:	6019      	str	r1, [r3, #0]
 800434a:	6813      	ldr	r3, [r2, #0]
 800434c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004350:	2301      	movs	r3, #1
 8004352:	e0a3      	b.n	800449c <_printf_i+0x1dc>
 8004354:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004358:	f102 0104 	add.w	r1, r2, #4
 800435c:	6019      	str	r1, [r3, #0]
 800435e:	d0d7      	beq.n	8004310 <_printf_i+0x50>
 8004360:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004364:	2b00      	cmp	r3, #0
 8004366:	da03      	bge.n	8004370 <_printf_i+0xb0>
 8004368:	222d      	movs	r2, #45	; 0x2d
 800436a:	425b      	negs	r3, r3
 800436c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004370:	4962      	ldr	r1, [pc, #392]	; (80044fc <_printf_i+0x23c>)
 8004372:	220a      	movs	r2, #10
 8004374:	e017      	b.n	80043a6 <_printf_i+0xe6>
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	6819      	ldr	r1, [r3, #0]
 800437a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800437e:	d003      	beq.n	8004388 <_printf_i+0xc8>
 8004380:	1d08      	adds	r0, r1, #4
 8004382:	6018      	str	r0, [r3, #0]
 8004384:	680b      	ldr	r3, [r1, #0]
 8004386:	e006      	b.n	8004396 <_printf_i+0xd6>
 8004388:	f010 0f40 	tst.w	r0, #64	; 0x40
 800438c:	f101 0004 	add.w	r0, r1, #4
 8004390:	6018      	str	r0, [r3, #0]
 8004392:	d0f7      	beq.n	8004384 <_printf_i+0xc4>
 8004394:	880b      	ldrh	r3, [r1, #0]
 8004396:	4959      	ldr	r1, [pc, #356]	; (80044fc <_printf_i+0x23c>)
 8004398:	2a6f      	cmp	r2, #111	; 0x6f
 800439a:	bf14      	ite	ne
 800439c:	220a      	movne	r2, #10
 800439e:	2208      	moveq	r2, #8
 80043a0:	2000      	movs	r0, #0
 80043a2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80043a6:	6865      	ldr	r5, [r4, #4]
 80043a8:	60a5      	str	r5, [r4, #8]
 80043aa:	2d00      	cmp	r5, #0
 80043ac:	f2c0 809c 	blt.w	80044e8 <_printf_i+0x228>
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	f020 0004 	bic.w	r0, r0, #4
 80043b6:	6020      	str	r0, [r4, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d13f      	bne.n	800443c <_printf_i+0x17c>
 80043bc:	2d00      	cmp	r5, #0
 80043be:	f040 8095 	bne.w	80044ec <_printf_i+0x22c>
 80043c2:	4675      	mov	r5, lr
 80043c4:	2a08      	cmp	r2, #8
 80043c6:	d10b      	bne.n	80043e0 <_printf_i+0x120>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	07da      	lsls	r2, r3, #31
 80043cc:	d508      	bpl.n	80043e0 <_printf_i+0x120>
 80043ce:	6923      	ldr	r3, [r4, #16]
 80043d0:	6862      	ldr	r2, [r4, #4]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	bfde      	ittt	le
 80043d6:	2330      	movle	r3, #48	; 0x30
 80043d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043e0:	ebae 0305 	sub.w	r3, lr, r5
 80043e4:	6123      	str	r3, [r4, #16]
 80043e6:	f8cd 8000 	str.w	r8, [sp]
 80043ea:	463b      	mov	r3, r7
 80043ec:	aa03      	add	r2, sp, #12
 80043ee:	4621      	mov	r1, r4
 80043f0:	4630      	mov	r0, r6
 80043f2:	f7ff feef 	bl	80041d4 <_printf_common>
 80043f6:	3001      	adds	r0, #1
 80043f8:	d155      	bne.n	80044a6 <_printf_i+0x1e6>
 80043fa:	f04f 30ff 	mov.w	r0, #4294967295
 80043fe:	b005      	add	sp, #20
 8004400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004404:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004408:	493c      	ldr	r1, [pc, #240]	; (80044fc <_printf_i+0x23c>)
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004412:	f100 0504 	add.w	r5, r0, #4
 8004416:	601d      	str	r5, [r3, #0]
 8004418:	d001      	beq.n	800441e <_printf_i+0x15e>
 800441a:	6803      	ldr	r3, [r0, #0]
 800441c:	e002      	b.n	8004424 <_printf_i+0x164>
 800441e:	0655      	lsls	r5, r2, #25
 8004420:	d5fb      	bpl.n	800441a <_printf_i+0x15a>
 8004422:	8803      	ldrh	r3, [r0, #0]
 8004424:	07d0      	lsls	r0, r2, #31
 8004426:	bf44      	itt	mi
 8004428:	f042 0220 	orrmi.w	r2, r2, #32
 800442c:	6022      	strmi	r2, [r4, #0]
 800442e:	b91b      	cbnz	r3, 8004438 <_printf_i+0x178>
 8004430:	6822      	ldr	r2, [r4, #0]
 8004432:	f022 0220 	bic.w	r2, r2, #32
 8004436:	6022      	str	r2, [r4, #0]
 8004438:	2210      	movs	r2, #16
 800443a:	e7b1      	b.n	80043a0 <_printf_i+0xe0>
 800443c:	4675      	mov	r5, lr
 800443e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004442:	fb02 3310 	mls	r3, r2, r0, r3
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800444c:	4603      	mov	r3, r0
 800444e:	2800      	cmp	r0, #0
 8004450:	d1f5      	bne.n	800443e <_printf_i+0x17e>
 8004452:	e7b7      	b.n	80043c4 <_printf_i+0x104>
 8004454:	6808      	ldr	r0, [r1, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	6949      	ldr	r1, [r1, #20]
 800445a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800445e:	d004      	beq.n	800446a <_printf_i+0x1aa>
 8004460:	1d10      	adds	r0, r2, #4
 8004462:	6018      	str	r0, [r3, #0]
 8004464:	6813      	ldr	r3, [r2, #0]
 8004466:	6019      	str	r1, [r3, #0]
 8004468:	e007      	b.n	800447a <_printf_i+0x1ba>
 800446a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800446e:	f102 0004 	add.w	r0, r2, #4
 8004472:	6018      	str	r0, [r3, #0]
 8004474:	6813      	ldr	r3, [r2, #0]
 8004476:	d0f6      	beq.n	8004466 <_printf_i+0x1a6>
 8004478:	8019      	strh	r1, [r3, #0]
 800447a:	2300      	movs	r3, #0
 800447c:	6123      	str	r3, [r4, #16]
 800447e:	4675      	mov	r5, lr
 8004480:	e7b1      	b.n	80043e6 <_printf_i+0x126>
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	1d11      	adds	r1, r2, #4
 8004486:	6019      	str	r1, [r3, #0]
 8004488:	6815      	ldr	r5, [r2, #0]
 800448a:	6862      	ldr	r2, [r4, #4]
 800448c:	2100      	movs	r1, #0
 800448e:	4628      	mov	r0, r5
 8004490:	f7fb fea6 	bl	80001e0 <memchr>
 8004494:	b108      	cbz	r0, 800449a <_printf_i+0x1da>
 8004496:	1b40      	subs	r0, r0, r5
 8004498:	6060      	str	r0, [r4, #4]
 800449a:	6863      	ldr	r3, [r4, #4]
 800449c:	6123      	str	r3, [r4, #16]
 800449e:	2300      	movs	r3, #0
 80044a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a4:	e79f      	b.n	80043e6 <_printf_i+0x126>
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	462a      	mov	r2, r5
 80044aa:	4639      	mov	r1, r7
 80044ac:	4630      	mov	r0, r6
 80044ae:	47c0      	blx	r8
 80044b0:	3001      	adds	r0, #1
 80044b2:	d0a2      	beq.n	80043fa <_printf_i+0x13a>
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	079b      	lsls	r3, r3, #30
 80044b8:	d507      	bpl.n	80044ca <_printf_i+0x20a>
 80044ba:	2500      	movs	r5, #0
 80044bc:	f104 0919 	add.w	r9, r4, #25
 80044c0:	68e3      	ldr	r3, [r4, #12]
 80044c2:	9a03      	ldr	r2, [sp, #12]
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	429d      	cmp	r5, r3
 80044c8:	db05      	blt.n	80044d6 <_printf_i+0x216>
 80044ca:	68e0      	ldr	r0, [r4, #12]
 80044cc:	9b03      	ldr	r3, [sp, #12]
 80044ce:	4298      	cmp	r0, r3
 80044d0:	bfb8      	it	lt
 80044d2:	4618      	movlt	r0, r3
 80044d4:	e793      	b.n	80043fe <_printf_i+0x13e>
 80044d6:	2301      	movs	r3, #1
 80044d8:	464a      	mov	r2, r9
 80044da:	4639      	mov	r1, r7
 80044dc:	4630      	mov	r0, r6
 80044de:	47c0      	blx	r8
 80044e0:	3001      	adds	r0, #1
 80044e2:	d08a      	beq.n	80043fa <_printf_i+0x13a>
 80044e4:	3501      	adds	r5, #1
 80044e6:	e7eb      	b.n	80044c0 <_printf_i+0x200>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1a7      	bne.n	800443c <_printf_i+0x17c>
 80044ec:	780b      	ldrb	r3, [r1, #0]
 80044ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f6:	e765      	b.n	80043c4 <_printf_i+0x104>
 80044f8:	080046b2 	.word	0x080046b2
 80044fc:	080046a1 	.word	0x080046a1

08004500 <_sbrk_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4c06      	ldr	r4, [pc, #24]	; (800451c <_sbrk_r+0x1c>)
 8004504:	2300      	movs	r3, #0
 8004506:	4605      	mov	r5, r0
 8004508:	4608      	mov	r0, r1
 800450a:	6023      	str	r3, [r4, #0]
 800450c:	f000 f854 	bl	80045b8 <_sbrk>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d102      	bne.n	800451a <_sbrk_r+0x1a>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	b103      	cbz	r3, 800451a <_sbrk_r+0x1a>
 8004518:	602b      	str	r3, [r5, #0]
 800451a:	bd38      	pop	{r3, r4, r5, pc}
 800451c:	20000e7c 	.word	0x20000e7c

08004520 <memmove>:
 8004520:	4288      	cmp	r0, r1
 8004522:	b510      	push	{r4, lr}
 8004524:	eb01 0302 	add.w	r3, r1, r2
 8004528:	d803      	bhi.n	8004532 <memmove+0x12>
 800452a:	1e42      	subs	r2, r0, #1
 800452c:	4299      	cmp	r1, r3
 800452e:	d10c      	bne.n	800454a <memmove+0x2a>
 8004530:	bd10      	pop	{r4, pc}
 8004532:	4298      	cmp	r0, r3
 8004534:	d2f9      	bcs.n	800452a <memmove+0xa>
 8004536:	1881      	adds	r1, r0, r2
 8004538:	1ad2      	subs	r2, r2, r3
 800453a:	42d3      	cmn	r3, r2
 800453c:	d100      	bne.n	8004540 <memmove+0x20>
 800453e:	bd10      	pop	{r4, pc}
 8004540:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004544:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004548:	e7f7      	b.n	800453a <memmove+0x1a>
 800454a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800454e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004552:	e7eb      	b.n	800452c <memmove+0xc>

08004554 <__malloc_lock>:
 8004554:	4770      	bx	lr

08004556 <__malloc_unlock>:
 8004556:	4770      	bx	lr

08004558 <_realloc_r>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	4607      	mov	r7, r0
 800455c:	4614      	mov	r4, r2
 800455e:	460e      	mov	r6, r1
 8004560:	b921      	cbnz	r1, 800456c <_realloc_r+0x14>
 8004562:	4611      	mov	r1, r2
 8004564:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004568:	f7ff bc86 	b.w	8003e78 <_malloc_r>
 800456c:	b922      	cbnz	r2, 8004578 <_realloc_r+0x20>
 800456e:	f7ff fc35 	bl	8003ddc <_free_r>
 8004572:	4625      	mov	r5, r4
 8004574:	4628      	mov	r0, r5
 8004576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004578:	f000 f814 	bl	80045a4 <_malloc_usable_size_r>
 800457c:	4284      	cmp	r4, r0
 800457e:	d90f      	bls.n	80045a0 <_realloc_r+0x48>
 8004580:	4621      	mov	r1, r4
 8004582:	4638      	mov	r0, r7
 8004584:	f7ff fc78 	bl	8003e78 <_malloc_r>
 8004588:	4605      	mov	r5, r0
 800458a:	2800      	cmp	r0, #0
 800458c:	d0f2      	beq.n	8004574 <_realloc_r+0x1c>
 800458e:	4631      	mov	r1, r6
 8004590:	4622      	mov	r2, r4
 8004592:	f7ff fb5f 	bl	8003c54 <memcpy>
 8004596:	4631      	mov	r1, r6
 8004598:	4638      	mov	r0, r7
 800459a:	f7ff fc1f 	bl	8003ddc <_free_r>
 800459e:	e7e9      	b.n	8004574 <_realloc_r+0x1c>
 80045a0:	4635      	mov	r5, r6
 80045a2:	e7e7      	b.n	8004574 <_realloc_r+0x1c>

080045a4 <_malloc_usable_size_r>:
 80045a4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80045a8:	2800      	cmp	r0, #0
 80045aa:	f1a0 0004 	sub.w	r0, r0, #4
 80045ae:	bfbc      	itt	lt
 80045b0:	580b      	ldrlt	r3, [r1, r0]
 80045b2:	18c0      	addlt	r0, r0, r3
 80045b4:	4770      	bx	lr
	...

080045b8 <_sbrk>:
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <_sbrk+0x14>)
 80045ba:	6819      	ldr	r1, [r3, #0]
 80045bc:	4602      	mov	r2, r0
 80045be:	b909      	cbnz	r1, 80045c4 <_sbrk+0xc>
 80045c0:	4903      	ldr	r1, [pc, #12]	; (80045d0 <_sbrk+0x18>)
 80045c2:	6019      	str	r1, [r3, #0]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	4402      	add	r2, r0
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	4770      	bx	lr
 80045cc:	200000c0 	.word	0x200000c0
 80045d0:	20000e80 	.word	0x20000e80

080045d4 <_init>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	bf00      	nop
 80045d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045da:	bc08      	pop	{r3}
 80045dc:	469e      	mov	lr, r3
 80045de:	4770      	bx	lr

080045e0 <_fini>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr
